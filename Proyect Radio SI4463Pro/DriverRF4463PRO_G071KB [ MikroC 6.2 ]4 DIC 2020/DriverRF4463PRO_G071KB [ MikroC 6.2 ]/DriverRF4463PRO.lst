;  LST file generated by mikroListExporter - v.2.0 
; Date/Time: 03/12/2020 04:35:31 p. m.
;----------------------------------------------

;Address Opcode 	ASM
____SysVT:
0x0000	0x7FFC2000  	536903676
0x0004	0x26F50000  	9973
0x0008	0x2B110000  	11025
0x000C	0x2B110000  	11025
0x0010	0x2B110000  	11025
0x0014	0x2B110000  	11025
0x0018	0x2B110000  	11025
0x001C	0x2B110000  	11025
0x0020	0x2B110000  	11025
0x0024	0x2B110000  	11025
0x0028	0x2B110000  	11025
0x002C	0x2B110000  	11025
0x0030	0x2B110000  	11025
0x0034	0x2B110000  	11025
0x0038	0x2B110000  	11025
0x003C	0x2B110000  	11025
0x0040	0x2B110000  	11025
0x0044	0x2B110000  	11025
0x0048	0x2B110000  	11025
0x004C	0x2B110000  	11025
0x0050	0x2B110000  	11025
0x0054	0x2B110000  	11025
0x0058	0x25390000  	9529
0x005C	0x2B110000  	11025
0x0060	0x2B110000  	11025
0x0064	0x25950000  	9621
0x0068	0x2B110000  	11025
0x006C	0x2B110000  	11025
0x0070	0x2B110000  	11025
0x0074	0x2B110000  	11025
0x0078	0x2B110000  	11025
0x007C	0x25690000  	9577
0x0080	0x2B110000  	11025
0x0084	0x2B110000  	11025
0x0088	0x2B110000  	11025
0x008C	0x2B110000  	11025
0x0090	0x2B110000  	11025
0x0094	0x2B110000  	11025
0x0098	0x2B110000  	11025
0x009C	0x2B110000  	11025
0x00A0	0x2B110000  	11025
0x00A4	0x266D0000  	9837
0x00A8	0x2B110000  	11025
0x00AC	0x26BD0000  	9917
0x00B0	0x2B110000  	11025
0x00B4	0x2B110000  	11025
0x00B8	0x2B110000  	11025
0x00BC	0x2B110000  	11025
; end of ____SysVT
_main:
;DriverRF4463PROMain.c, 99 :: 		void main() {
0x26F4	0xB08F    SUB	SP, SP, #60
0x26F6	0xF000F9B9  BL	10860
0x26FA	0xF000FF03  BL	13572
0x26FE	0xF000FA0B  BL	11032
0x2702	0xF000FEB1  BL	13416
;DriverRF4463PROMain.c, 103 :: 		Delay_ms( 2000 );                    // delay de depuracion
0x2706	0x4F02    LDR	R7, [PC, #8]
0x2708	0xBF00    NOP
L_main216:
0x270A	0x1E7F    SUBS	R7, R7, #1
0x270C	0xD1FD    BNE	L_main216
0x270E	0xE002    B	#4
0x2710	0x11FF007A  	#7999999
0x2714	0xBF00    NOP
;DriverRF4463PROMain.c, 216 :: 		GPIO_Digital_Output( &GPIOC_BASE, _GPIO_PINMASK_6 );  // r   ( Led Rojo de tarjeta de desarrollo )
0x2716	0x2140    MOVS	R1, #64
0x2718	0x48A7    LDR	R0, [PC, #668]
0x271A	0xF7FEFF47  BL	_GPIO_Digital_Output+0
;DriverRF4463PROMain.c, 221 :: 		GPIO_Digital_Output( &GPIOB_BASE, _GPIO_PINMASK_9 );
0x271E	0x49A7    LDR	R1, [PC, #668]
0x2720	0x48A7    LDR	R0, [PC, #668]
0x2722	0xF7FEFF43  BL	_GPIO_Digital_Output+0
;DriverRF4463PROMain.c, 224 :: 		GPIO_Digital_Input( &GPIOC_BASE, _GPIO_PINMASK_14 );
0x2726	0x49A7    LDR	R1, [PC, #668]
0x2728	0x48A3    LDR	R0, [PC, #652]
0x272A	0xF7FEFEC3  BL	_GPIO_Digital_Input+0
;DriverRF4463PROMain.c, 225 :: 		GPIO_Digital_Input( &GPIOC_BASE, _GPIO_PINMASK_15 );
0x272E	0x49A6    LDR	R1, [PC, #664]
0x2730	0x48A1    LDR	R0, [PC, #644]
0x2732	0xF7FEFEBF  BL	_GPIO_Digital_Input+0
;DriverRF4463PROMain.c, 230 :: 		GPIO_Digital_Input( &GPIOA_BASE, _GPIO_PINMASK_2 );          // nIRQ
0x2736	0x2104    MOVS	R1, #4
0x2738	0x48A4    LDR	R0, [PC, #656]
0x273A	0xF7FEFEBB  BL	_GPIO_Digital_Input+0
;DriverRF4463PROMain.c, 232 :: 		GPIO_Digital_Output( &GPIOA_BASE, _GPIO_PINMASK_3 );         // nSEL
0x273E	0x2108    MOVS	R1, #8
0x2740	0x48A2    LDR	R0, [PC, #648]
0x2742	0xF7FEFF33  BL	_GPIO_Digital_Output+0
;DriverRF4463PROMain.c, 233 :: 		GPIO_Digital_Output( &GPIOB_BASE, _GPIO_PINMASK_2 );         // SDN
0x2746	0x2104    MOVS	R1, #4
0x2748	0x489D    LDR	R0, [PC, #628]
0x274A	0xF7FEFF2F  BL	_GPIO_Digital_Output+0
;DriverRF4463PROMain.c, 234 :: 		GPIO_Digital_Output( &GPIOA_BASE, _GPIO_PINMASK_11 );        // GPIO0
0x274E	0x49A0    LDR	R1, [PC, #640]
0x2750	0x489E    LDR	R0, [PC, #632]
0x2752	0xF7FEFF2B  BL	_GPIO_Digital_Output+0
;DriverRF4463PROMain.c, 235 :: 		GPIO_Digital_Output( &GPIOA_BASE, _GPIO_PINMASK_12 );        // GPIO1
0x2756	0x499F    LDR	R1, [PC, #636]
0x2758	0x489C    LDR	R0, [PC, #624]
0x275A	0xF7FEFF27  BL	_GPIO_Digital_Output+0
;DriverRF4463PROMain.c, 251 :: 		RCC_APBENR2bits.SYSCFGEN = 1;
0x275E	0x4A9E    LDR	R2, [PC, #632]
0x2760	0x6810    LDR	R0, [R2, #0]
0x2762	0x2101    MOVS	R1, #1
0x2764	0x4308    ORRS	R0, R1
0x2766	0x6010    STR	R0, [R2, #0]
;DriverRF4463PROMain.c, 253 :: 		SYSCFG_VREFBUF_CFGR1bits.UCPD1_STROBE = 1;
0x2768	0x4A9C    LDR	R2, [PC, #624]
0x276A	0x6810    LDR	R0, [R2, #0]
0x276C	0x2101    MOVS	R1, #1
0x276E	0x0249    LSLS	R1, R1, #9
0x2770	0x4308    ORRS	R0, R1
0x2772	0x6010    STR	R0, [R2, #0]
;DriverRF4463PROMain.c, 256 :: 		nSEL = 1;
0x2774	0x4A9A    LDR	R2, [PC, #616]
0x2776	0x6810    LDR	R0, [R2, #0]
0x2778	0x2108    MOVS	R1, #8
0x277A	0x4308    ORRS	R0, R1
0x277C	0x6010    STR	R0, [R2, #0]
;DriverRF4463PROMain.c, 258 :: 		LED_RED      = 1;
0x277E	0x4A99    LDR	R2, [PC, #612]
0x2780	0x6810    LDR	R0, [R2, #0]
0x2782	0x2140    MOVS	R1, #64
0x2784	0x4308    ORRS	R0, R1
0x2786	0x6010    STR	R0, [R2, #0]
;DriverRF4463PROMain.c, 259 :: 		LED_GREEN    = 1;
0x2788	0x4A96    LDR	R2, [PC, #600]
0x278A	0x6810    LDR	R0, [R2, #0]
0x278C	0x2140    MOVS	R1, #64
0x278E	0x4308    ORRS	R0, R1
0x2790	0x6010    STR	R0, [R2, #0]
;DriverRF4463PROMain.c, 260 :: 		LED_BLUE     = 1;
0x2792	0x4A94    LDR	R2, [PC, #592]
0x2794	0x6810    LDR	R0, [R2, #0]
0x2796	0x2101    MOVS	R1, #1
0x2798	0x0209    LSLS	R1, R1, #8
0x279A	0x4308    ORRS	R0, R1
0x279C	0x6010    STR	R0, [R2, #0]
;DriverRF4463PROMain.c, 262 :: 		Delay_ms( 100 );
0x279E	0x4F02    LDR	R7, [PC, #8]
0x27A0	0xBF00    NOP
L_main218:
0x27A2	0x1E7F    SUBS	R7, R7, #1
0x27A4	0xD1FD    BNE	L_main218
0x27A6	0xE002    B	#4
0x27A8	0x1A7F0006  	#399999
0x27AC	0xBF00    NOP
;DriverRF4463PROMain.c, 264 :: 		LED_RED      = 0;
0x27AE	0x4A8D    LDR	R2, [PC, #564]
0x27B0	0x6810    LDR	R0, [R2, #0]
0x27B2	0x2140    MOVS	R1, #64
0x27B4	0x4388    BICS	R0, R1
0x27B6	0x6010    STR	R0, [R2, #0]
;DriverRF4463PROMain.c, 265 :: 		LED_GREEN    = 1;
0x27B8	0x4A8A    LDR	R2, [PC, #552]
0x27BA	0x6810    LDR	R0, [R2, #0]
0x27BC	0x2140    MOVS	R1, #64
0x27BE	0x4308    ORRS	R0, R1
0x27C0	0x6010    STR	R0, [R2, #0]
;DriverRF4463PROMain.c, 266 :: 		LED_BLUE     = 0;
0x27C2	0x4A88    LDR	R2, [PC, #544]
0x27C4	0x6810    LDR	R0, [R2, #0]
0x27C6	0x2101    MOVS	R1, #1
0x27C8	0x0209    LSLS	R1, R1, #8
0x27CA	0x4388    BICS	R0, R1
0x27CC	0x6010    STR	R0, [R2, #0]
;DriverRF4463PROMain.c, 268 :: 		InitTimer2();
0x27CE	0xF7FEFE77  BL	_InitTimer2+0
;DriverRF4463PROMain.c, 271 :: 		vUSARTConfigUSART1( 115200 );  // configura todos las parametros de USART
0x27D2	0x4885    LDR	R0, [PC, #532]
0x27D4	0xB401    PUSH	(R0)
0x27D6	0xF7FEFE9F  BL	_vUSARTConfigUSART1+0
0x27DA	0xB001    ADD	SP, SP, #4
;DriverRF4463PROMain.c, 287 :: 		vSPI1Init();           // configura todos los parametros de SPI
0x27DC	0xF7FEFEEE  BL	_vSPI1Init+0
;DriverRF4463PROMain.c, 293 :: 		freq3 = 9;
0x27E0	0x2109    MOVS	R1, #9
0x27E2	0x4882    LDR	R0, [PC, #520]
0x27E4	0x7001    STRB	R1, [R0, #0]
;DriverRF4463PROMain.c, 294 :: 		freq2 = 1;
0x27E6	0x2101    MOVS	R1, #1
0x27E8	0x4881    LDR	R0, [PC, #516]
0x27EA	0x7001    STRB	R1, [R0, #0]
;DriverRF4463PROMain.c, 295 :: 		freq1 = 5;
0x27EC	0x2105    MOVS	R1, #5
0x27EE	0x4881    LDR	R0, [PC, #516]
0x27F0	0x7001    STRB	R1, [R0, #0]
;DriverRF4463PROMain.c, 298 :: 		power = 1;
0x27F2	0x2101    MOVS	R1, #1
0x27F4	0x4880    LDR	R0, [PC, #512]
0x27F6	0x7001    STRB	R1, [R0, #0]
;DriverRF4463PROMain.c, 300 :: 		rate  = dr_1p2;                // BAUDRATE
0x27F8	0x2100    MOVS	R1, #0
0x27FA	0x4880    LDR	R0, [PC, #512]
0x27FC	0x7001    STRB	R1, [R0, #0]
;DriverRF4463PROMain.c, 302 :: 		mode  = master_mode;          // para transmision continua usar: tx_test_mode
0x27FE	0x2100    MOVS	R1, #0
0x2800	0x487F    LDR	R0, [PC, #508]
0x2802	0x7001    STRB	R1, [R0, #0]
;DriverRF4463PROMain.c, 306 :: 		reset_mode = 0;
0x2804	0x2100    MOVS	R1, #0
0x2806	0x487F    LDR	R0, [PC, #508]
0x2808	0x7001    STRB	R1, [R0, #0]
;DriverRF4463PROMain.c, 310 :: 		VRF4463SDNReset();
0x280A	0xF7FFFE23  BL	_VRF4463SDNReset+0
;DriverRF4463PROMain.c, 311 :: 		vRF4463Init();
0x280E	0xF7FFF89D  BL	_vRF4463Init+0
;DriverRF4463PROMain.c, 312 :: 		vRF4463ClearInterrupts();
0x2812	0xF7FFFE6F  BL	_vRF4463ClearInterrupts+0
;DriverRF4463PROMain.c, 313 :: 		vRF4463PartInfo ();          // SOLICITA EL MODELO DEL RADIO
0x2816	0xF7FFF83D  BL	_vRF4463PartInfo+0
;DriverRF4463PROMain.c, 315 :: 		LED_GREEN    = 0;
0x281A	0x4A72    LDR	R2, [PC, #456]
0x281C	0x6810    LDR	R0, [R2, #0]
0x281E	0x2140    MOVS	R1, #64
0x2820	0x4388    BICS	R0, R1
0x2822	0x6010    STR	R0, [R2, #0]
;DriverRF4463PROMain.c, 316 :: 		LED_BLUE     = 0;
0x2824	0x4A6F    LDR	R2, [PC, #444]
0x2826	0x6810    LDR	R0, [R2, #0]
0x2828	0x2101    MOVS	R1, #1
0x282A	0x0209    LSLS	R1, R1, #8
0x282C	0x4388    BICS	R0, R1
0x282E	0x6010    STR	R0, [R2, #0]
;DriverRF4463PROMain.c, 323 :: 		UART1_Write_Text( "[ SYS STM32G ]RF Radio ready\r\n" );
0x2830	0x2608    MOVS	R6, #8
0x2832	0x446E    ADD	R6, SP, R6
0x2834	0x251F    MOVS	R5, #31
0x2836	0x19AD    ADDS	R5, R5, R6
0x2838	0x4F73    LDR	R7, [PC, #460]
0x283A	0xF7FEFE97  BL	___CC2DW+0
0x283E	0x2008    MOVS	R0, #8
0x2840	0x4468    ADD	R0, SP, R0
0x2842	0x4604    MOV	R4, R0
0x2844	0x4620    MOV	R0, R4
0x2846	0xF7FFF83B  BL	_UART1_Write_Text+0
;DriverRF4463PROMain.c, 326 :: 		while ( 1 ) {
L_main220:
;DriverRF4463PROMain.c, 334 :: 		if ( ucRF4463IRQ ) {
0x284A	0x4870    LDR	R0, [PC, #448]
0x284C	0x7800    LDRB	R0, [R0, #0]
0x284E	0x2800    CMP	R0, #0
0x2850	0xD009    BEQ	L_main222
;DriverRF4463PROMain.c, 335 :: 		ucRF4463IRQ = 0;       // limpia bandera
0x2852	0x2100    MOVS	R1, #0
0x2854	0x486D    LDR	R0, [PC, #436]
0x2856	0x7001    STRB	R1, [R0, #0]
;DriverRF4463PROMain.c, 336 :: 		spi_read_fifo();       // Read RX FIFO
0x2858	0xF7FFF83A  BL	_spi_read_fifo+0
;DriverRF4463PROMain.c, 337 :: 		vRF4463FifoReset();    // FIFO RESET
0x285C	0xF7FEFC3E  BL	_vRF4463FifoReset+0
;DriverRF4463PROMain.c, 338 :: 		UART1_Write_Text( spi_read_buf );
0x2860	0x486B    LDR	R0, [PC, #428]
0x2862	0xF7FFF82D  BL	_UART1_Write_Text+0
;DriverRF4463PROMain.c, 339 :: 		}
L_main222:
;DriverRF4463PROMain.c, 342 :: 		if ( mode == master_mode ) {
0x2866	0x4866    LDR	R0, [PC, #408]
0x2868	0x7800    LDRB	R0, [R0, #0]
0x286A	0x2800    CMP	R0, #0
0x286C	0xD102    BNE	L_main223
;DriverRF4463PROMain.c, 343 :: 		vRF4463TxData();
0x286E	0xF7FEFC49  BL	_vRF4463TxData+0
;DriverRF4463PROMain.c, 344 :: 		}
0x2872	0xE005    B	L_main224
L_main223:
;DriverRF4463PROMain.c, 347 :: 		else if ( mode == slave_mode ) {
0x2874	0x4862    LDR	R0, [PC, #392]
0x2876	0x7800    LDRB	R0, [R0, #0]
0x2878	0x2801    CMP	R0, #1
0x287A	0xD101    BNE	L_main225
;DriverRF4463PROMain.c, 348 :: 		vRF4463RxInit();
0x287C	0xF7FEFBFE  BL	_vRF4463RxInit+0
;DriverRF4463PROMain.c, 349 :: 		}
L_main225:
L_main224:
;DriverRF4463PROMain.c, 352 :: 		if ( mode == tx_test_mode ) {
0x2880	0x485F    LDR	R0, [PC, #380]
0x2882	0x7800    LDRB	R0, [R0, #0]
0x2884	0x2802    CMP	R0, #2
0x2886	0xD10B    BNE	L_main226
;DriverRF4463PROMain.c, 353 :: 		vRF4463TxCont();
0x2888	0xF7FEFCCC  BL	_vRF4463TxCont+0
;DriverRF4463PROMain.c, 354 :: 		while ( 1 ) {
L_main227:
;DriverRF4463PROMain.c, 355 :: 		if ( !nIRQ ) {
0x288C	0x4861    LDR	R0, [PC, #388]
0x288E	0x6801    LDR	R1, [R0, #0]
0x2890	0x2004    MOVS	R0, #4
0x2892	0x4008    ANDS	R0, R1
0x2894	0x0880    LSRS	R0, R0, #2
0x2896	0x2800    CMP	R0, #0
0x2898	0xD101    BNE	L_main229
;DriverRF4463PROMain.c, 356 :: 		vRF4463TxCont();
0x289A	0xF7FEFCC3  BL	_vRF4463TxCont+0
;DriverRF4463PROMain.c, 357 :: 		}
L_main229:
;DriverRF4463PROMain.c, 358 :: 		}
0x289E	0xE7F5    B	L_main227
;DriverRF4463PROMain.c, 359 :: 		}
L_main226:
;DriverRF4463PROMain.c, 361 :: 		if ( mode == rx_test_mode ) {
0x28A0	0x4857    LDR	R0, [PC, #348]
0x28A2	0x7800    LDRB	R0, [R0, #0]
0x28A4	0x2803    CMP	R0, #3
0x28A6	0xD102    BNE	L_main230
;DriverRF4463PROMain.c, 362 :: 		vRF4463RxInit ();
0x28A8	0xF7FEFBE8  BL	_vRF4463RxInit+0
;DriverRF4463PROMain.c, 363 :: 		while ( 1 ) {
L_main231:
;DriverRF4463PROMain.c, 365 :: 		}
0x28AC	0xE7FE    B	L_main231
;DriverRF4463PROMain.c, 366 :: 		}
L_main230:
;DriverRF4463PROMain.c, 368 :: 		if ( reset_mode == 0 ) {
0x28AE	0x4855    LDR	R0, [PC, #340]
0x28B0	0x7800    LDRB	R0, [R0, #0]
0x28B2	0x2800    CMP	R0, #0
0x28B4	0xD000    BEQ	#0
0x28B6	0xE0D4    B	L_main233
;DriverRF4463PROMain.c, 370 :: 		while ( 1 ) {
L_main234:
;DriverRF4463PROMain.c, 372 :: 		if ( Flag.reach_1s ) {
0x28B8	0x4857    LDR	R0, [PC, #348]
0x28BA	0x7801    LDRB	R1, [R0, #0]
0x28BC	0x2001    MOVS	R0, #1
0x28BE	0x4008    ANDS	R0, R1
0x28C0	0x2800    CMP	R0, #0
0x28C2	0xD00A    BEQ	L_main236
;DriverRF4463PROMain.c, 373 :: 		Flag.reach_1s = 0;
0x28C4	0x4A54    LDR	R2, [PC, #336]
0x28C6	0x7810    LDRB	R0, [R2, #0]
0x28C8	0x2101    MOVS	R1, #1
0x28CA	0x4388    BICS	R0, R1
0x28CC	0x7010    STRB	R0, [R2, #0]
;DriverRF4463PROMain.c, 374 :: 		if ( mode == master_mode ) {
0x28CE	0x484C    LDR	R0, [PC, #304]
0x28D0	0x7800    LDRB	R0, [R0, #0]
0x28D2	0x2800    CMP	R0, #0
0x28D4	0xD101    BNE	L_main237
;DriverRF4463PROMain.c, 375 :: 		vRF4463TxData();
0x28D6	0xF7FEFC15  BL	_vRF4463TxData+0
;DriverRF4463PROMain.c, 376 :: 		}
L_main237:
;DriverRF4463PROMain.c, 377 :: 		}
L_main236:
;DriverRF4463PROMain.c, 380 :: 		if ( !Flag.is_tx ) {
0x28DA	0x484F    LDR	R0, [PC, #316]
0x28DC	0x7801    LDRB	R1, [R0, #0]
0x28DE	0x2002    MOVS	R0, #2
0x28E0	0x4008    ANDS	R0, R1
0x28E2	0x0840    LSRS	R0, R0, #1
0x28E4	0x2800    CMP	R0, #0
0x28E6	0xD000    BEQ	#0
0x28E8	0xE0BA    B	L_main238
;DriverRF4463PROMain.c, 381 :: 		if ( !nIRQ ) {          // !nIRQ
0x28EA	0x484A    LDR	R0, [PC, #296]
0x28EC	0x6801    LDR	R1, [R0, #0]
0x28EE	0x2004    MOVS	R0, #4
0x28F0	0x4008    ANDS	R0, R1
0x28F2	0x0880    LSRS	R0, R0, #2
0x28F4	0x2800    CMP	R0, #0
0x28F6	0xD000    BEQ	#0
0x28F8	0xE0B2    B	L_main239
;DriverRF4463PROMain.c, 382 :: 		vRF4463ClearInterrupts();
0x28FA	0xF7FFFDFB  BL	_vRF4463ClearInterrupts+0
;DriverRF4463PROMain.c, 384 :: 		if ( ( spi_read_buf[ 4 ] & 0x08) == 0 ) { // crc error check
0x28FE	0x4847    LDR	R0, [PC, #284]
0x2900	0x7801    LDRB	R1, [R0, #0]
0x2902	0x2008    MOVS	R0, #8
0x2904	0x4008    ANDS	R0, R1
0x2906	0xB2C0    UXTB	R0, R0
0x2908	0x2800    CMP	R0, #0
0x290A	0xD152    BNE	L_main240
;DriverRF4463PROMain.c, 386 :: 		spi_read_fifo();
0x290C	0xF7FEFFE0  BL	_spi_read_fifo+0
;DriverRF4463PROMain.c, 387 :: 		vRF4463FifoReset();
0x2910	0xF7FEFBE4  BL	_vRF4463FifoReset+0
;DriverRF4463PROMain.c, 389 :: 		chksum = 0;
0x2914	0x2000    MOVS	R0, #0
0x2916	0x9001    STR	R0, [SP, #4]
;DriverRF4463PROMain.c, 390 :: 		for ( i = 4; i < payload_length - 1; i++ )                // Calculation Checksum
0x2918	0x2004    MOVS	R0, #4
0x291A	0x9000    STR	R0, [SP, #0]
L_main241:
0x291C	0x9800    LDR	R0, [SP, #0]
0x291E	0xB2C0    UXTB	R0, R0
0x2920	0x280D    CMP	R0, #13
0x2922	0xDA0D    BGE	L_main242
;DriverRF4463PROMain.c, 391 :: 		chksum += rx_buf[ i ];
0x2924	0x9900    LDR	R1, [SP, #0]
0x2926	0xB2C9    UXTB	R1, R1
0x2928	0x483D    LDR	R0, [PC, #244]
0x292A	0x1840    ADDS	R0, R0, R1
0x292C	0x7801    LDRB	R1, [R0, #0]
0x292E	0x9801    LDR	R0, [SP, #4]
0x2930	0xB2C0    UXTB	R0, R0
0x2932	0x1840    ADDS	R0, R0, R1
0x2934	0x9001    STR	R0, [SP, #4]
;DriverRF4463PROMain.c, 390 :: 		for ( i = 4; i < payload_length - 1; i++ )                // Calculation Checksum
0x2936	0x9800    LDR	R0, [SP, #0]
0x2938	0xB2C0    UXTB	R0, R0
0x293A	0x3001    ADDS	R0, #1
0x293C	0x9000    STR	R0, [SP, #0]
;DriverRF4463PROMain.c, 391 :: 		chksum += rx_buf[ i ];
0x293E	0xE7ED    B	L_main241
L_main242:
;DriverRF4463PROMain.c, 393 :: 		if ( ( chksum == rx_buf[ payload_length - 1 ] )&&( rx_buf[ 4 ] == 0x41 )) {
0x2940	0x4838    LDR	R0, [PC, #224]
0x2942	0x7801    LDRB	R1, [R0, #0]
0x2944	0x9801    LDR	R0, [SP, #4]
0x2946	0xB2C0    UXTB	R0, R0
0x2948	0x4288    CMP	R0, R1
0x294A	0xD12F    BNE	L_main246
0x294C	0x4836    LDR	R0, [PC, #216]
0x294E	0x7800    LDRB	R0, [R0, #0]
0x2950	0x2841    CMP	R0, #65
0x2952	0xD12B    BNE	L_main246
L__main253:
;DriverRF4463PROMain.c, 402 :: 		UART1_Write_Text( rx_buf );
0x2954	0x4832    LDR	R0, [PC, #200]
0x2956	0xF7FEFFB3  BL	_UART1_Write_Text+0
;DriverRF4463PROMain.c, 403 :: 		UART1_Write_Text("\r\n");
0x295A	0x2628    MOVS	R6, #40
0x295C	0x446E    ADD	R6, SP, R6
0x295E	0x2503    MOVS	R5, #3
0x2960	0x19AD    ADDS	R5, R5, R6
0x2962	0x4F32    LDR	R7, [PC, #200]
0x2964	0xF7FEFE02  BL	___CC2DW+0
0x2968	0x2028    MOVS	R0, #40
0x296A	0x4468    ADD	R0, SP, R0
0x296C	0x4604    MOV	R4, R0
0x296E	0x4620    MOV	R0, R4
0x2970	0xF7FEFFA6  BL	_UART1_Write_Text+0
;DriverRF4463PROMain.c, 408 :: 		LED_GREEN ^= 1;                                        // Data received
0x2974	0x481B    LDR	R0, [PC, #108]
0x2976	0x6800    LDR	R0, [R0, #0]
0x2978	0x2240    MOVS	R2, #64
0x297A	0x4002    ANDS	R2, R0
0x297C	0x0992    LSRS	R2, R2, #6
0x297E	0x482C    LDR	R0, [PC, #176]
0x2980	0x7801    LDRB	R1, [R0, #0]
0x2982	0x2001    MOVS	R0, BitMask(_ucSPI1ByteReceived+0)
0x2984	0x4008    ANDS	R0, R1
0x2986	0x4613    MOV	R3, R2
0x2988	0x4043    EORS	R3, R0
0x298A	0x4A16    LDR	R2, [PC, #88]
0x298C	0x6810    LDR	R0, [R2, #0]
0x298E	0x2101    MOVS	R1, #1
0x2990	0x4019    ANDS	R1, R3
0x2992	0xD002    BEQ	L__main315
0x2994	0x2140    MOVS	R1, #64
0x2996	0x4308    ORRS	R0, R1
0x2998	0xE001    B	L__main314
L__main315:
0x299A	0x2140    MOVS	R1, #64
0x299C	0x4388    BICS	R0, R1
L__main314:
0x299E	0x6010    STR	R0, [R2, #0]
;DriverRF4463PROMain.c, 409 :: 		rx_cnt++;
0x29A0	0x4824    LDR	R0, [PC, #144]
0x29A2	0x6800    LDR	R0, [R0, #0]
0x29A4	0x1C41    ADDS	R1, R0, #1
0x29A6	0x4823    LDR	R0, [PC, #140]
0x29A8	0x6001    STR	R1, [R0, #0]
;DriverRF4463PROMain.c, 415 :: 		}
0x29AA	0xE001    B	L_main247
L_main246:
;DriverRF4463PROMain.c, 417 :: 		vRF4463RxInit();    // The received data is wrong, you must continue to receive
0x29AC	0xF7FEFB66  BL	_vRF4463RxInit+0
L_main247:
;DriverRF4463PROMain.c, 418 :: 		}
0x29B0	0xE056    B	L_main248
L_main240:
;DriverRF4463PROMain.c, 421 :: 		vUSART1Start_TX("[ CRC ] Fail\r\n", 14 );
0x29B2	0x200E    MOVS	R0, #14
0x29B4	0xE040    B	#128
0x29B6	0xBF00    NOP
0x29B8	0x08005000  	GPIOC_BASE+0
0x29BC	0x02000000  	#512
0x29C0	0x04005000  	GPIOB_BASE+0
0x29C4	0x40000000  	#16384
0x29C8	0x80000000  	#32768
0x29CC	0x00005000  	GPIOA_BASE+0
0x29D0	0x08000000  	#2048
0x29D4	0x10000000  	#4096
0x29D8	0x10404002  	RCC_APBENR2bits+0
0x29DC	0x00004001  	SYSCFG_VREFBUF_CFGR1bits+0
0x29E0	0x00145000  	GPIOA_ODRbits+0
0x29E4	0x08145000  	GPIOC_ODRbits+0
0x29E8	0xC2000001  	#115200
0x29EC	0x008F2000  	_freq3+0
0x29F0	0x00982000  	_freq2+0
0x29F4	0x00992000  	_freq1+0
0x29F8	0x00C92000  	_power+0
0x29FC	0x00C72000  	_rate+0
0x2A00	0x00C82000  	_mode+0
0x2A04	0x00CD2000  	_reset_mode+0
0x2A08	0x33DC0000  	?ICS?lstr3_DriverRF4463PROMain+0
0x2A0C	0x008D2000  	DriverRF4463PROMain_ucRF4463IRQ+0
0x2A10	0x009A2000  	_spi_read_buf+0
0x2A14	0x00105000  	GPIOA_IDRbits+0
0x2A18	0x00CC2000  	_Flag+0
0x2A1C	0x009E2000  	_spi_read_buf+4
0x2A20	0x00AE2000  	_rx_buf+0
0x2A24	0x00BB2000  	_rx_buf+13
0x2A28	0x00B22000  	_rx_buf+4
0x2A2C	0x33FC0000  	?ICS?lstr4_DriverRF4463PROMain+0
0x2A30	0x008E2000  	_ucSPI1ByteReceived+0
0x2A34	0x00942000  	_rx_cnt+0
0x2A38	0xB401    PUSH	(R0)
0x2A3A	0x2630    MOVS	R6, #48
0x2A3C	0x446E    ADD	R6, SP, R6
0x2A3E	0x250F    MOVS	R5, #15
0x2A40	0x19AD    ADDS	R5, R5, R6
0x2A42	0x4F09    LDR	R7, [PC, #36]
0x2A44	0xF7FEFD92  BL	___CC2DW+0
0x2A48	0x2030    MOVS	R0, #48
0x2A4A	0x4468    ADD	R0, SP, R0
0x2A4C	0xB401    PUSH	(R0)
0x2A4E	0xF7FEFBE5  BL	_vUSART1Start_TX+0
0x2A52	0xB002    ADD	SP, SP, #8
;DriverRF4463PROMain.c, 422 :: 		VRF4463SDNReset();
0x2A54	0xF7FFFCFE  BL	_VRF4463SDNReset+0
;DriverRF4463PROMain.c, 423 :: 		vRF4463Init();
0x2A58	0xF7FEFF78  BL	_vRF4463Init+0
;DriverRF4463PROMain.c, 424 :: 		vRF4463RxInit();
0x2A5C	0xF7FEFB0E  BL	_vRF4463RxInit+0
;DriverRF4463PROMain.c, 425 :: 		}
L_main248:
;DriverRF4463PROMain.c, 426 :: 		}
L_main239:
;DriverRF4463PROMain.c, 427 :: 		}
L_main238:
;DriverRF4463PROMain.c, 428 :: 		}
0x2A60	0xE72A    B	L_main234
;DriverRF4463PROMain.c, 429 :: 		}
L_main233:
;DriverRF4463PROMain.c, 430 :: 		}
0x2A62	0xE6F2    B	L_main220
;DriverRF4463PROMain.c, 431 :: 		}
L_end_main:
L__main_end_loop:
0x2A64	0xE7FE    B	L__main_end_loop
0x2A66	0xBF00    NOP
0x2A68	0x34000000  	?ICS?lstr5_DriverRF4463PROMain+0
; end of _main
___CC2DW:
;__Lib_System_G0xx.c, 27 :: 		
0x156C	0xB081    SUB	SP, SP, #4
;__Lib_System_G0xx.c, 29 :: 		
L_loopDW:
;__Lib_System_G0xx.c, 30 :: 		
0x156E	0x783C    LDRB	R4, [R7, #0]
;__Lib_System_G0xx.c, 31 :: 		
0x1570	0x1C7F    ADDS	R7, R7, #1
;__Lib_System_G0xx.c, 32 :: 		
0x1572	0x7034    STRB	R4, [R6, #0]
;__Lib_System_G0xx.c, 33 :: 		
0x1574	0x1C76    ADDS	R6, R6, #1
;__Lib_System_G0xx.c, 34 :: 		
0x1576	0x42AE    CMP	R6, R5
;__Lib_System_G0xx.c, 35 :: 		
0x1578	0xD1F9    BNE	L_loopDW
;__Lib_System_G0xx.c, 37 :: 		
L_end___CC2DW:
0x157A	0xB001    ADD	SP, SP, #4
0x157C	0x4770    BX	LR
; end of ___CC2DW
___FillZeros:
;__Lib_System_G0xx.c, 76 :: 		
0x1580	0xB081    SUB	SP, SP, #4
;__Lib_System_G0xx.c, 78 :: 		
0x1582	0x2400    MOVS	R4, #0
;__Lib_System_G0xx.c, 79 :: 		
0x1584	0x2700    MOVS	R7, #0
;__Lib_System_G0xx.c, 80 :: 		
0x1586	0x45AD    CMP	SP, R5
;__Lib_System_G0xx.c, 81 :: 		
0x1588	0xDC03    BGT	L_loopFZs
;__Lib_System_G0xx.c, 82 :: 		
0x158A	0x45B5    CMP	SP, R6
;__Lib_System_G0xx.c, 83 :: 		
0x158C	0xDB01    BLT	L_loopFZs
;__Lib_System_G0xx.c, 84 :: 		
0x158E	0x462F    MOV	R7, R5
;__Lib_System_G0xx.c, 85 :: 		
0x1590	0x466D    MOV	R5, SP
;__Lib_System_G0xx.c, 86 :: 		
L_loopFZs:
;__Lib_System_G0xx.c, 87 :: 		
0x1592	0x6034    STR	R4, [R6, #0]
;__Lib_System_G0xx.c, 88 :: 		
0x1594	0x1D36    ADDS	R6, R6, #4
;__Lib_System_G0xx.c, 89 :: 		
0x1596	0x42AE    CMP	R6, R5
;__Lib_System_G0xx.c, 90 :: 		
0x1598	0xD1FB    BNE	L_loopFZs
;__Lib_System_G0xx.c, 91 :: 		
0x159A	0x42AF    CMP	R7, R5
;__Lib_System_G0xx.c, 92 :: 		
0x159C	0xDD03    BLE	L_norep
;__Lib_System_G0xx.c, 93 :: 		
0x159E	0x463D    MOV	R5, R7
;__Lib_System_G0xx.c, 94 :: 		
0x15A0	0x6826    LDR	R6, [R4, #0]
;__Lib_System_G0xx.c, 95 :: 		
0x15A2	0x1D36    ADDS	R6, R6, #4
;__Lib_System_G0xx.c, 96 :: 		
0x15A4	0xE7F5    B	L_loopFZs
;__Lib_System_G0xx.c, 97 :: 		
L_norep:
;__Lib_System_G0xx.c, 99 :: 		
L_end___FillZeros:
0x15A6	0xB001    ADD	SP, SP, #4
0x15A8	0x4770    BX	LR
; end of ___FillZeros
_GPIO_Digital_Output:
;__Lib_GPIO_G0xx.c, 528 :: 		
; pinMask start address is: 4 (R1)
; port start address is: 0 (R0)
0x15AC	0xB500    PUSH	(R14)
; pinMask end address is: 4 (R1)
; port end address is: 0 (R0)
; port start address is: 0 (R0)
; pinMask start address is: 4 (R1)
;__Lib_GPIO_G0xx.c, 530 :: 		
0x15AE	0x4A02    LDR	R2, [PC, #8]
0x15B0	0xB289    UXTH	R1, R1
; pinMask end address is: 4 (R1)
; port end address is: 0 (R0)
0x15B2	0xF7FFFB7D  BL	_GPIO_Config+0
;__Lib_GPIO_G0xx.c, 531 :: 		
L_end_GPIO_Digital_Output:
0x15B6	0xBD00    POP	(R15)
0x15B8	0x00140008  	#524308
; end of _GPIO_Digital_Output
_GPIO_Config:
;__Lib_GPIO_G0xx.c, 231 :: 		
; port start address is: 0 (R0)
0x0CB0	0xB500    PUSH	(R14)
0x0CB2	0xB086    SUB	SP, SP, #24
0x0CB4	0x9101    STR	R1, [SP, #4]
0x0CB6	0x9202    STR	R2, [SP, #8]
; port end address is: 0 (R0)
; port start address is: 0 (R0)
;__Lib_GPIO_G0xx.c, 234 :: 		
;__Lib_GPIO_G0xx.c, 235 :: 		
;__Lib_GPIO_G0xx.c, 236 :: 		
;__Lib_GPIO_G0xx.c, 238 :: 		
;__Lib_GPIO_G0xx.c, 239 :: 		
;__Lib_GPIO_G0xx.c, 240 :: 		
;__Lib_GPIO_G0xx.c, 241 :: 		
;__Lib_GPIO_G0xx.c, 243 :: 		
;__Lib_GPIO_G0xx.c, 244 :: 		
;__Lib_GPIO_G0xx.c, 245 :: 		
;__Lib_GPIO_G0xx.c, 250 :: 		
0x0CB8	0x4BA4    LDR	R3, [PC, #656]
0x0CBA	0x4003    ANDS	R3, R0
0x0CBC	0x9304    STR	R3, [SP, #16]
;__Lib_GPIO_G0xx.c, 252 :: 		
; port end address is: 0 (R0)
0x0CBE	0xF7FFFBC7  BL	_GPIO_Clk_Enable+0
;__Lib_GPIO_G0xx.c, 255 :: 		
0x0CC2	0x9B01    LDR	R3, [SP, #4]
0x0CC4	0xB29B    UXTH	R3, R3
0x0CC6	0x2BFF    CMP	R3, #255
0x0CC8	0xD121    BNE	L_GPIO_Config22
;__Lib_GPIO_G0xx.c, 257 :: 		
0x0CCA	0x9B04    LDR	R3, [SP, #16]
0x0CCC	0x681C    LDR	R4, [R3, #0]
;__Lib_GPIO_G0xx.c, 258 :: 		
0x0CCE	0x4BA0    LDR	R3, [PC, #640]
0x0CD0	0x4620    MOV	R0, R4
0x0CD2	0x4018    ANDS	R0, R3
; tmp start address is: 0 (R0)
;__Lib_GPIO_G0xx.c, 260 :: 		
0x0CD4	0x9C02    LDR	R4, [SP, #8]
0x0CD6	0x4B9F    LDR	R3, [PC, #636]
0x0CD8	0x429C    CMP	R4, R3
0x0CDA	0xD112    BNE	L_GPIO_Config23
;__Lib_GPIO_G0xx.c, 263 :: 		
0x0CDC	0x4B9E    LDR	R3, [PC, #632]
0x0CDE	0x4604    MOV	R4, R0
0x0CE0	0x431C    ORRS	R4, R3
; tmp end address is: 0 (R0)
;__Lib_GPIO_G0xx.c, 264 :: 		
0x0CE2	0x9B04    LDR	R3, [SP, #16]
0x0CE4	0x601C    STR	R4, [R3, #0]
;__Lib_GPIO_G0xx.c, 267 :: 		
0x0CE6	0x9B04    LDR	R3, [SP, #16]
0x0CE8	0x1D1D    ADDS	R5, R3, #4
0x0CEA	0x682C    LDR	R4, [R5, #0]
0x0CEC	0x4B9B    LDR	R3, [PC, #620]
0x0CEE	0x4023    ANDS	R3, R4
0x0CF0	0x602B    STR	R3, [R5, #0]
;__Lib_GPIO_G0xx.c, 270 :: 		
0x0CF2	0x9B04    LDR	R3, [SP, #16]
0x0CF4	0x461D    MOV	R5, R3
0x0CF6	0x3508    ADDS	R5, #8
0x0CF8	0x682C    LDR	R4, [R5, #0]
0x0CFA	0x4B99    LDR	R3, [PC, #612]
0x0CFC	0x4323    ORRS	R3, R4
0x0CFE	0x602B    STR	R3, [R5, #0]
;__Lib_GPIO_G0xx.c, 271 :: 		
0x0D00	0xE121    B	L_end_GPIO_Config
;__Lib_GPIO_G0xx.c, 272 :: 		
L_GPIO_Config23:
;__Lib_GPIO_G0xx.c, 274 :: 		
; tmp start address is: 0 (R0)
0x0D02	0x9B02    LDR	R3, [SP, #8]
0x0D04	0x2B42    CMP	R3, #66
0x0D06	0xD102    BNE	L_GPIO_Config24
;__Lib_GPIO_G0xx.c, 277 :: 		
0x0D08	0x9B04    LDR	R3, [SP, #16]
0x0D0A	0x6018    STR	R0, [R3, #0]
; tmp end address is: 0 (R0)
;__Lib_GPIO_G0xx.c, 278 :: 		
0x0D0C	0xE11B    B	L_end_GPIO_Config
;__Lib_GPIO_G0xx.c, 279 :: 		
L_GPIO_Config24:
;__Lib_GPIO_G0xx.c, 280 :: 		
L_GPIO_Config22:
;__Lib_GPIO_G0xx.c, 283 :: 		
0x0D0E	0x9C01    LDR	R4, [SP, #4]
0x0D10	0xB2A4    UXTH	R4, R4
0x0D12	0x4B94    LDR	R3, [PC, #592]
0x0D14	0x429C    CMP	R4, R3
0x0D16	0xD121    BNE	L_GPIO_Config25
;__Lib_GPIO_G0xx.c, 285 :: 		
0x0D18	0x9B04    LDR	R3, [SP, #16]
0x0D1A	0x681C    LDR	R4, [R3, #0]
;__Lib_GPIO_G0xx.c, 286 :: 		
0x0D1C	0x4B90    LDR	R3, [PC, #576]
0x0D1E	0x4023    ANDS	R3, R4
; tmp start address is: 0 (R0)
0x0D20	0x4618    MOV	R0, R3
;__Lib_GPIO_G0xx.c, 288 :: 		
0x0D22	0x9C02    LDR	R4, [SP, #8]
0x0D24	0x4B8B    LDR	R3, [PC, #556]
0x0D26	0x429C    CMP	R4, R3
0x0D28	0xD112    BNE	L_GPIO_Config26
;__Lib_GPIO_G0xx.c, 291 :: 		
0x0D2A	0x4B8F    LDR	R3, [PC, #572]
0x0D2C	0x4604    MOV	R4, R0
0x0D2E	0x431C    ORRS	R4, R3
; tmp end address is: 0 (R0)
;__Lib_GPIO_G0xx.c, 292 :: 		
0x0D30	0x9B04    LDR	R3, [SP, #16]
0x0D32	0x601C    STR	R4, [R3, #0]
;__Lib_GPIO_G0xx.c, 295 :: 		
0x0D34	0x9B04    LDR	R3, [SP, #16]
0x0D36	0x1D1D    ADDS	R5, R3, #4
0x0D38	0x682C    LDR	R4, [R5, #0]
0x0D3A	0x4B8C    LDR	R3, [PC, #560]
0x0D3C	0x4023    ANDS	R3, R4
0x0D3E	0x602B    STR	R3, [R5, #0]
;__Lib_GPIO_G0xx.c, 298 :: 		
0x0D40	0x9B04    LDR	R3, [SP, #16]
0x0D42	0x461D    MOV	R5, R3
0x0D44	0x3508    ADDS	R5, #8
0x0D46	0x682C    LDR	R4, [R5, #0]
0x0D48	0x4B81    LDR	R3, [PC, #516]
0x0D4A	0x4323    ORRS	R3, R4
0x0D4C	0x602B    STR	R3, [R5, #0]
;__Lib_GPIO_G0xx.c, 299 :: 		
0x0D4E	0xE0FA    B	L_end_GPIO_Config
;__Lib_GPIO_G0xx.c, 300 :: 		
L_GPIO_Config26:
;__Lib_GPIO_G0xx.c, 302 :: 		
; tmp start address is: 0 (R0)
0x0D50	0x9B02    LDR	R3, [SP, #8]
0x0D52	0x2B42    CMP	R3, #66
0x0D54	0xD102    BNE	L_GPIO_Config27
;__Lib_GPIO_G0xx.c, 305 :: 		
0x0D56	0x9B04    LDR	R3, [SP, #16]
0x0D58	0x6018    STR	R0, [R3, #0]
; tmp end address is: 0 (R0)
;__Lib_GPIO_G0xx.c, 306 :: 		
0x0D5A	0xE0F4    B	L_end_GPIO_Config
;__Lib_GPIO_G0xx.c, 307 :: 		
L_GPIO_Config27:
;__Lib_GPIO_G0xx.c, 308 :: 		
L_GPIO_Config25:
;__Lib_GPIO_G0xx.c, 311 :: 		
0x0D5C	0x9C01    LDR	R4, [SP, #4]
0x0D5E	0xB2A4    UXTH	R4, R4
0x0D60	0x4B7F    LDR	R3, [PC, #508]
0x0D62	0x429C    CMP	R4, R3
0x0D64	0xD117    BNE	L_GPIO_Config28
;__Lib_GPIO_G0xx.c, 313 :: 		
0x0D66	0x9C02    LDR	R4, [SP, #8]
0x0D68	0x4B7A    LDR	R3, [PC, #488]
0x0D6A	0x429C    CMP	R4, R3
0x0D6C	0xD10C    BNE	L_GPIO_Config29
;__Lib_GPIO_G0xx.c, 316 :: 		
0x0D6E	0x4C80    LDR	R4, [PC, #512]
0x0D70	0x9B04    LDR	R3, [SP, #16]
0x0D72	0x601C    STR	R4, [R3, #0]
;__Lib_GPIO_G0xx.c, 319 :: 		
0x0D74	0x9B04    LDR	R3, [SP, #16]
0x0D76	0x1D1C    ADDS	R4, R3, #4
0x0D78	0x2300    MOVS	R3, #0
0x0D7A	0x6023    STR	R3, [R4, #0]
;__Lib_GPIO_G0xx.c, 322 :: 		
0x0D7C	0x9B04    LDR	R3, [SP, #16]
0x0D7E	0x461C    MOV	R4, R3
0x0D80	0x3408    ADDS	R4, #8
0x0D82	0x4B7C    LDR	R3, [PC, #496]
0x0D84	0x6023    STR	R3, [R4, #0]
;__Lib_GPIO_G0xx.c, 323 :: 		
0x0D86	0xE0DE    B	L_end_GPIO_Config
;__Lib_GPIO_G0xx.c, 324 :: 		
L_GPIO_Config29:
;__Lib_GPIO_G0xx.c, 326 :: 		
0x0D88	0x9B02    LDR	R3, [SP, #8]
0x0D8A	0x2B42    CMP	R3, #66
0x0D8C	0xD103    BNE	L_GPIO_Config30
;__Lib_GPIO_G0xx.c, 329 :: 		
0x0D8E	0x2400    MOVS	R4, #0
0x0D90	0x9B04    LDR	R3, [SP, #16]
0x0D92	0x601C    STR	R4, [R3, #0]
;__Lib_GPIO_G0xx.c, 330 :: 		
0x0D94	0xE0D7    B	L_end_GPIO_Config
;__Lib_GPIO_G0xx.c, 331 :: 		
L_GPIO_Config30:
;__Lib_GPIO_G0xx.c, 332 :: 		
L_GPIO_Config28:
;__Lib_GPIO_G0xx.c, 341 :: 		
0x0D96	0x9C02    LDR	R4, [SP, #8]
0x0D98	0x2301    MOVS	R3, #1
0x0D9A	0x4023    ANDS	R3, R4
0x0D9C	0x2B00    CMP	R3, #0
0x0D9E	0xD002    BEQ	L_GPIO_Config31
;__Lib_GPIO_G0xx.c, 343 :: 		
; mode start address is: 0 (R0)
0x0DA0	0x2003    MOVS	R0, #3
;__Lib_GPIO_G0xx.c, 344 :: 		
0x0DA2	0x4607    MOV	R7, R0
; mode end address is: 0 (R0)
0x0DA4	0xE00F    B	L_GPIO_Config32
L_GPIO_Config31:
;__Lib_GPIO_G0xx.c, 346 :: 		
0x0DA6	0x9C02    LDR	R4, [SP, #8]
0x0DA8	0x2308    MOVS	R3, #8
0x0DAA	0x4023    ANDS	R3, R4
0x0DAC	0x2B00    CMP	R3, #0
0x0DAE	0xD001    BEQ	L_GPIO_Config33
;__Lib_GPIO_G0xx.c, 348 :: 		
; mode start address is: 0 (R0)
0x0DB0	0x2002    MOVS	R0, #2
;__Lib_GPIO_G0xx.c, 349 :: 		
; mode end address is: 0 (R0)
0x0DB2	0xE007    B	L_GPIO_Config34
L_GPIO_Config33:
;__Lib_GPIO_G0xx.c, 351 :: 		
0x0DB4	0x9C02    LDR	R4, [SP, #8]
0x0DB6	0x2304    MOVS	R3, #4
0x0DB8	0x4023    ANDS	R3, R4
0x0DBA	0x2B00    CMP	R3, #0
0x0DBC	0xD001    BEQ	L_GPIO_Config35
;__Lib_GPIO_G0xx.c, 353 :: 		
; mode start address is: 0 (R0)
0x0DBE	0x2001    MOVS	R0, #1
;__Lib_GPIO_G0xx.c, 354 :: 		
; mode end address is: 0 (R0)
0x0DC0	0xE000    B	L_GPIO_Config36
L_GPIO_Config35:
;__Lib_GPIO_G0xx.c, 358 :: 		
; mode start address is: 0 (R0)
0x0DC2	0x2000    MOVS	R0, #0
; mode end address is: 0 (R0)
;__Lib_GPIO_G0xx.c, 359 :: 		
L_GPIO_Config36:
; mode start address is: 0 (R0)
; mode end address is: 0 (R0)
L_GPIO_Config34:
; mode start address is: 0 (R0)
0x0DC4	0x4607    MOV	R7, R0
; mode end address is: 0 (R0)
L_GPIO_Config32:
;__Lib_GPIO_G0xx.c, 367 :: 		
; mode start address is: 28 (R7)
0x0DC6	0x9C02    LDR	R4, [SP, #8]
0x0DC8	0x4B6B    LDR	R3, [PC, #428]
0x0DCA	0x4023    ANDS	R3, R4
0x0DCC	0x2B00    CMP	R3, #0
0x0DCE	0xD001    BEQ	L_GPIO_Config37
;__Lib_GPIO_G0xx.c, 369 :: 		
; speed start address is: 8 (R2)
0x0DD0	0x2203    MOVS	R2, #3
;__Lib_GPIO_G0xx.c, 370 :: 		
; speed end address is: 8 (R2)
0x0DD2	0xE007    B	L_GPIO_Config38
L_GPIO_Config37:
;__Lib_GPIO_G0xx.c, 372 :: 		
0x0DD4	0x9C02    LDR	R4, [SP, #8]
0x0DD6	0x4B69    LDR	R3, [PC, #420]
0x0DD8	0x4023    ANDS	R3, R4
0x0DDA	0x2B00    CMP	R3, #0
0x0DDC	0xD001    BEQ	L_GPIO_Config39
;__Lib_GPIO_G0xx.c, 374 :: 		
; speed start address is: 8 (R2)
0x0DDE	0x2201    MOVS	R2, #1
;__Lib_GPIO_G0xx.c, 375 :: 		
; speed end address is: 8 (R2)
0x0DE0	0xE000    B	L_GPIO_Config40
L_GPIO_Config39:
;__Lib_GPIO_G0xx.c, 379 :: 		
; speed start address is: 8 (R2)
0x0DE2	0x2200    MOVS	R2, #0
; speed end address is: 8 (R2)
;__Lib_GPIO_G0xx.c, 380 :: 		
L_GPIO_Config40:
; speed start address is: 8 (R2)
; speed end address is: 8 (R2)
L_GPIO_Config38:
;__Lib_GPIO_G0xx.c, 404 :: 		
; speed start address is: 8 (R2)
0x0DE4	0x9C02    LDR	R4, [SP, #8]
0x0DE6	0x2320    MOVS	R3, #32
0x0DE8	0x4023    ANDS	R3, R4
0x0DEA	0x2B00    CMP	R3, #0
0x0DEC	0xD001    BEQ	L_GPIO_Config41
;__Lib_GPIO_G0xx.c, 406 :: 		
; otype start address is: 4 (R1)
0x0DEE	0x2101    MOVS	R1, #1
;__Lib_GPIO_G0xx.c, 407 :: 		
; otype end address is: 4 (R1)
0x0DF0	0xE000    B	L_GPIO_Config42
L_GPIO_Config41:
;__Lib_GPIO_G0xx.c, 411 :: 		
; otype start address is: 4 (R1)
0x0DF2	0x2100    MOVS	R1, #0
; otype end address is: 4 (R1)
;__Lib_GPIO_G0xx.c, 412 :: 		
L_GPIO_Config42:
;__Lib_GPIO_G0xx.c, 420 :: 		
; otype start address is: 4 (R1)
0x0DF4	0x9C02    LDR	R4, [SP, #8]
0x0DF6	0x23FF    MOVS	R3, #255
0x0DF8	0x3301    ADDS	R3, #1
0x0DFA	0x4023    ANDS	R3, R4
0x0DFC	0x2B00    CMP	R3, #0
0x0DFE	0xD002    BEQ	L_GPIO_Config43
;__Lib_GPIO_G0xx.c, 422 :: 		
; pull start address is: 16 (R4)
0x0E00	0x2402    MOVS	R4, #2
;__Lib_GPIO_G0xx.c, 423 :: 		
0x0E02	0x4620    MOV	R0, R4
; pull end address is: 16 (R4)
0x0E04	0xE008    B	L_GPIO_Config44
L_GPIO_Config43:
;__Lib_GPIO_G0xx.c, 425 :: 		
0x0E06	0x9C02    LDR	R4, [SP, #8]
0x0E08	0x2380    MOVS	R3, #128
0x0E0A	0x4023    ANDS	R3, R4
0x0E0C	0x2B00    CMP	R3, #0
0x0E0E	0xD001    BEQ	L_GPIO_Config45
;__Lib_GPIO_G0xx.c, 427 :: 		
; pull start address is: 16 (R4)
0x0E10	0x2401    MOVS	R4, #1
;__Lib_GPIO_G0xx.c, 428 :: 		
; pull end address is: 16 (R4)
0x0E12	0xE000    B	L_GPIO_Config46
L_GPIO_Config45:
;__Lib_GPIO_G0xx.c, 431 :: 		
; pull start address is: 16 (R4)
0x0E14	0x2400    MOVS	R4, #0
; pull end address is: 16 (R4)
L_GPIO_Config46:
; pull start address is: 16 (R4)
0x0E16	0x4620    MOV	R0, R4
; pull end address is: 16 (R4)
L_GPIO_Config44:
;__Lib_GPIO_G0xx.c, 434 :: 		
; pull start address is: 0 (R0)
0x0E18	0x2300    MOVS	R3, #0
0x0E1A	0x9303    STR	R3, [SP, #12]
L_GPIO_Config47:
; pull start address is: 0 (R0)
; pull end address is: 0 (R0)
; otype start address is: 4 (R1)
; otype end address is: 4 (R1)
; speed start address is: 8 (R2)
; speed end address is: 8 (R2)
; mode start address is: 28 (R7)
; mode end address is: 28 (R7)
0x0E1C	0x9B03    LDR	R3, [SP, #12]
0x0E1E	0x2B10    CMP	R3, #16
0x0E20	0xD300    BCC	#0
0x0E22	0xE090    B	L_GPIO_Config48
; pull end address is: 0 (R0)
; otype end address is: 4 (R1)
; speed end address is: 8 (R2)
; mode end address is: 28 (R7)
;__Lib_GPIO_G0xx.c, 436 :: 		
; mode start address is: 28 (R7)
; speed start address is: 8 (R2)
; otype start address is: 4 (R1)
; pull start address is: 0 (R0)
0x0E24	0x9D03    LDR	R5, [SP, #12]
0x0E26	0x2301    MOVS	R3, #1
0x0E28	0x461C    MOV	R4, R3
0x0E2A	0x40AC    LSLS	R4, R5
;__Lib_GPIO_G0xx.c, 439 :: 		
0x0E2C	0x9B01    LDR	R3, [SP, #4]
0x0E2E	0xB29B    UXTH	R3, R3
0x0E30	0x4023    ANDS	R3, R4
;__Lib_GPIO_G0xx.c, 440 :: 		
0x0E32	0x42A3    CMP	R3, R4
0x0E34	0xD000    BEQ	#0
0x0E36	0xE082    B	L_GPIO_Config50
;__Lib_GPIO_G0xx.c, 443 :: 		
0x0E38	0x9B03    LDR	R3, [SP, #12]
0x0E3A	0x005D    LSLS	R5, R3, #1
0x0E3C	0x2403    MOVS	R4, #3
0x0E3E	0x4623    MOV	R3, R4
0x0E40	0x40AB    LSLS	R3, R5
0x0E42	0x43DC    MVN	R4, R3
0x0E44	0x9B04    LDR	R3, [SP, #16]
0x0E46	0x681B    LDR	R3, [R3, #0]
0x0E48	0x401C    ANDS	R4, R3
0x0E4A	0x9B04    LDR	R3, [SP, #16]
0x0E4C	0x601C    STR	R4, [R3, #0]
;__Lib_GPIO_G0xx.c, 445 :: 		
0x0E4E	0x9B03    LDR	R3, [SP, #12]
0x0E50	0x005B    LSLS	R3, R3, #1
0x0E52	0x463C    MOV	R4, R7
0x0E54	0x409C    LSLS	R4, R3
0x0E56	0x9B04    LDR	R3, [SP, #16]
0x0E58	0x681B    LDR	R3, [R3, #0]
0x0E5A	0x431C    ORRS	R4, R3
0x0E5C	0x9B04    LDR	R3, [SP, #16]
0x0E5E	0x601C    STR	R4, [R3, #0]
;__Lib_GPIO_G0xx.c, 449 :: 		
0x0E60	0x9C02    LDR	R4, [SP, #8]
0x0E62	0x230C    MOVS	R3, #12
0x0E64	0x4023    ANDS	R3, R4
0x0E66	0x2B00    CMP	R3, #0
0x0E68	0xD027    BEQ	L_GPIO_Config51
;__Lib_GPIO_G0xx.c, 452 :: 		
0x0E6A	0x9B04    LDR	R3, [SP, #16]
0x0E6C	0x461E    MOV	R6, R3
0x0E6E	0x3608    ADDS	R6, #8
0x0E70	0x9B03    LDR	R3, [SP, #12]
0x0E72	0x005D    LSLS	R5, R3, #1
0x0E74	0x2403    MOVS	R4, #3
0x0E76	0x4623    MOV	R3, R4
0x0E78	0x40AB    LSLS	R3, R5
0x0E7A	0x43DC    MVN	R4, R3
0x0E7C	0x6833    LDR	R3, [R6, #0]
0x0E7E	0x4023    ANDS	R3, R4
0x0E80	0x6033    STR	R3, [R6, #0]
;__Lib_GPIO_G0xx.c, 454 :: 		
0x0E82	0x9B04    LDR	R3, [SP, #16]
0x0E84	0x461D    MOV	R5, R3
0x0E86	0x3508    ADDS	R5, #8
0x0E88	0x9B03    LDR	R3, [SP, #12]
0x0E8A	0x005B    LSLS	R3, R3, #1
0x0E8C	0x4614    MOV	R4, R2
0x0E8E	0x409C    LSLS	R4, R3
0x0E90	0x682B    LDR	R3, [R5, #0]
0x0E92	0x4323    ORRS	R3, R4
0x0E94	0x602B    STR	R3, [R5, #0]
;__Lib_GPIO_G0xx.c, 458 :: 		
0x0E96	0x9B04    LDR	R3, [SP, #16]
0x0E98	0x1D1E    ADDS	R6, R3, #4
0x0E9A	0x9D03    LDR	R5, [SP, #12]
0x0E9C	0x2401    MOVS	R4, #1
0x0E9E	0x4623    MOV	R3, R4
0x0EA0	0x40AB    LSLS	R3, R5
0x0EA2	0x43DC    MVN	R4, R3
0x0EA4	0x6833    LDR	R3, [R6, #0]
0x0EA6	0x4023    ANDS	R3, R4
0x0EA8	0x6033    STR	R3, [R6, #0]
;__Lib_GPIO_G0xx.c, 460 :: 		
0x0EAA	0x9B04    LDR	R3, [SP, #16]
0x0EAC	0x1D1D    ADDS	R5, R3, #4
0x0EAE	0x9B03    LDR	R3, [SP, #12]
0x0EB0	0x460C    MOV	R4, R1
0x0EB2	0x409C    LSLS	R4, R3
0x0EB4	0x682B    LDR	R3, [R5, #0]
0x0EB6	0x4323    ORRS	R3, R4
0x0EB8	0x602B    STR	R3, [R5, #0]
;__Lib_GPIO_G0xx.c, 461 :: 		
L_GPIO_Config51:
;__Lib_GPIO_G0xx.c, 466 :: 		
0x0EBA	0x9B04    LDR	R3, [SP, #16]
0x0EBC	0x461E    MOV	R6, R3
0x0EBE	0x360C    ADDS	R6, #12
0x0EC0	0x9B03    LDR	R3, [SP, #12]
0x0EC2	0x005D    LSLS	R5, R3, #1
0x0EC4	0x2403    MOVS	R4, #3
0x0EC6	0x4623    MOV	R3, R4
0x0EC8	0x40AB    LSLS	R3, R5
0x0ECA	0x43DC    MVN	R4, R3
0x0ECC	0x6833    LDR	R3, [R6, #0]
0x0ECE	0x4023    ANDS	R3, R4
0x0ED0	0x6033    STR	R3, [R6, #0]
;__Lib_GPIO_G0xx.c, 468 :: 		
0x0ED2	0x9B04    LDR	R3, [SP, #16]
0x0ED4	0x461D    MOV	R5, R3
0x0ED6	0x350C    ADDS	R5, #12
0x0ED8	0x9B03    LDR	R3, [SP, #12]
0x0EDA	0x005B    LSLS	R3, R3, #1
0x0EDC	0x4604    MOV	R4, R0
0x0EDE	0x409C    LSLS	R4, R3
0x0EE0	0x682B    LDR	R3, [R5, #0]
0x0EE2	0x4323    ORRS	R3, R4
0x0EE4	0x602B    STR	R3, [R5, #0]
;__Lib_GPIO_G0xx.c, 480 :: 		
0x0EE6	0x9C02    LDR	R4, [SP, #8]
0x0EE8	0x2308    MOVS	R3, #8
0x0EEA	0x4023    ANDS	R3, R4
0x0EEC	0x2B00    CMP	R3, #0
0x0EEE	0xD026    BEQ	L_GPIO_Config52
;__Lib_GPIO_G0xx.c, 482 :: 		
0x0EF0	0x9C02    LDR	R4, [SP, #8]
0x0EF2	0x4B23    LDR	R3, [PC, #140]
0x0EF4	0x4023    ANDS	R3, R4
0x0EF6	0x0D1B    LSRS	R3, R3, #20
0x0EF8	0x9300    STR	R3, [SP, #0]
;__Lib_GPIO_G0xx.c, 485 :: 		
0x0EFA	0x9B03    LDR	R3, [SP, #12]
0x0EFC	0x2B07    CMP	R3, #7
0x0EFE	0xD906    BLS	L_GPIO_Config53
;__Lib_GPIO_G0xx.c, 487 :: 		
0x0F00	0x9B04    LDR	R3, [SP, #16]
0x0F02	0x3324    ADDS	R3, #36
0x0F04	0x9305    STR	R3, [SP, #20]
;__Lib_GPIO_G0xx.c, 488 :: 		
0x0F06	0x9B03    LDR	R3, [SP, #12]
0x0F08	0x461E    MOV	R6, R3
0x0F0A	0x3E08    SUBS	R6, #8
; pos start address is: 24 (R6)
;__Lib_GPIO_G0xx.c, 489 :: 		
; pos end address is: 24 (R6)
0x0F0C	0xE003    B	L_GPIO_Config54
L_GPIO_Config53:
;__Lib_GPIO_G0xx.c, 493 :: 		
0x0F0E	0x9B04    LDR	R3, [SP, #16]
0x0F10	0x3320    ADDS	R3, #32
0x0F12	0x9305    STR	R3, [SP, #20]
;__Lib_GPIO_G0xx.c, 494 :: 		
; pos start address is: 24 (R6)
0x0F14	0x9E03    LDR	R6, [SP, #12]
; pos end address is: 24 (R6)
;__Lib_GPIO_G0xx.c, 495 :: 		
L_GPIO_Config54:
;__Lib_GPIO_G0xx.c, 498 :: 		
; pos start address is: 24 (R6)
0x0F16	0x00B5    LSLS	R5, R6, #2
0x0F18	0x240F    MOVS	R4, #15
0x0F1A	0x4623    MOV	R3, R4
0x0F1C	0x40AB    LSLS	R3, R5
0x0F1E	0x43DC    MVN	R4, R3
0x0F20	0x9B05    LDR	R3, [SP, #20]
0x0F22	0x681B    LDR	R3, [R3, #0]
0x0F24	0x401C    ANDS	R4, R3
0x0F26	0x9B05    LDR	R3, [SP, #20]
0x0F28	0x601C    STR	R4, [R3, #0]
;__Lib_GPIO_G0xx.c, 500 :: 		
0x0F2A	0x9D00    LDR	R5, [SP, #0]
0x0F2C	0xB2ED    UXTB	R5, R5
0x0F2E	0x00B3    LSLS	R3, R6, #2
; pos end address is: 24 (R6)
0x0F30	0x462C    MOV	R4, R5
0x0F32	0x409C    LSLS	R4, R3
0x0F34	0x9B05    LDR	R3, [SP, #20]
0x0F36	0x681B    LDR	R3, [R3, #0]
0x0F38	0x431C    ORRS	R4, R3
0x0F3A	0x9B05    LDR	R3, [SP, #20]
0x0F3C	0x601C    STR	R4, [R3, #0]
;__Lib_GPIO_G0xx.c, 501 :: 		
L_GPIO_Config52:
;__Lib_GPIO_G0xx.c, 502 :: 		
L_GPIO_Config50:
;__Lib_GPIO_G0xx.c, 434 :: 		
0x0F3E	0x9B03    LDR	R3, [SP, #12]
0x0F40	0x3301    ADDS	R3, #1
0x0F42	0x9303    STR	R3, [SP, #12]
;__Lib_GPIO_G0xx.c, 503 :: 		
; pull end address is: 0 (R0)
; otype end address is: 4 (R1)
; speed end address is: 8 (R2)
; mode end address is: 28 (R7)
0x0F44	0xE76A    B	L_GPIO_Config47
L_GPIO_Config48:
;__Lib_GPIO_G0xx.c, 504 :: 		
L_end_GPIO_Config:
0x0F46	0xB006    ADD	SP, SP, #24
0x0F48	0xBD00    POP	(R15)
0x0F4A	0xBF00    NOP
0x0F4C	0xFC00FFFF  	#-1024
0x0F50	0x0000FFFF  	#-65536
0x0F54	0x00140008  	#524308
0x0F58	0x55550000  	#21845
0x0F5C	0xFF00FFFF  	#-256
0x0F60	0xFFFF0000  	#65535
0x0F64	0xFF000000  	#65280
0x0F68	0x00005555  	#1431633920
0x0F6C	0x00FFFFFF  	#-65281
0x0F70	0x55555555  	#1431655765
0x0F74	0xFFFFFFFF  	#-1
0x0F78	0x08000008  	#526336
0x0F7C	0x04000000  	#1024
0x0F80	0x000000F0  	#15728640
; end of _GPIO_Config
_GPIO_Clk_Enable:
;__Lib_GPIO_G0xx.c, 136 :: 		
; port start address is: 0 (R0)
0x0450	0xB500    PUSH	(R14)
; port end address is: 0 (R0)
; port start address is: 0 (R0)
;__Lib_GPIO_G0xx.c, 143 :: 		
0x0452	0x4913    LDR	R1, [PC, #76]
0x0454	0x4001    ANDS	R1, R0
; port end address is: 0 (R0)
; portBase start address is: 0 (R0)
0x0456	0x4608    MOV	R0, R1
;__Lib_GPIO_G0xx.c, 145 :: 		
; pos start address is: 8 (R2)
0x0458	0x2200    MOVS	R2, #0
;__Lib_GPIO_G0xx.c, 146 :: 		
0x045A	0xE009    B	L_GPIO_Clk_Enable8
; portBase end address is: 0 (R0)
; pos end address is: 8 (R2)
;__Lib_GPIO_G0xx.c, 148 :: 		
L_GPIO_Clk_Enable10:
;__Lib_GPIO_G0xx.c, 150 :: 		
; pos start address is: 0 (R0)
0x045C	0x2001    MOVS	R0, #1
;__Lib_GPIO_G0xx.c, 151 :: 		
; pos end address is: 0 (R0)
0x045E	0xE017    B	L_GPIO_Clk_Enable9
;__Lib_GPIO_G0xx.c, 153 :: 		
L_GPIO_Clk_Enable11:
;__Lib_GPIO_G0xx.c, 155 :: 		
; pos start address is: 0 (R0)
0x0460	0x2002    MOVS	R0, #2
;__Lib_GPIO_G0xx.c, 156 :: 		
; pos end address is: 0 (R0)
0x0462	0xE015    B	L_GPIO_Clk_Enable9
;__Lib_GPIO_G0xx.c, 158 :: 		
L_GPIO_Clk_Enable12:
;__Lib_GPIO_G0xx.c, 160 :: 		
; pos start address is: 0 (R0)
0x0464	0x2004    MOVS	R0, #4
;__Lib_GPIO_G0xx.c, 161 :: 		
; pos end address is: 0 (R0)
0x0466	0xE013    B	L_GPIO_Clk_Enable9
;__Lib_GPIO_G0xx.c, 163 :: 		
L_GPIO_Clk_Enable13:
;__Lib_GPIO_G0xx.c, 165 :: 		
; pos start address is: 0 (R0)
0x0468	0x2008    MOVS	R0, #8
;__Lib_GPIO_G0xx.c, 166 :: 		
; pos end address is: 0 (R0)
0x046A	0xE011    B	L_GPIO_Clk_Enable9
;__Lib_GPIO_G0xx.c, 168 :: 		
L_GPIO_Clk_Enable14:
;__Lib_GPIO_G0xx.c, 170 :: 		
; pos start address is: 0 (R0)
0x046C	0x2020    MOVS	R0, #32
;__Lib_GPIO_G0xx.c, 171 :: 		
; pos end address is: 0 (R0)
0x046E	0xE00F    B	L_GPIO_Clk_Enable9
;__Lib_GPIO_G0xx.c, 173 :: 		
L_GPIO_Clk_Enable8:
; pos start address is: 8 (R2)
; portBase start address is: 0 (R0)
0x0470	0x490C    LDR	R1, [PC, #48]
0x0472	0x4288    CMP	R0, R1
0x0474	0xD0F2    BEQ	L_GPIO_Clk_Enable10
0x0476	0x490C    LDR	R1, [PC, #48]
0x0478	0x4288    CMP	R0, R1
0x047A	0xD0F1    BEQ	L_GPIO_Clk_Enable11
0x047C	0x490B    LDR	R1, [PC, #44]
0x047E	0x4288    CMP	R0, R1
0x0480	0xD0F0    BEQ	L_GPIO_Clk_Enable12
0x0482	0x490B    LDR	R1, [PC, #44]
0x0484	0x4288    CMP	R0, R1
0x0486	0xD0EF    BEQ	L_GPIO_Clk_Enable13
0x0488	0x490A    LDR	R1, [PC, #40]
0x048A	0x4288    CMP	R0, R1
0x048C	0xD0EE    BEQ	L_GPIO_Clk_Enable14
; portBase end address is: 0 (R0)
; pos end address is: 8 (R2)
0x048E	0x4610    MOV	R0, R2
L_GPIO_Clk_Enable9:
;__Lib_GPIO_G0xx.c, 176 :: 		
; pos start address is: 0 (R0)
0x0490	0x4909    LDR	R1, [PC, #36]
0x0492	0x6809    LDR	R1, [R1, #0]
0x0494	0x460A    MOV	R2, R1
0x0496	0x4302    ORRS	R2, R0
; pos end address is: 0 (R0)
0x0498	0x4907    LDR	R1, [PC, #28]
0x049A	0x600A    STR	R2, [R1, #0]
;__Lib_GPIO_G0xx.c, 177 :: 		
L_end_GPIO_Clk_Enable:
0x049C	0xBD00    POP	(R15)
0x049E	0xBF00    NOP
0x04A0	0xFC00FFFF  	#-1024
0x04A4	0x00005000  	#1342177280
0x04A8	0x04005000  	#1342178304
0x04AC	0x08005000  	#1342179328
0x04B0	0x0C005000  	#1342180352
0x04B4	0x14005000  	#1342182400
0x04B8	0x10344002  	RCC_IOPENR+0
; end of _GPIO_Clk_Enable
_GPIO_Digital_Input:
;__Lib_GPIO_G0xx.c, 538 :: 		
; pinMask start address is: 4 (R1)
; port start address is: 0 (R0)
0x14B4	0xB500    PUSH	(R14)
; pinMask end address is: 4 (R1)
; port end address is: 0 (R0)
; port start address is: 0 (R0)
; pinMask start address is: 4 (R1)
;__Lib_GPIO_G0xx.c, 540 :: 		
0x14B6	0x2242    MOVS	R2, #66
0x14B8	0xB289    UXTH	R1, R1
; pinMask end address is: 4 (R1)
; port end address is: 0 (R0)
0x14BA	0xF7FFFBF9  BL	_GPIO_Config+0
;__Lib_GPIO_G0xx.c, 541 :: 		
L_end_GPIO_Digital_Input:
0x14BE	0xBD00    POP	(R15)
; end of _GPIO_Digital_Input
_InitTimer2:
;DriverRF4463PROMain.c, 75 :: 		void InitTimer2(){
0x14C0	0xB500    PUSH	(R14)
;DriverRF4463PROMain.c, 87 :: 		RCC_APBENR1bits.TIM2EN = 1;
0x14C2	0x4A0F    LDR	R2, [PC, #60]
0x14C4	0x6810    LDR	R0, [R2, #0]
0x14C6	0x2101    MOVS	R1, #1
0x14C8	0x4308    ORRS	R0, R1
0x14CA	0x6010    STR	R0, [R2, #0]
;DriverRF4463PROMain.c, 88 :: 		TIM2_CR1.CEN = 0;
0x14CC	0x4A0D    LDR	R2, [PC, #52]
0x14CE	0x6810    LDR	R0, [R2, #0]
0x14D0	0x2101    MOVS	R1, #1
0x14D2	0x4388    BICS	R0, R1
0x14D4	0x6010    STR	R0, [R2, #0]
;DriverRF4463PROMain.c, 89 :: 		TIM2_PSC = 249;
0x14D6	0x21F9    MOVS	R1, #249
0x14D8	0x480B    LDR	R0, [PC, #44]
0x14DA	0x6001    STR	R1, [R0, #0]
;DriverRF4463PROMain.c, 90 :: 		TIM2_ARR = 63999;
0x14DC	0x490B    LDR	R1, [PC, #44]
0x14DE	0x480C    LDR	R0, [PC, #48]
0x14E0	0x6001    STR	R1, [R0, #0]
;DriverRF4463PROMain.c, 91 :: 		NVIC_IntEnable( IVT_INT_TIM2 );
0x14E2	0x201F    MOVS	R0, #31
0x14E4	0xF7FFFB82  BL	_NVIC_IntEnable+0
;DriverRF4463PROMain.c, 92 :: 		TIM2_DIER.UIE = 1;
0x14E8	0x4A0A    LDR	R2, [PC, #40]
0x14EA	0x6810    LDR	R0, [R2, #0]
0x14EC	0x2101    MOVS	R1, #1
0x14EE	0x4308    ORRS	R0, R1
0x14F0	0x6010    STR	R0, [R2, #0]
;DriverRF4463PROMain.c, 93 :: 		TIM2_CR1.CEN = 1;
0x14F2	0x4A04    LDR	R2, [PC, #16]
0x14F4	0x6810    LDR	R0, [R2, #0]
0x14F6	0x2101    MOVS	R1, #1
0x14F8	0x4308    ORRS	R0, R1
0x14FA	0x6010    STR	R0, [R2, #0]
;DriverRF4463PROMain.c, 95 :: 		}
L_end_InitTimer2:
0x14FC	0xBD00    POP	(R15)
0x14FE	0xBF00    NOP
0x1500	0x103C4002  	RCC_APBENR1bits+0
0x1504	0x00004000  	TIM2_CR1+0
0x1508	0x00284000  	TIM2_PSC+0
0x150C	0xF9FF0000  	#63999
0x1510	0x002C4000  	TIM2_ARR+0
0x1514	0x000C4000  	TIM2_DIER+0
; end of _InitTimer2
_NVIC_IntEnable:
;__Lib_System_G0xx.c, 157 :: 		
; ivt start address is: 0 (R0)
0x0BEC	0xB500    PUSH	(R14)
; ivt end address is: 0 (R0)
; ivt start address is: 0 (R0)
;__Lib_System_G0xx.c, 170 :: 		
0x0BEE	0x280F    CMP	R0, #15
0x0BF0	0xD106    BNE	L_NVIC_IntEnable6
; ivt end address is: 0 (R0)
;__Lib_System_G0xx.c, 176 :: 		
0x0BF2	0x490B    LDR	R1, [PC, #44]
0x0BF4	0x680A    LDR	R2, [R1, #0]
0x0BF6	0x2102    MOVS	R1, #2
0x0BF8	0x430A    ORRS	R2, R1
0x0BFA	0x4909    LDR	R1, [PC, #36]
0x0BFC	0x600A    STR	R2, [R1, #0]
;__Lib_System_G0xx.c, 177 :: 		
0x0BFE	0xE00D    B	L_NVIC_IntEnable7
L_NVIC_IntEnable6:
;__Lib_System_G0xx.c, 178 :: 		
; ivt start address is: 0 (R0)
0x0C00	0x2810    CMP	R0, #16
0x0C02	0xD30B    BCC	L_NVIC_IntEnable8
;__Lib_System_G0xx.c, 183 :: 		
0x0C04	0x4603    MOV	R3, R0
0x0C06	0x3B10    SUBS	R3, #16
; ivt end address is: 0 (R0)
0x0C08	0x0959    LSRS	R1, R3, #5
0x0C0A	0x008A    LSLS	R2, R1, #2
0x0C0C	0x4905    LDR	R1, [PC, #20]
0x0C0E	0x188C    ADDS	R4, R1, R2
;__Lib_System_G0xx.c, 184 :: 		
0x0C10	0x211F    MOVS	R1, #31
0x0C12	0x400B    ANDS	R3, R1
0x0C14	0x2201    MOVS	R2, #1
0x0C16	0x4611    MOV	R1, R2
0x0C18	0x4099    LSLS	R1, R3
0x0C1A	0x6021    STR	R1, [R4, #0]
;__Lib_System_G0xx.c, 185 :: 		
L_NVIC_IntEnable8:
L_NVIC_IntEnable7:
;__Lib_System_G0xx.c, 186 :: 		
L_end_NVIC_IntEnable:
0x0C1C	0xBD00    POP	(R15)
0x0C1E	0xBF00    NOP
0x0C20	0xE010E000  	STK_CSR+0
0x0C24	0xE100E000  	NVIC_ISER+0
; end of _NVIC_IntEnable
_vUSARTConfigUSART1:
;uarthandler.c, 428 :: 		void vUSARTConfigUSART1 ( unsigned long ulBaudRate ) {
0x1518	0xB500    PUSH	(R14)
;uarthandler.c, 441 :: 		UART1_Init_Advanced( ulBaudRate, _UART_8_BIT_DATA, _UART_NOPARITY, _UART_ONE_STOPBIT, &_GPIO_MODULE_USART1_PA9_10 );
0x151A	0x480F    LDR	R0, [PC, #60]
0x151C	0xB401    PUSH	(R0)
0x151E	0x2300    MOVS	R3, #0
0x1520	0x2200    MOVS	R2, #0
0x1522	0x2100    MOVS	R1, #0
0x1524	0x9802    LDR	R0, [SP, #8]
0x1526	0xF7FFFBB3  BL	_UART1_Init_Advanced+0
0x152A	0xB001    ADD	SP, SP, #4
;uarthandler.c, 442 :: 		USART1_CR1bits.UE = 0;
0x152C	0x4A0B    LDR	R2, [PC, #44]
0x152E	0x6810    LDR	R0, [R2, #0]
0x1530	0x2101    MOVS	R1, #1
0x1532	0x4388    BICS	R0, R1
0x1534	0x6010    STR	R0, [R2, #0]
;uarthandler.c, 444 :: 		ulClk = Clock_MHz() * 1000000;         // paso extra para verificacion en depuracion
0x1536	0x490A    LDR	R1, [PC, #40]
0x1538	0x480A    LDR	R0, [PC, #40]
0x153A	0x6001    STR	R1, [R0, #0]
;uarthandler.c, 446 :: 		USART1_BRR = ( ulClk ) / ulBaudRate;
0x153C	0x9A01    LDR	R2, [SP, #4]
0x153E	0x4809    LDR	R0, [PC, #36]
0x1540	0x6800    LDR	R0, [R0, #0]
0x1542	0xF7FEFDC3  BL	__Div_32x32_U+0
0x1546	0x4908    LDR	R1, [PC, #32]
0x1548	0x6008    STR	R0, [R1, #0]
;uarthandler.c, 448 :: 		USART1_CR1bits.UE = 1;
0x154A	0x4A04    LDR	R2, [PC, #16]
0x154C	0x6810    LDR	R0, [R2, #0]
0x154E	0x2101    MOVS	R1, #1
0x1550	0x4308    ORRS	R0, R1
0x1552	0x6010    STR	R0, [R2, #0]
;uarthandler.c, 450 :: 		}
L_end_vUSARTConfigUSART1:
0x1554	0xBD00    POP	(R15)
0x1556	0xBF00    NOP
0x1558	0x304C0000  	__GPIO_MODULE_USART1_PA9_10+0
0x155C	0x38004001  	USART1_CR1bits+0
0x1560	0x240000F4  	#16000000
0x1564	0x00D02000  	_ulClk+0
0x1568	0x380C4001  	USART1_BRR+0
; end of _vUSARTConfigUSART1
_UART1_Init_Advanced:
;__Lib_UART_G0xx_1234.c, 391 :: 		
; stopBits start address is: 12 (R3)
; parity start address is: 8 (R2)
; dataBits start address is: 4 (R1)
; baudRate start address is: 0 (R0)
0x0C90	0xB500    PUSH	(R14)
; stopBits end address is: 12 (R3)
; parity end address is: 8 (R2)
; dataBits end address is: 4 (R1)
; baudRate end address is: 0 (R0)
; baudRate start address is: 0 (R0)
; dataBits start address is: 4 (R1)
; parity start address is: 8 (R2)
; stopBits start address is: 12 (R3)
; module start address is: 20 (R5)
0x0C92	0x9D01    LDR	R5, [SP, #4]
;__Lib_UART_G0xx_1234.c, 393 :: 		
0x0C94	0x462C    MOV	R4, R5
; module end address is: 20 (R5)
0x0C96	0xB410    PUSH	(R4)
; parity end address is: 8 (R2)
0x0C98	0xB408    PUSH	(R3)
0x0C9A	0xB293    UXTH	R3, R2
0x0C9C	0xB28A    UXTH	R2, R1
; dataBits end address is: 4 (R1)
0x0C9E	0x4601    MOV	R1, R0
; baudRate end address is: 0 (R0)
0x0CA0	0x4802    LDR	R0, [PC, #8]
; stopBits end address is: 12 (R3)
0x0CA2	0xF7FFFCB3  BL	__Lib_UART_G0xx_1234_UARTx_Init_Advanced+0
0x0CA6	0xB002    ADD	SP, SP, #8
;__Lib_UART_G0xx_1234.c, 394 :: 		
L_end_UART1_Init_Advanced:
0x0CA8	0xBD00    POP	(R15)
0x0CAA	0xBF00    NOP
0x0CAC	0x38004001  	USART1_CR1+0
; end of _UART1_Init_Advanced
__Lib_UART_G0xx_1234_UARTx_Init_Advanced:
;__Lib_UART_G0xx_1234.c, 265 :: 		
; uartBase start address is: 0 (R0)
0x060C	0xB500    PUSH	(R14)
0x060E	0xB08A    SUB	SP, SP, #40
0x0610	0x9107    STR	R1, [SP, #28]
0x0612	0x4601    MOV	R1, R0
0x0614	0x9208    STR	R2, [SP, #32]
0x0616	0x9309    STR	R3, [SP, #36]
; uartBase end address is: 0 (R0)
; uartBase start address is: 4 (R1)
0x0618	0x9C0B    LDR	R4, [SP, #44]
0x061A	0xB2A4    UXTH	R4, R4
0x061C	0x940B    STR	R4, [SP, #44]
0x061E	0x9C0C    LDR	R4, [SP, #48]
0x0620	0x940C    STR	R4, [SP, #48]
;__Lib_UART_G0xx_1234.c, 275 :: 		
0x0622	0x240C    MOVS	R4, #12
0x0624	0x446C    ADD	R4, SP, R4
0x0626	0x9100    STR	R1, [SP, #0]
0x0628	0x4620    MOV	R0, R4
0x062A	0xF7FFFE3B  BL	_RCC_GetClocksFrequency+0
0x062E	0x9900    LDR	R1, [SP, #0]
;__Lib_UART_G0xx_1234.c, 278 :: 		
0x0630	0x4C5D    LDR	R4, [PC, #372]
0x0632	0x42A1    CMP	R1, R4
0x0634	0xD118    BNE	L___Lib_UART_G0xx_1234_UARTx_Init_Advanced24
;__Lib_UART_G0xx_1234.c, 281 :: 		
0x0636	0x4E5D    LDR	R6, [PC, #372]
0x0638	0x6834    LDR	R4, [R6, #0]
0x063A	0x2501    MOVS	R5, #1
0x063C	0x03AD    LSLS	R5, R5, #14
0x063E	0x432C    ORRS	R4, R5
0x0640	0x6034    STR	R4, [R6, #0]
;__Lib_UART_G0xx_1234.c, 284 :: 		
0x0642	0x4D5B    LDR	R5, [PC, #364]
0x0644	0x4C5B    LDR	R4, [PC, #364]
0x0646	0x6025    STR	R5, [R4, #0]
;__Lib_UART_G0xx_1234.c, 285 :: 		
0x0648	0x4D5B    LDR	R5, [PC, #364]
0x064A	0x4C5C    LDR	R4, [PC, #368]
0x064C	0x6025    STR	R5, [R4, #0]
;__Lib_UART_G0xx_1234.c, 286 :: 		
0x064E	0x4D5C    LDR	R5, [PC, #368]
0x0650	0x4C5C    LDR	R4, [PC, #368]
0x0652	0x6025    STR	R5, [R4, #0]
;__Lib_UART_G0xx_1234.c, 287 :: 		
0x0654	0x4D5C    LDR	R5, [PC, #368]
0x0656	0x4C5D    LDR	R4, [PC, #372]
0x0658	0x6025    STR	R5, [R4, #0]
;__Lib_UART_G0xx_1234.c, 290 :: 		
0x065A	0x9100    STR	R1, [SP, #0]
0x065C	0x2001    MOVS	R0, #1
0x065E	0xF7FFFEB1  BL	__Lib_UART_G0xx_1234_get_usart_clock+0
0x0662	0x9900    LDR	R1, [SP, #0]
0x0664	0x9001    STR	R0, [SP, #4]
;__Lib_UART_G0xx_1234.c, 291 :: 		
0x0666	0xE04A    B	L___Lib_UART_G0xx_1234_UARTx_Init_Advanced25
L___Lib_UART_G0xx_1234_UARTx_Init_Advanced24:
;__Lib_UART_G0xx_1234.c, 293 :: 		
0x0668	0x4C59    LDR	R4, [PC, #356]
0x066A	0x42A1    CMP	R1, R4
0x066C	0xD118    BNE	L___Lib_UART_G0xx_1234_UARTx_Init_Advanced26
;__Lib_UART_G0xx_1234.c, 296 :: 		
0x066E	0x4E59    LDR	R6, [PC, #356]
0x0670	0x6834    LDR	R4, [R6, #0]
0x0672	0x2501    MOVS	R5, #1
0x0674	0x046D    LSLS	R5, R5, #17
0x0676	0x432C    ORRS	R4, R5
0x0678	0x6034    STR	R4, [R6, #0]
;__Lib_UART_G0xx_1234.c, 299 :: 		
0x067A	0x4D57    LDR	R5, [PC, #348]
0x067C	0x4C4D    LDR	R4, [PC, #308]
0x067E	0x6025    STR	R5, [R4, #0]
;__Lib_UART_G0xx_1234.c, 300 :: 		
0x0680	0x4D56    LDR	R5, [PC, #344]
0x0682	0x4C4E    LDR	R4, [PC, #312]
0x0684	0x6025    STR	R5, [R4, #0]
;__Lib_UART_G0xx_1234.c, 301 :: 		
0x0686	0x4D56    LDR	R5, [PC, #344]
0x0688	0x4C4E    LDR	R4, [PC, #312]
0x068A	0x6025    STR	R5, [R4, #0]
;__Lib_UART_G0xx_1234.c, 302 :: 		
0x068C	0x4D55    LDR	R5, [PC, #340]
0x068E	0x4C4F    LDR	R4, [PC, #316]
0x0690	0x6025    STR	R5, [R4, #0]
;__Lib_UART_G0xx_1234.c, 305 :: 		
0x0692	0x9100    STR	R1, [SP, #0]
0x0694	0x2002    MOVS	R0, #2
0x0696	0xF7FFFE95  BL	__Lib_UART_G0xx_1234_get_usart_clock+0
0x069A	0x9900    LDR	R1, [SP, #0]
0x069C	0x9001    STR	R0, [SP, #4]
;__Lib_UART_G0xx_1234.c, 306 :: 		
0x069E	0xE02E    B	L___Lib_UART_G0xx_1234_UARTx_Init_Advanced27
L___Lib_UART_G0xx_1234_UARTx_Init_Advanced26:
;__Lib_UART_G0xx_1234.c, 308 :: 		
0x06A0	0x4C51    LDR	R4, [PC, #324]
0x06A2	0x42A1    CMP	R1, R4
0x06A4	0xD114    BNE	L___Lib_UART_G0xx_1234_UARTx_Init_Advanced28
;__Lib_UART_G0xx_1234.c, 311 :: 		
0x06A6	0x4E4B    LDR	R6, [PC, #300]
0x06A8	0x6834    LDR	R4, [R6, #0]
0x06AA	0x2501    MOVS	R5, #1
0x06AC	0x04AD    LSLS	R5, R5, #18
0x06AE	0x432C    ORRS	R4, R5
0x06B0	0x6034    STR	R4, [R6, #0]
;__Lib_UART_G0xx_1234.c, 314 :: 		
0x06B2	0x4D4E    LDR	R5, [PC, #312]
0x06B4	0x4C3F    LDR	R4, [PC, #252]
0x06B6	0x6025    STR	R5, [R4, #0]
;__Lib_UART_G0xx_1234.c, 315 :: 		
0x06B8	0x4D4D    LDR	R5, [PC, #308]
0x06BA	0x4C40    LDR	R4, [PC, #256]
0x06BC	0x6025    STR	R5, [R4, #0]
;__Lib_UART_G0xx_1234.c, 316 :: 		
0x06BE	0x4D4D    LDR	R5, [PC, #308]
0x06C0	0x4C40    LDR	R4, [PC, #256]
0x06C2	0x6025    STR	R5, [R4, #0]
;__Lib_UART_G0xx_1234.c, 317 :: 		
0x06C4	0x4D4C    LDR	R5, [PC, #304]
0x06C6	0x4C41    LDR	R4, [PC, #260]
0x06C8	0x6025    STR	R5, [R4, #0]
;__Lib_UART_G0xx_1234.c, 320 :: 		
0x06CA	0x9C05    LDR	R4, [SP, #20]
0x06CC	0x9401    STR	R4, [SP, #4]
;__Lib_UART_G0xx_1234.c, 321 :: 		
0x06CE	0xE016    B	L___Lib_UART_G0xx_1234_UARTx_Init_Advanced29
L___Lib_UART_G0xx_1234_UARTx_Init_Advanced28:
;__Lib_UART_G0xx_1234.c, 323 :: 		
0x06D0	0x4C4A    LDR	R4, [PC, #296]
0x06D2	0x42A1    CMP	R1, R4
0x06D4	0xD113    BNE	L___Lib_UART_G0xx_1234_UARTx_Init_Advanced30
;__Lib_UART_G0xx_1234.c, 326 :: 		
0x06D6	0x4E3F    LDR	R6, [PC, #252]
0x06D8	0x6834    LDR	R4, [R6, #0]
0x06DA	0x2501    MOVS	R5, #1
0x06DC	0x04ED    LSLS	R5, R5, #19
0x06DE	0x432C    ORRS	R4, R5
0x06E0	0x6034    STR	R4, [R6, #0]
;__Lib_UART_G0xx_1234.c, 329 :: 		
0x06E2	0x4D47    LDR	R5, [PC, #284]
0x06E4	0x4C33    LDR	R4, [PC, #204]
0x06E6	0x6025    STR	R5, [R4, #0]
;__Lib_UART_G0xx_1234.c, 330 :: 		
0x06E8	0x4D46    LDR	R5, [PC, #280]
0x06EA	0x4C34    LDR	R4, [PC, #208]
0x06EC	0x6025    STR	R5, [R4, #0]
;__Lib_UART_G0xx_1234.c, 331 :: 		
0x06EE	0x4D46    LDR	R5, [PC, #280]
0x06F0	0x4C34    LDR	R4, [PC, #208]
0x06F2	0x6025    STR	R5, [R4, #0]
;__Lib_UART_G0xx_1234.c, 332 :: 		
0x06F4	0x4D45    LDR	R5, [PC, #276]
0x06F6	0x4C35    LDR	R4, [PC, #212]
0x06F8	0x6025    STR	R5, [R4, #0]
;__Lib_UART_G0xx_1234.c, 335 :: 		
0x06FA	0x9C05    LDR	R4, [SP, #20]
0x06FC	0x9401    STR	R4, [SP, #4]
;__Lib_UART_G0xx_1234.c, 336 :: 		
L___Lib_UART_G0xx_1234_UARTx_Init_Advanced30:
L___Lib_UART_G0xx_1234_UARTx_Init_Advanced29:
L___Lib_UART_G0xx_1234_UARTx_Init_Advanced27:
L___Lib_UART_G0xx_1234_UARTx_Init_Advanced25:
;__Lib_UART_G0xx_1234.c, 339 :: 		
0x06FE	0x9100    STR	R1, [SP, #0]
0x0700	0x980C    LDR	R0, [SP, #48]
0x0702	0xF7FFFE3D  BL	_GPIO_Alternate_Function_Enable+0
0x0706	0x9900    LDR	R1, [SP, #0]
;__Lib_UART_G0xx_1234.c, 342 :: 		
0x0708	0x680C    LDR	R4, [R1, #0]
0x070A	0x2501    MOVS	R5, #1
0x070C	0x43AC    BICS	R4, R5
0x070E	0x600C    STR	R4, [R1, #0]
;__Lib_UART_G0xx_1234.c, 345 :: 		
0x0710	0x1D0D    ADDS	R5, R1, #4
0x0712	0x2400    MOVS	R4, #0
0x0714	0x602C    STR	R4, [R5, #0]
;__Lib_UART_G0xx_1234.c, 347 :: 		
0x0716	0x1D0E    ADDS	R6, R1, #4
0x0718	0x6835    LDR	R5, [R6, #0]
0x071A	0x9C0B    LDR	R4, [SP, #44]
0x071C	0xB2A4    UXTH	R4, R4
0x071E	0x432C    ORRS	R4, R5
0x0720	0x6034    STR	R4, [R6, #0]
;__Lib_UART_G0xx_1234.c, 350 :: 		
0x0722	0x2400    MOVS	R4, #0
0x0724	0x600C    STR	R4, [R1, #0]
;__Lib_UART_G0xx_1234.c, 352 :: 		
0x0726	0x680D    LDR	R5, [R1, #0]
0x0728	0x9C08    LDR	R4, [SP, #32]
0x072A	0xB2A4    UXTH	R4, R4
0x072C	0x432C    ORRS	R4, R5
0x072E	0x600C    STR	R4, [R1, #0]
;__Lib_UART_G0xx_1234.c, 354 :: 		
0x0730	0x9C09    LDR	R4, [SP, #36]
0x0732	0xB2A4    UXTH	R4, R4
0x0734	0x2C00    CMP	R4, #0
0x0736	0xD004    BEQ	L___Lib_UART_G0xx_1234_UARTx_Init_Advanced31
;__Lib_UART_G0xx_1234.c, 357 :: 		
0x0738	0x9D09    LDR	R5, [SP, #36]
0x073A	0xB2AD    UXTH	R5, R5
0x073C	0x4C34    LDR	R4, [PC, #208]
0x073E	0x432C    ORRS	R4, R5
0x0740	0x9409    STR	R4, [SP, #36]
;__Lib_UART_G0xx_1234.c, 358 :: 		
L___Lib_UART_G0xx_1234_UARTx_Init_Advanced31:
;__Lib_UART_G0xx_1234.c, 360 :: 		
0x0742	0x680D    LDR	R5, [R1, #0]
0x0744	0x9C09    LDR	R4, [SP, #36]
0x0746	0xB2A4    UXTH	R4, R4
0x0748	0x432C    ORRS	R4, R5
0x074A	0x600C    STR	R4, [R1, #0]
;__Lib_UART_G0xx_1234.c, 363 :: 		
0x074C	0x680D    LDR	R5, [R1, #0]
0x074E	0x240D    MOVS	R4, #13
0x0750	0x432C    ORRS	R4, R5
0x0752	0x600C    STR	R4, [R1, #0]
;__Lib_UART_G0xx_1234.c, 366 :: 		
0x0754	0x460D    MOV	R5, R1
0x0756	0x3508    ADDS	R5, #8
0x0758	0x2400    MOVS	R4, #0
0x075A	0x602C    STR	R4, [R5, #0]
;__Lib_UART_G0xx_1234.c, 370 :: 		
0x075C	0x9D01    LDR	R5, [SP, #4]
0x075E	0x2419    MOVS	R4, #25
0x0760	0x4628    MOV	R0, R5
0x0762	0x4360    MULS	R0, R4, R0
0x0764	0x9C07    LDR	R4, [SP, #28]
0x0766	0x00A2    LSLS	R2, R4, #2
0x0768	0x9100    STR	R1, [SP, #0]
0x076A	0xF7FFFCAF  BL	__Div_32x32_U+0
; intDiv start address is: 28 (R7)
0x076E	0x4607    MOV	R7, R0
;__Lib_UART_G0xx_1234.c, 371 :: 		
0x0770	0x2264    MOVS	R2, #100
0x0772	0xF7FFFCAB  BL	__Div_32x32_U+0
0x0776	0x0104    LSLS	R4, R0, #4
0x0778	0x9402    STR	R4, [SP, #8]
;__Lib_UART_G0xx_1234.c, 373 :: 		
0x077A	0x0926    LSRS	R6, R4, #4
0x077C	0x2564    MOVS	R5, #100
0x077E	0x4634    MOV	R4, R6
0x0780	0x436C    MULS	R4, R5, R4
0x0782	0x1B3C    SUBS	R4, R7, R4
; intDiv end address is: 28 (R7)
;__Lib_UART_G0xx_1234.c, 374 :: 		
0x0784	0x0124    LSLS	R4, R4, #4
0x0786	0x4620    MOV	R0, R4
0x0788	0x3032    ADDS	R0, #50
0x078A	0x2264    MOVS	R2, #100
0x078C	0xF7FFFC9E  BL	__Div_32x32_U+0
0x0790	0x9900    LDR	R1, [SP, #0]
0x0792	0x240F    MOVS	R4, #15
0x0794	0x4605    MOV	R5, R0
0x0796	0x4025    ANDS	R5, R4
0x0798	0x9C02    LDR	R4, [SP, #8]
0x079A	0x432C    ORRS	R4, R5
;__Lib_UART_G0xx_1234.c, 376 :: 		
0x079C	0x460D    MOV	R5, R1
0x079E	0x350C    ADDS	R5, #12
; uartBase end address is: 4 (R1)
0x07A0	0xB2A4    UXTH	R4, R4
0x07A2	0x602C    STR	R4, [R5, #0]
;__Lib_UART_G0xx_1234.c, 377 :: 		
L_end_UARTx_Init_Advanced:
0x07A4	0xB00A    ADD	SP, SP, #40
0x07A6	0xBD00    POP	(R15)
0x07A8	0x38004001  	USART1_CR1+0
0x07AC	0x10404002  	RCC_APBENR2+0
0x07B0	0xFFFFFFFF  	_UART1_Write+0
0x07B4	0x00D82000  	_UART_Wr_Ptr+0
0x07B8	0xFFFFFFFF  	_UART1_Read+0
0x07BC	0x00DC2000  	_UART_Rd_Ptr+0
0x07C0	0xFFFFFFFF  	_UART1_Data_Ready+0
0x07C4	0x00E02000  	_UART_Rdy_Ptr+0
0x07C8	0xFFFFFFFF  	_UART1_Tx_Idle+0
0x07CC	0x00E42000  	_UART_Tx_Idle_Ptr+0
0x07D0	0x44004000  	USART2_CR1+0
0x07D4	0x103C4002  	RCC_APBENR1+0
0x07D8	0xFFFFFFFF  	_UART2_Write+0
0x07DC	0xFFFFFFFF  	_UART2_Read+0
0x07E0	0xFFFFFFFF  	_UART2_Data_Ready+0
0x07E4	0xFFFFFFFF  	_UART2_Tx_Idle+0
0x07E8	0x48004000  	USART3_CR1+0
0x07EC	0xFFFFFFFF  	_UART3_Write+0
0x07F0	0xFFFFFFFF  	_UART3_Read+0
0x07F4	0xFFFFFFFF  	_UART3_Data_Ready+0
0x07F8	0xFFFFFFFF  	_UART3_Tx_Idle+0
0x07FC	0x4C004000  	USART4_CR1+0
0x0800	0xFFFFFFFF  	_UART4_Write+0
0x0804	0xFFFFFFFF  	_UART4_Read+0
0x0808	0xFFFFFFFF  	_UART4_Data_Ready+0
0x080C	0xFFFFFFFF  	_UART4_Tx_Idle+0
0x0810	0x04000000  	#1024
; end of __Lib_UART_G0xx_1234_UARTx_Init_Advanced
_RCC_GetClocksFrequency:
;__Lib_System_G0xx.c, 474 :: 		
; RCC_Clocks start address is: 0 (R0)
0x02A4	0xB500    PUSH	(R14)
0x02A6	0xB081    SUB	SP, SP, #4
0x02A8	0x4606    MOV	R6, R0
; RCC_Clocks end address is: 0 (R0)
; RCC_Clocks start address is: 24 (R6)
;__Lib_System_G0xx.c, 477 :: 		
0x02AA	0x1D31    ADDS	R1, R6, #4
0x02AC	0x9100    STR	R1, [SP, #0]
0x02AE	0xF7FFFF07  BL	_Get_Fosc_kHz+0
0x02B2	0x4920    LDR	R1, [PC, #128]
0x02B4	0x460A    MOV	R2, R1
0x02B6	0x4342    MULS	R2, R0, R2
0x02B8	0x9900    LDR	R1, [SP, #0]
0x02BA	0x600A    STR	R2, [R1, #0]
;__Lib_System_G0xx.c, 480 :: 		
0x02BC	0x491E    LDR	R1, [PC, #120]
0x02BE	0x680A    LDR	R2, [R1, #0]
0x02C0	0x491E    LDR	R1, [PC, #120]
0x02C2	0x4011    ANDS	R1, R2
;__Lib_System_G0xx.c, 481 :: 		
0x02C4	0x0A0A    LSRS	R2, R1, #8
; tmp start address is: 0 (R0)
0x02C6	0x4610    MOV	R0, R2
;__Lib_System_G0xx.c, 482 :: 		
0x02C8	0x2108    MOVS	R1, #8
0x02CA	0x4011    ANDS	R1, R2
0x02CC	0x2900    CMP	R1, #0
0x02CE	0xD001    BEQ	L_RCC_GetClocksFrequency61
; tmp end address is: 0 (R0)
;__Lib_System_G0xx.c, 483 :: 		
; presc start address is: 0 (R0)
0x02D0	0x2001    MOVS	R0, #1
; presc end address is: 0 (R0)
0x02D2	0xE006    B	L_RCC_GetClocksFrequency62
L_RCC_GetClocksFrequency61:
;__Lib_System_G0xx.c, 486 :: 		
; tmp start address is: 0 (R0)
0x02D4	0x2107    MOVS	R1, #7
0x02D6	0x4602    MOV	R2, R0
0x02D8	0x400A    ANDS	R2, R1
; tmp end address is: 0 (R0)
;__Lib_System_G0xx.c, 487 :: 		
0x02DA	0x4919    LDR	R1, [PC, #100]
0x02DC	0x1889    ADDS	R1, R1, R2
0x02DE	0x7808    LDRB	R0, [R1, #0]
; presc start address is: 0 (R0)
0x02E0	0xB2C0    UXTB	R0, R0
; presc end address is: 0 (R0)
;__Lib_System_G0xx.c, 488 :: 		
L_RCC_GetClocksFrequency62:
;__Lib_System_G0xx.c, 490 :: 		
; presc start address is: 0 (R0)
0x02E2	0x1D31    ADDS	R1, R6, #4
0x02E4	0x6809    LDR	R1, [R1, #0]
0x02E6	0x4341    MULS	R1, R0, R1
; presc end address is: 0 (R0)
0x02E8	0x6031    STR	R1, [R6, #0]
;__Lib_System_G0xx.c, 493 :: 		
0x02EA	0x4913    LDR	R1, [PC, #76]
0x02EC	0x680A    LDR	R2, [R1, #0]
0x02EE	0x4915    LDR	R1, [PC, #84]
0x02F0	0x4011    ANDS	R1, R2
;__Lib_System_G0xx.c, 494 :: 		
0x02F2	0x0B09    LSRS	R1, R1, #12
; tmp start address is: 0 (R0)
0x02F4	0x4608    MOV	R0, R1
;__Lib_System_G0xx.c, 495 :: 		
0x02F6	0x2900    CMP	R1, #0
0x02F8	0xD102    BNE	L_RCC_GetClocksFrequency63
; tmp end address is: 0 (R0)
;__Lib_System_G0xx.c, 497 :: 		
; presc1 start address is: 8 (R2)
0x02FA	0x2201    MOVS	R2, #1
;__Lib_System_G0xx.c, 499 :: 		
; presc2 start address is: 28 (R7)
0x02FC	0x2701    MOVS	R7, #1
;__Lib_System_G0xx.c, 500 :: 		
; presc2 end address is: 28 (R7)
; presc1 end address is: 8 (R2)
0x02FE	0xE007    B	L_RCC_GetClocksFrequency64
L_RCC_GetClocksFrequency63:
;__Lib_System_G0xx.c, 503 :: 		
; tmp start address is: 0 (R0)
0x0300	0x2103    MOVS	R1, #3
0x0302	0x4602    MOV	R2, R0
0x0304	0x400A    ANDS	R2, R1
; tmp end address is: 0 (R0)
;__Lib_System_G0xx.c, 505 :: 		
0x0306	0x4910    LDR	R1, [PC, #64]
0x0308	0x1889    ADDS	R1, R1, R2
0x030A	0x780A    LDRB	R2, [R1, #0]
; presc1 start address is: 8 (R2)
0x030C	0xB2D2    UXTB	R2, R2
;__Lib_System_G0xx.c, 507 :: 		
; presc2 start address is: 28 (R7)
0x030E	0x2702    MOVS	R7, #2
; presc2 end address is: 28 (R7)
; presc1 end address is: 8 (R2)
;__Lib_System_G0xx.c, 508 :: 		
L_RCC_GetClocksFrequency64:
;__Lib_System_G0xx.c, 510 :: 		
; presc2 start address is: 28 (R7)
; presc1 start address is: 8 (R2)
0x0310	0x4631    MOV	R1, R6
0x0312	0x3108    ADDS	R1, #8
0x0314	0x9100    STR	R1, [SP, #0]
0x0316	0x1D31    ADDS	R1, R6, #4
0x0318	0x6808    LDR	R0, [R1, #0]
0x031A	0xF7FFFED7  BL	__Div_32x32_U+0
; presc1 end address is: 8 (R2)
0x031E	0x9900    LDR	R1, [SP, #0]
0x0320	0x6008    STR	R0, [R1, #0]
;__Lib_System_G0xx.c, 516 :: 		
0x0322	0x4632    MOV	R2, R6
0x0324	0x320C    ADDS	R2, #12
0x0326	0x4631    MOV	R1, R6
0x0328	0x3108    ADDS	R1, #8
; RCC_Clocks end address is: 24 (R6)
0x032A	0x6809    LDR	R1, [R1, #0]
0x032C	0x4379    MULS	R1, R7, R1
; presc2 end address is: 28 (R7)
0x032E	0x6011    STR	R1, [R2, #0]
;__Lib_System_G0xx.c, 517 :: 		
L_end_RCC_GetClocksFrequency:
0x0330	0xB001    ADD	SP, SP, #4
0x0332	0xBD00    POP	(R15)
0x0334	0x03E80000  	#1000
0x0338	0x10084002  	RCC_CFGR+0
0x033C	0x0F000000  	#3840
0x0340	0x34500000  	__Lib_System_G0xx_AHBPrescTable+0
0x0344	0x70000000  	#28672
0x0348	0x34640000  	__Lib_System_G0xx_APBPrescTable+0
; end of _RCC_GetClocksFrequency
_Get_Fosc_kHz:
;__Lib_Delays.c, 9 :: 		unsigned long Get_Fosc_kHz(){
0x00C0	0xB500    PUSH	(R14)
;__Lib_Delays.c, 10 :: 		return __System_CLOCK_IN_KHZ;
0x00C2	0x4801    LDR	R0, [PC, #4]
0x00C4	0x6800    LDR	R0, [R0, #0]
;__Lib_Delays.c, 11 :: 		}
L_end_Get_Fosc_kHz:
0x00C6	0xBD00    POP	(R15)
0x00C8	0x00D42000  	___System_CLOCK_IN_KHZ+0
; end of _Get_Fosc_kHz
__Div_32x32_U:
;__Lib_Math.c, 267 :: 		
0x00CC	0xB081    SUB	SP, SP, #4
;__Lib_Math.c, 269 :: 		
0x00CE	0xB43A    PUSH	(R1, R3, R4, R5)
;__Lib_Math.c, 272 :: 		
0x00D0	0x0014    MOVS	R4, R2
;__Lib_Math.c, 273 :: 		
0x00D2	0xD102    BNE	_Div_32x32_U_Lab_3
;__Lib_Math.c, 275 :: 		
0x00D4	0x4602    MOV	R2, R0
;__Lib_Math.c, 276 :: 		
0x00D6	0x480C    LDR	R0, [PC, #48]
;__Lib_Math.c, 277 :: 		
0x00D8	0xE013    B	_Div_32x32_U_Lab_end
;__Lib_Math.c, 281 :: 		
_Div_32x32_U_Lab_3:
;__Lib_Math.c, 282 :: 		
0x00DA	0x4613    MOV	R3, R2
;__Lib_Math.c, 283 :: 		
0x00DC	0x4602    MOV	R2, R0
;__Lib_Math.c, 284 :: 		
0x00DE	0x2000    MOVS	R0, #0
;__Lib_Math.c, 285 :: 		
0x00E0	0x2120    MOVS	R1, #32
;__Lib_Math.c, 286 :: 		
0x00E2	0x2401    MOVS	R4, #1
;__Lib_Math.c, 287 :: 		
0x00E4	0xE009    B	_Div_32x32_U_Lab_1
;__Lib_Math.c, 289 :: 		
_Div_32x32_U_Lab_2:
;__Lib_Math.c, 290 :: 		
0x00E6	0x4615    MOV	R5, R2
;__Lib_Math.c, 291 :: 		
0x00E8	0x40CD    LSRS	R5, R1
;__Lib_Math.c, 292 :: 		
0x00EA	0x429D    CMP	R5, R3
;__Lib_Math.c, 293 :: 		
0x00EC	0xD305    BCC	_Div_32x32_U_Lab_1
;__Lib_Math.c, 294 :: 		
0x00EE	0x461D    MOV	R5, R3
;__Lib_Math.c, 295 :: 		
0x00F0	0x408D    LSLS	R5, R1
;__Lib_Math.c, 296 :: 		
0x00F2	0x1B52    SUBS	R2, R2, R5
;__Lib_Math.c, 297 :: 		
0x00F4	0x4625    MOV	R5, R4
;__Lib_Math.c, 298 :: 		
0x00F6	0x408D    LSLS	R5, R1
;__Lib_Math.c, 299 :: 		
0x00F8	0x1940    ADDS	R0, R0, R5
;__Lib_Math.c, 301 :: 		
_Div_32x32_U_Lab_1:
;__Lib_Math.c, 302 :: 		
0x00FA	0x460D    MOV	R5, R1
;__Lib_Math.c, 303 :: 		
0x00FC	0x1E49    SUBS	R1, R1, #1
;__Lib_Math.c, 304 :: 		
0x00FE	0x2D00    CMP	R5, #0
;__Lib_Math.c, 305 :: 		
0x0100	0xDCF1    BGT	_Div_32x32_U_Lab_2
;__Lib_Math.c, 307 :: 		
_Div_32x32_U_Lab_end:
;__Lib_Math.c, 308 :: 		
0x0102	0xBC3A    POP	(R1, R3, R4, R5)
;__Lib_Math.c, 309 :: 		
0x0104	0xE002    B	#4
0x0106	0xBF00    NOP
0x0108	0xFFFFFFFF  	#-1
;__Lib_Math.c, 310 :: 		
L_end__Div_32x32_U:
0x010C	0xB001    ADD	SP, SP, #4
0x010E	0x4770    BX	LR
; end of __Div_32x32_U
__Lib_UART_G0xx_1234_get_usart_clock:
;__Lib_UART_G0xx_1234.c, 80 :: 		
; uart_number start address is: 0 (R0)
0x03C4	0xB500    PUSH	(R14)
0x03C6	0xB085    SUB	SP, SP, #20
; uart_number end address is: 0 (R0)
; uart_number start address is: 0 (R0)
;__Lib_UART_G0xx_1234.c, 84 :: 		
0x03C8	0x2801    CMP	R0, #1
0x03CA	0xD107    BNE	L___Lib_UART_G0xx_1234_get_usart_clock0
; uart_number end address is: 0 (R0)
;__Lib_UART_G0xx_1234.c, 85 :: 		
0x03CC	0x4913    LDR	R1, [PC, #76]
0x03CE	0x6809    LDR	R1, [R1, #0]
0x03D0	0x9100    STR	R1, [SP, #0]
;__Lib_UART_G0xx_1234.c, 86 :: 		
0x03D2	0x9A00    LDR	R2, [SP, #0]
0x03D4	0x2103    MOVS	R1, #3
0x03D6	0x4011    ANDS	R1, R2
0x03D8	0x9100    STR	R1, [SP, #0]
;__Lib_UART_G0xx_1234.c, 87 :: 		
0x03DA	0xE009    B	L___Lib_UART_G0xx_1234_get_usart_clock1
L___Lib_UART_G0xx_1234_get_usart_clock0:
;__Lib_UART_G0xx_1234.c, 88 :: 		
; uart_number start address is: 0 (R0)
0x03DC	0x2802    CMP	R0, #2
0x03DE	0xD107    BNE	L___Lib_UART_G0xx_1234_get_usart_clock2
; uart_number end address is: 0 (R0)
;__Lib_UART_G0xx_1234.c, 89 :: 		
0x03E0	0x490E    LDR	R1, [PC, #56]
0x03E2	0x6809    LDR	R1, [R1, #0]
0x03E4	0x9100    STR	R1, [SP, #0]
;__Lib_UART_G0xx_1234.c, 90 :: 		
0x03E6	0x9A00    LDR	R2, [SP, #0]
0x03E8	0x210C    MOVS	R1, #12
0x03EA	0x4011    ANDS	R1, R2
0x03EC	0x0889    LSRS	R1, R1, #2
0x03EE	0x9100    STR	R1, [SP, #0]
;__Lib_UART_G0xx_1234.c, 91 :: 		
L___Lib_UART_G0xx_1234_get_usart_clock2:
L___Lib_UART_G0xx_1234_get_usart_clock1:
;__Lib_UART_G0xx_1234.c, 93 :: 		
0x03F0	0xE007    B	L___Lib_UART_G0xx_1234_get_usart_clock3
;__Lib_UART_G0xx_1234.c, 95 :: 		
L___Lib_UART_G0xx_1234_get_usart_clock5:
; uartx_clk start address is: 0 (R0)
0x03F2	0x9801    LDR	R0, [SP, #4]
; uartx_clk end address is: 0 (R0)
0x03F4	0xE00F    B	L___Lib_UART_G0xx_1234_get_usart_clock4
;__Lib_UART_G0xx_1234.c, 97 :: 		
L___Lib_UART_G0xx_1234_get_usart_clock6:
; uartx_clk start address is: 0 (R0)
0x03F6	0x480A    LDR	R0, [PC, #40]
; uartx_clk end address is: 0 (R0)
0x03F8	0xE00D    B	L___Lib_UART_G0xx_1234_get_usart_clock4
;__Lib_UART_G0xx_1234.c, 100 :: 		
L___Lib_UART_G0xx_1234_get_usart_clock7:
; uartx_clk start address is: 0 (R0)
0x03FA	0x480A    LDR	R0, [PC, #40]
; uartx_clk end address is: 0 (R0)
0x03FC	0xE00B    B	L___Lib_UART_G0xx_1234_get_usart_clock4
;__Lib_UART_G0xx_1234.c, 102 :: 		
L___Lib_UART_G0xx_1234_get_usart_clock8:
; uartx_clk start address is: 0 (R0)
0x03FE	0x9803    LDR	R0, [SP, #12]
; uartx_clk end address is: 0 (R0)
0x0400	0xE009    B	L___Lib_UART_G0xx_1234_get_usart_clock4
;__Lib_UART_G0xx_1234.c, 103 :: 		
L___Lib_UART_G0xx_1234_get_usart_clock3:
0x0402	0x9900    LDR	R1, [SP, #0]
0x0404	0x2901    CMP	R1, #1
0x0406	0xD0F4    BEQ	L___Lib_UART_G0xx_1234_get_usart_clock5
0x0408	0x9900    LDR	R1, [SP, #0]
0x040A	0x2902    CMP	R1, #2
0x040C	0xD0F3    BEQ	L___Lib_UART_G0xx_1234_get_usart_clock6
0x040E	0x9900    LDR	R1, [SP, #0]
0x0410	0x2903    CMP	R1, #3
0x0412	0xD0F2    BEQ	L___Lib_UART_G0xx_1234_get_usart_clock7
0x0414	0xE7F3    B	L___Lib_UART_G0xx_1234_get_usart_clock8
L___Lib_UART_G0xx_1234_get_usart_clock4:
;__Lib_UART_G0xx_1234.c, 105 :: 		
; uartx_clk start address is: 0 (R0)
; uartx_clk end address is: 0 (R0)
;__Lib_UART_G0xx_1234.c, 106 :: 		
L_end_get_usart_clock:
0x0416	0xB005    ADD	SP, SP, #20
0x0418	0xBD00    POP	(R15)
0x041A	0xBF00    NOP
0x041C	0x10544002  	RCC_CCIPR+0
0x0420	0x240000F4  	#16000000
0x0424	0x80000000  	#32768
; end of __Lib_UART_G0xx_1234_get_usart_clock
_GPIO_Alternate_Function_Enable:
;__Lib_GPIO_G0xx.c, 510 :: 		
; module start address is: 0 (R0)
0x0380	0xB500    PUSH	(R14)
0x0382	0xB082    SUB	SP, SP, #8
; module end address is: 0 (R0)
; module start address is: 0 (R0)
;__Lib_GPIO_G0xx.c, 515 :: 		
; i start address is: 16 (R4)
0x0384	0x2400    MOVS	R4, #0
; module end address is: 0 (R0)
; i end address is: 16 (R4)
;__Lib_GPIO_G0xx.c, 516 :: 		
L_GPIO_Alternate_Function_Enable55:
; i start address is: 16 (R4)
; module start address is: 0 (R0)
0x0386	0x00A1    LSLS	R1, R4, #2
0x0388	0x1841    ADDS	R1, R0, R1
0x038A	0x680A    LDR	R2, [R1, #0]
0x038C	0x490C    LDR	R1, [PC, #48]
0x038E	0x428A    CMP	R2, R1
0x0390	0xD013    BEQ	L_GPIO_Alternate_Function_Enable56
;__Lib_GPIO_G0xx.c, 518 :: 		
0x0392	0x4601    MOV	R1, R0
0x0394	0x3134    ADDS	R1, #52
0x0396	0x00A3    LSLS	R3, R4, #2
0x0398	0x18C9    ADDS	R1, R1, R3
0x039A	0x6809    LDR	R1, [R1, #0]
0x039C	0x460A    MOV	R2, R1
0x039E	0x18C1    ADDS	R1, R0, R3
0x03A0	0x6809    LDR	R1, [R1, #0]
0x03A2	0x9000    STR	R0, [SP, #0]
0x03A4	0x9401    STR	R4, [SP, #4]
0x03A6	0x4608    MOV	R0, R1
0x03A8	0x4611    MOV	R1, R2
0x03AA	0xF7FFFEB1  BL	__Lib_GPIO_G0xx_GPIO_Config_Pin_Alternate_Function+0
0x03AE	0x9C01    LDR	R4, [SP, #4]
0x03B0	0xB2A4    UXTH	R4, R4
0x03B2	0x9800    LDR	R0, [SP, #0]
;__Lib_GPIO_G0xx.c, 519 :: 		
0x03B4	0x3401    ADDS	R4, #1
0x03B6	0xB2A4    UXTH	R4, R4
;__Lib_GPIO_G0xx.c, 520 :: 		
; module end address is: 0 (R0)
; i end address is: 16 (R4)
0x03B8	0xE7E5    B	L_GPIO_Alternate_Function_Enable55
L_GPIO_Alternate_Function_Enable56:
;__Lib_GPIO_G0xx.c, 521 :: 		
L_end_GPIO_Alternate_Function_Enable:
0x03BA	0xB002    ADD	SP, SP, #8
0x03BC	0xBD00    POP	(R15)
0x03BE	0xBF00    NOP
0x03C0	0xFFFFFFFF  	#-1
; end of _GPIO_Alternate_Function_Enable
__Lib_GPIO_G0xx_GPIO_Config_Pin_Alternate_Function:
;__Lib_GPIO_G0xx.c, 68 :: 		
; config start address is: 4 (R1)
; afPin start address is: 0 (R0)
0x0110	0xB500    PUSH	(R14)
0x0112	0xB083    SUB	SP, SP, #12
0x0114	0x460C    MOV	R4, R1
; config end address is: 4 (R1)
; afPin end address is: 0 (R0)
; afPin start address is: 0 (R0)
; config start address is: 16 (R4)
;__Lib_GPIO_G0xx.c, 79 :: 		
0x0116	0x22FF    MOVS	R2, #255
0x0118	0x4603    MOV	R3, R0
0x011A	0x4013    ANDS	R3, R2
0x011C	0x091A    LSRS	R2, R3, #4
; port start address is: 20 (R5)
0x011E	0x4615    MOV	R5, R2
;__Lib_GPIO_G0xx.c, 80 :: 		
0x0120	0x220F    MOVS	R2, #15
0x0122	0x4619    MOV	R1, R3
0x0124	0x4011    ANDS	R1, R2
; pin start address is: 4 (R1)
;__Lib_GPIO_G0xx.c, 81 :: 		
0x0126	0x0A03    LSRS	R3, R0, #8
; afPin end address is: 0 (R0)
0x0128	0x220F    MOVS	R2, #15
0x012A	0x401A    ANDS	R2, R3
; af start address is: 0 (R0)
0x012C	0x4610    MOV	R0, R2
;__Lib_GPIO_G0xx.c, 83 :: 		
0x012E	0xE00E    B	L___Lib_GPIO_G0xx_GPIO_Config_Pin_Alternate_Function0
; port end address is: 20 (R5)
;__Lib_GPIO_G0xx.c, 85 :: 		
L___Lib_GPIO_G0xx_GPIO_Config_Pin_Alternate_Function2:
;__Lib_GPIO_G0xx.c, 87 :: 		
0x0130	0x4A1D    LDR	R2, [PC, #116]
0x0132	0x9202    STR	R2, [SP, #8]
;__Lib_GPIO_G0xx.c, 88 :: 		
0x0134	0xE015    B	L___Lib_GPIO_G0xx_GPIO_Config_Pin_Alternate_Function1
;__Lib_GPIO_G0xx.c, 90 :: 		
L___Lib_GPIO_G0xx_GPIO_Config_Pin_Alternate_Function3:
;__Lib_GPIO_G0xx.c, 92 :: 		
0x0136	0x4A1D    LDR	R2, [PC, #116]
0x0138	0x9202    STR	R2, [SP, #8]
;__Lib_GPIO_G0xx.c, 93 :: 		
0x013A	0xE012    B	L___Lib_GPIO_G0xx_GPIO_Config_Pin_Alternate_Function1
;__Lib_GPIO_G0xx.c, 95 :: 		
L___Lib_GPIO_G0xx_GPIO_Config_Pin_Alternate_Function4:
;__Lib_GPIO_G0xx.c, 97 :: 		
0x013C	0x4A1C    LDR	R2, [PC, #112]
0x013E	0x9202    STR	R2, [SP, #8]
;__Lib_GPIO_G0xx.c, 98 :: 		
0x0140	0xE00F    B	L___Lib_GPIO_G0xx_GPIO_Config_Pin_Alternate_Function1
;__Lib_GPIO_G0xx.c, 100 :: 		
L___Lib_GPIO_G0xx_GPIO_Config_Pin_Alternate_Function5:
;__Lib_GPIO_G0xx.c, 102 :: 		
0x0142	0x4A1C    LDR	R2, [PC, #112]
0x0144	0x9202    STR	R2, [SP, #8]
;__Lib_GPIO_G0xx.c, 103 :: 		
0x0146	0xE00C    B	L___Lib_GPIO_G0xx_GPIO_Config_Pin_Alternate_Function1
;__Lib_GPIO_G0xx.c, 105 :: 		
L___Lib_GPIO_G0xx_GPIO_Config_Pin_Alternate_Function6:
;__Lib_GPIO_G0xx.c, 107 :: 		
0x0148	0x4A1B    LDR	R2, [PC, #108]
0x014A	0x9202    STR	R2, [SP, #8]
;__Lib_GPIO_G0xx.c, 108 :: 		
0x014C	0xE009    B	L___Lib_GPIO_G0xx_GPIO_Config_Pin_Alternate_Function1
;__Lib_GPIO_G0xx.c, 110 :: 		
L___Lib_GPIO_G0xx_GPIO_Config_Pin_Alternate_Function0:
; port start address is: 20 (R5)
0x014E	0x2D00    CMP	R5, #0
0x0150	0xD0EE    BEQ	L___Lib_GPIO_G0xx_GPIO_Config_Pin_Alternate_Function2
0x0152	0x2D01    CMP	R5, #1
0x0154	0xD0EF    BEQ	L___Lib_GPIO_G0xx_GPIO_Config_Pin_Alternate_Function3
0x0156	0x2D02    CMP	R5, #2
0x0158	0xD0F0    BEQ	L___Lib_GPIO_G0xx_GPIO_Config_Pin_Alternate_Function4
0x015A	0x2D03    CMP	R5, #3
0x015C	0xD0F1    BEQ	L___Lib_GPIO_G0xx_GPIO_Config_Pin_Alternate_Function5
0x015E	0x2D04    CMP	R5, #4
0x0160	0xD0F2    BEQ	L___Lib_GPIO_G0xx_GPIO_Config_Pin_Alternate_Function6
; port end address is: 20 (R5)
L___Lib_GPIO_G0xx_GPIO_Config_Pin_Alternate_Function1:
;__Lib_GPIO_G0xx.c, 113 :: 		
0x0162	0x2201    MOVS	R2, #1
0x0164	0x408A    LSLS	R2, R1
0x0166	0x9000    STR	R0, [SP, #0]
; config end address is: 16 (R4)
0x0168	0x9101    STR	R1, [SP, #4]
0x016A	0xB291    UXTH	R1, R2
0x016C	0x4622    MOV	R2, R4
0x016E	0x9802    LDR	R0, [SP, #8]
0x0170	0xF000FD9E  BL	_GPIO_Config+0
0x0174	0x9901    LDR	R1, [SP, #4]
0x0176	0x9800    LDR	R0, [SP, #0]
;__Lib_GPIO_G0xx.c, 116 :: 		
0x0178	0x9A02    LDR	R2, [SP, #8]
0x017A	0x4615    MOV	R5, R2
0x017C	0x3520    ADDS	R5, #32
; altFcnBase start address is: 20 (R5)
;__Lib_GPIO_G0xx.c, 117 :: 		
0x017E	0x2907    CMP	R1, #7
0x0180	0xD902    BLS	L___Lib_GPIO_G0xx_GPIO_Config_Pin_Alternate_Function77
;__Lib_GPIO_G0xx.c, 119 :: 		
0x0182	0x3504    ADDS	R5, #4
;__Lib_GPIO_G0xx.c, 120 :: 		
0x0184	0x3908    SUBS	R1, #8
; pin end address is: 4 (R1)
; altFcnBase end address is: 20 (R5)
;__Lib_GPIO_G0xx.c, 121 :: 		
0x0186	0xE7FF    B	L___Lib_GPIO_G0xx_GPIO_Config_Pin_Alternate_Function7
L___Lib_GPIO_G0xx_GPIO_Config_Pin_Alternate_Function77:
;__Lib_GPIO_G0xx.c, 117 :: 		
;__Lib_GPIO_G0xx.c, 121 :: 		
L___Lib_GPIO_G0xx_GPIO_Config_Pin_Alternate_Function7:
;__Lib_GPIO_G0xx.c, 123 :: 		
; pin start address is: 4 (R1)
; altFcnBase start address is: 20 (R5)
0x0188	0x008C    LSLS	R4, R1, #2
0x018A	0x230F    MOVS	R3, #15
0x018C	0x461A    MOV	R2, R3
0x018E	0x40A2    LSLS	R2, R4
0x0190	0x43D3    MVN	R3, R2
0x0192	0x682A    LDR	R2, [R5, #0]
0x0194	0x401A    ANDS	R2, R3
0x0196	0x602A    STR	R2, [R5, #0]
;__Lib_GPIO_G0xx.c, 125 :: 		
0x0198	0x008A    LSLS	R2, R1, #2
; pin end address is: 4 (R1)
0x019A	0x4603    MOV	R3, R0
0x019C	0x4093    LSLS	R3, R2
; af end address is: 0 (R0)
0x019E	0x682A    LDR	R2, [R5, #0]
0x01A0	0x431A    ORRS	R2, R3
0x01A2	0x602A    STR	R2, [R5, #0]
; altFcnBase end address is: 20 (R5)
;__Lib_GPIO_G0xx.c, 126 :: 		
L_end_GPIO_Config_Pin_Alternate_Function:
0x01A4	0xB003    ADD	SP, SP, #12
0x01A6	0xBD00    POP	(R15)
0x01A8	0x00005000  	#1342177280
0x01AC	0x04005000  	#1342178304
0x01B0	0x08005000  	#1342179328
0x01B4	0x0C005000  	#1342180352
0x01B8	0x14005000  	#1342182400
; end of __Lib_GPIO_G0xx_GPIO_Config_Pin_Alternate_Function
_vSPI1Init:
;driverspi.c, 143 :: 		void vSPI1Init( void ) {
0x15BC	0xB500    PUSH	(R14)
;driverspi.c, 145 :: 		RCC_IOPENRbits.IOPAEN       = 1;      // GPIOA Enabled
0x15BE	0x4A8C    LDR	R2, [PC, #560]
0x15C0	0x6810    LDR	R0, [R2, #0]
0x15C2	0x2101    MOVS	R1, #1
0x15C4	0x4308    ORRS	R0, R1
0x15C6	0x6010    STR	R0, [R2, #0]
;driverspi.c, 146 :: 		GPIOA_MODERbits.MODER5      = 2;      // Altern Function
0x15C8	0x498A    LDR	R1, [PC, #552]
0x15CA	0x488B    LDR	R0, [PC, #556]
0x15CC	0x8800    LDRH	R0, [R0, #0]
0x15CE	0x4041    EORS	R1, R0
0x15D0	0xB289    UXTH	R1, R1
0x15D2	0x488A    LDR	R0, [PC, #552]
0x15D4	0x4001    ANDS	R1, R0
0x15D6	0xB289    UXTH	R1, R1
0x15D8	0x4887    LDR	R0, [PC, #540]
0x15DA	0x8800    LDRH	R0, [R0, #0]
0x15DC	0x4041    EORS	R1, R0
0x15DE	0xB289    UXTH	R1, R1
0x15E0	0x4885    LDR	R0, [PC, #532]
0x15E2	0x8001    STRH	R1, [R0, #0]
;driverspi.c, 147 :: 		GPIOA_OTYPERbits.OT5        = 0;      // push pull
0x15E4	0x4A86    LDR	R2, [PC, #536]
0x15E6	0x6810    LDR	R0, [R2, #0]
0x15E8	0x2120    MOVS	R1, #32
0x15EA	0x4388    BICS	R0, R1
0x15EC	0x6010    STR	R0, [R2, #0]
;driverspi.c, 148 :: 		GPIOA_OSPEEDRbits.OSPEEDR5  = 0;      // high Speed
0x15EE	0x4885    LDR	R0, [PC, #532]
0x15F0	0x8801    LDRH	R1, [R0, #0]
0x15F2	0x4885    LDR	R0, [PC, #532]
0x15F4	0x4001    ANDS	R1, R0
0x15F6	0x0509    LSLS	R1, R1, #20
0x15F8	0x0F89    LSRS	R1, R1, #30
0x15FA	0x4882    LDR	R0, [PC, #520]
0x15FC	0x8001    STRH	R1, [R0, #0]
;driverspi.c, 149 :: 		GPIOA_PUPDRbits.PUPDR5      = 0;      // no PU or PD
0x15FE	0x4883    LDR	R0, [PC, #524]
0x1600	0x8801    LDRH	R1, [R0, #0]
0x1602	0x4883    LDR	R0, [PC, #524]
0x1604	0x4001    ANDS	R1, R0
0x1606	0x0509    LSLS	R1, R1, #20
0x1608	0x0F89    LSRS	R1, R1, #30
0x160A	0x4880    LDR	R0, [PC, #512]
0x160C	0x8001    STRH	R1, [R0, #0]
;driverspi.c, 150 :: 		GPIOA_AFRLbits.AFSEL5       = 0;      // AF0
0x160E	0x4881    LDR	R0, [PC, #516]
0x1610	0x6801    LDR	R1, [R0, #0]
0x1612	0x4881    LDR	R0, [PC, #516]
0x1614	0x4001    ANDS	R1, R0
0x1616	0x487F    LDR	R0, [PC, #508]
0x1618	0x6001    STR	R1, [R0, #0]
;driverspi.c, 152 :: 		GPIOA_MODERbits.MODER6      = 2;      // Altern Function
0x161A	0x4980    LDR	R1, [PC, #512]
0x161C	0x4876    LDR	R0, [PC, #472]
0x161E	0x8800    LDRH	R0, [R0, #0]
0x1620	0x4041    EORS	R1, R0
0x1622	0xB289    UXTH	R1, R1
0x1624	0x487E    LDR	R0, [PC, #504]
0x1626	0x4001    ANDS	R1, R0
0x1628	0xB289    UXTH	R1, R1
0x162A	0x4873    LDR	R0, [PC, #460]
0x162C	0x8800    LDRH	R0, [R0, #0]
0x162E	0x4041    EORS	R1, R0
0x1630	0xB289    UXTH	R1, R1
0x1632	0x4871    LDR	R0, [PC, #452]
0x1634	0x8001    STRH	R1, [R0, #0]
;driverspi.c, 153 :: 		GPIOA_OTYPERbits.OT6        = 0;      // push pull
0x1636	0x4A72    LDR	R2, [PC, #456]
0x1638	0x6810    LDR	R0, [R2, #0]
0x163A	0x2140    MOVS	R1, #64
0x163C	0x4388    BICS	R0, R1
0x163E	0x6010    STR	R0, [R2, #0]
;driverspi.c, 154 :: 		GPIOA_OSPEEDRbits.OSPEEDR6  = 0;      // high Speed
0x1640	0x4870    LDR	R0, [PC, #448]
0x1642	0x8801    LDRH	R1, [R0, #0]
0x1644	0x4877    LDR	R0, [PC, #476]
0x1646	0x4001    ANDS	R1, R0
0x1648	0x0489    LSLS	R1, R1, #18
0x164A	0x0F89    LSRS	R1, R1, #30
0x164C	0x486D    LDR	R0, [PC, #436]
0x164E	0x8001    STRH	R1, [R0, #0]
;driverspi.c, 155 :: 		GPIOA_PUPDRbits.PUPDR6      = 0;      // no PU or PD
0x1650	0x486E    LDR	R0, [PC, #440]
0x1652	0x8801    LDRH	R1, [R0, #0]
0x1654	0x4874    LDR	R0, [PC, #464]
0x1656	0x4001    ANDS	R1, R0
0x1658	0x0489    LSLS	R1, R1, #18
0x165A	0x0F89    LSRS	R1, R1, #30
0x165C	0x486B    LDR	R0, [PC, #428]
0x165E	0x8001    STRH	R1, [R0, #0]
;driverspi.c, 156 :: 		GPIOA_AFRLbits.AFSEL6       = 0;      // AF0
0x1660	0x486C    LDR	R0, [PC, #432]
0x1662	0x6801    LDR	R1, [R0, #0]
0x1664	0x4871    LDR	R0, [PC, #452]
0x1666	0x4001    ANDS	R1, R0
0x1668	0x486A    LDR	R0, [PC, #424]
0x166A	0x6001    STR	R1, [R0, #0]
;driverspi.c, 158 :: 		GPIOA_MODERbits.MODER7      = 2;      // Altern Function
0x166C	0x4970    LDR	R1, [PC, #448]
0x166E	0x4862    LDR	R0, [PC, #392]
0x1670	0x8800    LDRH	R0, [R0, #0]
0x1672	0x4041    EORS	R1, R0
0x1674	0xB289    UXTH	R1, R1
0x1676	0x486F    LDR	R0, [PC, #444]
0x1678	0x4001    ANDS	R1, R0
0x167A	0xB289    UXTH	R1, R1
0x167C	0x485E    LDR	R0, [PC, #376]
0x167E	0x8800    LDRH	R0, [R0, #0]
0x1680	0x4041    EORS	R1, R0
0x1682	0xB289    UXTH	R1, R1
0x1684	0x485C    LDR	R0, [PC, #368]
0x1686	0x8001    STRH	R1, [R0, #0]
;driverspi.c, 159 :: 		GPIOA_OTYPERbits.OT7        = 0;      // push pull
0x1688	0x4A5D    LDR	R2, [PC, #372]
0x168A	0x6810    LDR	R0, [R2, #0]
0x168C	0x2180    MOVS	R1, #128
0x168E	0x4388    BICS	R0, R1
0x1690	0x6010    STR	R0, [R2, #0]
;driverspi.c, 160 :: 		GPIOA_OSPEEDRbits.OSPEEDR7  = 0;      // high Speed
0x1692	0x485C    LDR	R0, [PC, #368]
0x1694	0x8801    LDRH	R1, [R0, #0]
0x1696	0x4868    LDR	R0, [PC, #416]
0x1698	0x4001    ANDS	R1, R0
0x169A	0x0409    LSLS	R1, R1, #16
0x169C	0x0F89    LSRS	R1, R1, #30
0x169E	0x4859    LDR	R0, [PC, #356]
0x16A0	0x8001    STRH	R1, [R0, #0]
;driverspi.c, 161 :: 		GPIOA_PUPDRbits.PUPDR7      = 0;      // no PU or PD
0x16A2	0x485A    LDR	R0, [PC, #360]
0x16A4	0x8801    LDRH	R1, [R0, #0]
0x16A6	0x4865    LDR	R0, [PC, #404]
0x16A8	0x4001    ANDS	R1, R0
0x16AA	0x0409    LSLS	R1, R1, #16
0x16AC	0x0F89    LSRS	R1, R1, #30
0x16AE	0x4857    LDR	R0, [PC, #348]
0x16B0	0x8001    STRH	R1, [R0, #0]
;driverspi.c, 162 :: 		GPIOA_AFRLbits.AFSEL7       = 0;      // AF0
0x16B2	0x4858    LDR	R0, [PC, #352]
0x16B4	0x6801    LDR	R1, [R0, #0]
0x16B6	0x4862    LDR	R0, [PC, #392]
0x16B8	0x4001    ANDS	R1, R0
0x16BA	0x4856    LDR	R0, [PC, #344]
0x16BC	0x6001    STR	R1, [R0, #0]
;driverspi.c, 165 :: 		RCC_APBENR2bits.SPI1EN      = 1;
0x16BE	0x4A61    LDR	R2, [PC, #388]
0x16C0	0x6810    LDR	R0, [R2, #0]
0x16C2	0x2101    MOVS	R1, #1
0x16C4	0x0309    LSLS	R1, R1, #12
0x16C6	0x4308    ORRS	R0, R1
0x16C8	0x6010    STR	R0, [R2, #0]
;driverspi.c, 167 :: 		SPI1_CR1bits.CPHA           = 0;      // 1 if TI enabled
0x16CA	0x4A5F    LDR	R2, [PC, #380]
0x16CC	0x6810    LDR	R0, [R2, #0]
0x16CE	0x2101    MOVS	R1, #1
0x16D0	0x4388    BICS	R0, R1
0x16D2	0x6010    STR	R0, [R2, #0]
;driverspi.c, 168 :: 		SPI1_CR1bits.CPOL           = 0;
0x16D4	0x4A5C    LDR	R2, [PC, #368]
0x16D6	0x6810    LDR	R0, [R2, #0]
0x16D8	0x2102    MOVS	R1, #2
0x16DA	0x4388    BICS	R0, R1
0x16DC	0x6010    STR	R0, [R2, #0]
;driverspi.c, 169 :: 		SPI1_CR1bits.LSBFIRST       = 0;
0x16DE	0x4A5A    LDR	R2, [PC, #360]
0x16E0	0x6810    LDR	R0, [R2, #0]
0x16E2	0x2180    MOVS	R1, #128
0x16E4	0x4388    BICS	R0, R1
0x16E6	0x6010    STR	R0, [R2, #0]
;driverspi.c, 170 :: 		SPI1_CR1bits.SSM            = 1;
0x16E8	0x4A57    LDR	R2, [PC, #348]
0x16EA	0x6810    LDR	R0, [R2, #0]
0x16EC	0x2101    MOVS	R1, #1
0x16EE	0x0249    LSLS	R1, R1, #9
0x16F0	0x4308    ORRS	R0, R1
0x16F2	0x6010    STR	R0, [R2, #0]
;driverspi.c, 171 :: 		SPI1_CR1bits.SSI            = 1;
0x16F4	0x4A54    LDR	R2, [PC, #336]
0x16F6	0x6810    LDR	R0, [R2, #0]
0x16F8	0x2101    MOVS	R1, #1
0x16FA	0x0209    LSLS	R1, R1, #8
0x16FC	0x4308    ORRS	R0, R1
0x16FE	0x6010    STR	R0, [R2, #0]
;driverspi.c, 172 :: 		SPI1_CR1bits.MSTR           = 1;
0x1700	0x4A51    LDR	R2, [PC, #324]
0x1702	0x6810    LDR	R0, [R2, #0]
0x1704	0x2104    MOVS	R1, #4
0x1706	0x4308    ORRS	R0, R1
0x1708	0x6010    STR	R0, [R2, #0]
;driverspi.c, 173 :: 		SPI1_CR1bits.CRCNEXT        = 0;
0x170A	0x4A4F    LDR	R2, [PC, #316]
0x170C	0x6810    LDR	R0, [R2, #0]
0x170E	0x2101    MOVS	R1, #1
0x1710	0x0309    LSLS	R1, R1, #12
0x1712	0x4388    BICS	R0, R1
0x1714	0x6010    STR	R0, [R2, #0]
;driverspi.c, 175 :: 		SPI1_CR2bits.FRF            = 0;
0x1716	0x4A4D    LDR	R2, [PC, #308]
0x1718	0x6810    LDR	R0, [R2, #0]
0x171A	0x2110    MOVS	R1, #16
0x171C	0x4388    BICS	R0, R1
0x171E	0x6010    STR	R0, [R2, #0]
;driverspi.c, 176 :: 		SPI1_CR2bits.DS             = 7;      // 8 bits empaquetado
0x1720	0x494B    LDR	R1, [PC, #300]
0x1722	0x484A    LDR	R0, [PC, #296]
0x1724	0x8800    LDRH	R0, [R0, #0]
0x1726	0x4041    EORS	R1, R0
0x1728	0xB289    UXTH	R1, R1
0x172A	0x484A    LDR	R0, [PC, #296]
0x172C	0x4001    ANDS	R1, R0
0x172E	0xB289    UXTH	R1, R1
0x1730	0x4846    LDR	R0, [PC, #280]
0x1732	0x8800    LDRH	R0, [R0, #0]
0x1734	0x4041    EORS	R1, R0
0x1736	0xB289    UXTH	R1, R1
0x1738	0x4844    LDR	R0, [PC, #272]
0x173A	0x8001    STRH	R1, [R0, #0]
;driverspi.c, 177 :: 		SPI1_CR2bits.SSOE           = 0;
0x173C	0x4A43    LDR	R2, [PC, #268]
0x173E	0x6810    LDR	R0, [R2, #0]
0x1740	0x2104    MOVS	R1, #4
0x1742	0x4388    BICS	R0, R1
0x1744	0x6010    STR	R0, [R2, #0]
;driverspi.c, 178 :: 		SPI1_CR2bits.NSSP           = 1;
0x1746	0x4A41    LDR	R2, [PC, #260]
0x1748	0x6810    LDR	R0, [R2, #0]
0x174A	0x2108    MOVS	R1, #8
0x174C	0x4308    ORRS	R0, R1
0x174E	0x6010    STR	R0, [R2, #0]
;driverspi.c, 179 :: 		SPI1_CR2bits.FRXTH          = 1;
0x1750	0x4A3E    LDR	R2, [PC, #248]
0x1752	0x6810    LDR	R0, [R2, #0]
0x1754	0x2101    MOVS	R1, #1
0x1756	0x0309    LSLS	R1, R1, #12
0x1758	0x4308    ORRS	R0, R1
0x175A	0x6010    STR	R0, [R2, #0]
;driverspi.c, 180 :: 		SPI1_CR2bits.TXDMAEN        = 1;
0x175C	0x4A3B    LDR	R2, [PC, #236]
0x175E	0x6810    LDR	R0, [R2, #0]
0x1760	0x2102    MOVS	R1, #2
0x1762	0x4308    ORRS	R0, R1
0x1764	0x6010    STR	R0, [R2, #0]
;driverspi.c, 184 :: 		RCC_AHBENRbits.DMAEN        = 1;
0x1766	0x4A3C    LDR	R2, [PC, #240]
0x1768	0x6810    LDR	R0, [R2, #0]
0x176A	0x2101    MOVS	R1, #1
0x176C	0x4308    ORRS	R0, R1
0x176E	0x6010    STR	R0, [R2, #0]
;driverspi.c, 186 :: 		DMA_CCR1bits.EN = 0;
0x1770	0x4A3A    LDR	R2, [PC, #232]
0x1772	0x6810    LDR	R0, [R2, #0]
0x1774	0x2101    MOVS	R1, #1
0x1776	0x4388    BICS	R0, R1
0x1778	0x6010    STR	R0, [R2, #0]
;driverspi.c, 187 :: 		while ( DMA_CCR1bits.EN );
L_vSPI1Init33:
0x177A	0x4838    LDR	R0, [PC, #224]
0x177C	0x6801    LDR	R1, [R0, #0]
0x177E	0x2001    MOVS	R0, #1
0x1780	0x4008    ANDS	R0, R1
0x1782	0x2800    CMP	R0, #0
0x1784	0xD000    BEQ	L_vSPI1Init34
0x1786	0xE7F8    B	L_vSPI1Init33
L_vSPI1Init34:
;driverspi.c, 189 :: 		PL0_bit = 1;
0x1788	0x4A35    LDR	R2, [PC, #212]
0x178A	0x6810    LDR	R0, [R2, #0]
0x178C	0x2101    MOVS	R1, #1
0x178E	0x0309    LSLS	R1, R1, BitPos(PL0_bit+0)
0x1790	0x4308    ORRS	R0, R1
0x1792	0x6010    STR	R0, [R2, #0]
;driverspi.c, 190 :: 		PL1_bit = 1;
0x1794	0x4A33    LDR	R2, [PC, #204]
0x1796	0x6810    LDR	R0, [R2, #0]
0x1798	0x2101    MOVS	R1, #1
0x179A	0x0349    LSLS	R1, R1, BitPos(PL1_bit+0)
0x179C	0x4308    ORRS	R0, R1
0x179E	0x6010    STR	R0, [R2, #0]
;driverspi.c, 191 :: 		DMA_CCR1bits.MINC           = 1;      // Mem increment
0x17A0	0x4A2E    LDR	R2, [PC, #184]
0x17A2	0x6810    LDR	R0, [R2, #0]
0x17A4	0x2180    MOVS	R1, #128
0x17A6	0x4308    ORRS	R0, R1
0x17A8	0x6010    STR	R0, [R2, #0]
;driverspi.c, 192 :: 		DMA_CCR1bits.DIR_           = 1;      // Read from Memory
0x17AA	0x4A2C    LDR	R2, [PC, #176]
0x17AC	0x6810    LDR	R0, [R2, #0]
0x17AE	0x2110    MOVS	R1, #16
0x17B0	0x4308    ORRS	R0, R1
0x17B2	0x6010    STR	R0, [R2, #0]
;driverspi.c, 193 :: 		DMA_CCR1bits.TEIE           = 1;      // Transfer Error Int
0x17B4	0x4A29    LDR	R2, [PC, #164]
0x17B6	0x6810    LDR	R0, [R2, #0]
0x17B8	0x2108    MOVS	R1, #8
0x17BA	0x4308    ORRS	R0, R1
0x17BC	0x6010    STR	R0, [R2, #0]
;driverspi.c, 194 :: 		DMA_CCR1bits.TCIE           = 1;      // Transfer Complete Int
0x17BE	0x4A27    LDR	R2, [PC, #156]
0x17C0	0x6810    LDR	R0, [R2, #0]
0x17C2	0x2102    MOVS	R1, #2
0x17C4	0x4308    ORRS	R0, R1
0x17C6	0x6010    STR	R0, [R2, #0]
;driverspi.c, 196 :: 		DMA_CPAR1 = ( unsigned long ) &SPI1_DR;    // periferico ruteado
0x17C8	0x4927    LDR	R1, [PC, #156]
0x17CA	0x4828    LDR	R0, [PC, #160]
0x17CC	0x6001    STR	R1, [R0, #0]
;driverspi.c, 198 :: 		NVIC_IntEnable( IVT_INT_DMA_Channel1 );    // habilitacion de interrupcion
0x17CE	0x2019    MOVS	R0, #25
0x17D0	0xF7FFFA0C  BL	_NVIC_IntEnable+0
;driverspi.c, 200 :: 		DMAMUX_C0CRbits.DMAREQ_ID = 17;            // TX_SPI1
0x17D4	0x2111    MOVS	R1, #17
0x17D6	0x4826    LDR	R0, [PC, #152]
0x17D8	0x7800    LDRB	R0, [R0, #0]
0x17DA	0x4041    EORS	R1, R0
0x17DC	0xB2C9    UXTB	R1, R1
0x17DE	0x20FF    MOVS	R0, #255
0x17E0	0x4001    ANDS	R1, R0
0x17E2	0xB2C9    UXTB	R1, R1
0x17E4	0x4822    LDR	R0, [PC, #136]
0x17E6	0x7800    LDRB	R0, [R0, #0]
0x17E8	0x4041    EORS	R1, R0
0x17EA	0xB2C9    UXTB	R1, R1
0x17EC	0xE042    B	#132
0x17EE	0xBF00    NOP
0x17F0	0x10344002  	RCC_IOPENRbits+0
0x17F4	0x08000000  	#2048
0x17F8	0x00005000  	GPIOA_MODERbits+0
0x17FC	0x0C000000  	#3072
0x1800	0x00045000  	GPIOA_OTYPERbits+0
0x1804	0x00085000  	GPIOA_OSPEEDRbits+0
0x1808	0xF3FF0000  	#62463
0x180C	0x000C5000  	GPIOA_PUPDRbits+0
0x1810	0xF3FF0000  	#62463
0x1814	0x00205000  	GPIOA_AFRLbits+0
0x1818	0xFFFFFF0F  	#-15728641
0x181C	0x20000000  	#8192
0x1820	0x30000000  	#12288
0x1824	0xCFFF0000  	#53247
0x1828	0xCFFF0000  	#53247
0x182C	0xFFFFF0FF  	#-251658241
0x1830	0x80000000  	#32768
0x1834	0xC0000000  	#49152
0x1838	0x3FFF0000  	#16383
0x183C	0x3FFF0000  	#16383
0x1840	0xFFFF0FFF  	#268435455
0x1844	0x10404002  	RCC_APBENR2bits+0
0x1848	0x30004001  	SPI1_CR1bits+0
0x184C	0x30044001  	SPI1_CR2bits+0
0x1850	0x07000000  	#1792
0x1854	0x0F000000  	#3840
0x1858	0x10384002  	RCC_AHBENRbits+0
0x185C	0x00084002  	DMA_CCR1bits+0
0x1860	0x00084002  	PL0_bit+0
0x1864	0x00084002  	PL1_bit+0
0x1868	0x300C4001  	SPI1_DR+0
0x186C	0x00104002  	DMA_CPAR1+0
0x1870	0x08004002  	DMAMUX_C0CRbits+0
0x1874	0x4805    LDR	R0, [PC, #20]
0x1876	0x7001    STRB	R1, [R0, #0]
;driverspi.c, 202 :: 		SPI1_CR2bits.RXNEIE = 1;                   // habilita interrupcion de recepcion SPI
0x1878	0x4A05    LDR	R2, [PC, #20]
0x187A	0x6810    LDR	R0, [R2, #0]
0x187C	0x2140    MOVS	R1, #64
0x187E	0x4308    ORRS	R0, R1
0x1880	0x6010    STR	R0, [R2, #0]
;driverspi.c, 204 :: 		NVIC_IntEnable( IVT_INT_SPI1 );
0x1882	0x2029    MOVS	R0, #41
0x1884	0xF7FFF9B2  BL	_NVIC_IntEnable+0
;driverspi.c, 205 :: 		}
L_end_vSPI1Init:
0x1888	0xBD00    POP	(R15)
0x188A	0xBF00    NOP
0x188C	0x08004002  	DMAMUX_C0CRbits+0
0x1890	0x30044001  	SPI1_CR2bits+0
; end of _vSPI1Init
_VRF4463SDNReset:
;driverrf4463pro.c, 947 :: 		void VRF4463SDNReset( void ) {
0x2454	0xB500    PUSH	(R14)
0x2456	0xB081    SUB	SP, SP, #4
;driverrf4463pro.c, 950 :: 		SDN = 1;
0x2458	0x4A23    LDR	R2, [PC, #140]
0x245A	0x6810    LDR	R0, [R2, #0]
0x245C	0x2104    MOVS	R1, #4
0x245E	0x4308    ORRS	R0, R1
0x2460	0x6010    STR	R0, [R2, #0]
;driverrf4463pro.c, 951 :: 		Delay_ms( 6 );        // RF Module reset  DELAY
0x2462	0x4F02    LDR	R7, [PC, #8]
0x2464	0xBF00    NOP
L_VRF4463SDNReset177:
0x2466	0x1E7F    SUBS	R7, R7, #1
0x2468	0xD1FD    BNE	L_VRF4463SDNReset177
0x246A	0xE002    B	#4
0x246C	0x5DBF0000  	#23999
0x2470	0xBF00    NOP
;driverrf4463pro.c, 952 :: 		SDN = 0;
0x2472	0x4A1D    LDR	R2, [PC, #116]
0x2474	0x6810    LDR	R0, [R2, #0]
0x2476	0x2104    MOVS	R1, #4
0x2478	0x4388    BICS	R0, R1
0x247A	0x6010    STR	R0, [R2, #0]
;driverrf4463pro.c, 953 :: 		Delay_ms( 10 );       // Delay 10ms for RF module to enter working state
0x247C	0x4F02    LDR	R7, [PC, #8]
0x247E	0xBF00    NOP
L_VRF4463SDNReset179:
0x2480	0x1E7F    SUBS	R7, R7, #1
0x2482	0xD1FD    BNE	L_VRF4463SDNReset179
0x2484	0xE002    B	#4
0x2486	0xBF00    NOP
0x2488	0x9C3F0000  	#39999
;driverrf4463pro.c, 955 :: 		nSEL = 1;
0x248C	0x4A17    LDR	R2, [PC, #92]
0x248E	0x6810    LDR	R0, [R2, #0]
0x2490	0x2108    MOVS	R1, #8
0x2492	0x4308    ORRS	R0, R1
0x2494	0x6010    STR	R0, [R2, #0]
;driverrf4463pro.c, 956 :: 		nSEL = 0;
0x2496	0x4A15    LDR	R2, [PC, #84]
0x2498	0x6810    LDR	R0, [R2, #0]
0x249A	0x2108    MOVS	R1, #8
0x249C	0x4388    BICS	R0, R1
0x249E	0x6010    STR	R0, [R2, #0]
;driverrf4463pro.c, 957 :: 		for ( i = 0; i < 7; i++ ) {
0x24A0	0x2000    MOVS	R0, #0
0x24A2	0x9000    STR	R0, [SP, #0]
L_VRF4463SDNReset181:
0x24A4	0x9800    LDR	R0, [SP, #0]
0x24A6	0xB2C0    UXTB	R0, R0
0x24A8	0x2807    CMP	R0, #7
0x24AA	0xD20D    BCS	L_VRF4463SDNReset182
;driverrf4463pro.c, 958 :: 		ucRf4463SPIByte( RF_POWER_UP_data[ i ] );   // send power up Command
0x24AC	0x9900    LDR	R1, [SP, #0]
0x24AE	0xB2C9    UXTB	R1, R1
0x24B0	0x480F    LDR	R0, [PC, #60]
0x24B2	0x1840    ADDS	R0, R0, R1
0x24B4	0x7800    LDRB	R0, [R0, #0]
0x24B6	0xB401    PUSH	(R0)
0x24B8	0xF7FDFF48  BL	_ucRf4463SPIByte+0
0x24BC	0xB001    ADD	SP, SP, #4
;driverrf4463pro.c, 957 :: 		for ( i = 0; i < 7; i++ ) {
0x24BE	0x9800    LDR	R0, [SP, #0]
0x24C0	0xB2C0    UXTB	R0, R0
0x24C2	0x3001    ADDS	R0, #1
0x24C4	0x9000    STR	R0, [SP, #0]
;driverrf4463pro.c, 959 :: 		}
0x24C6	0xE7ED    B	L_VRF4463SDNReset181
L_VRF4463SDNReset182:
;driverrf4463pro.c, 960 :: 		nSEL = 1;
0x24C8	0x4A08    LDR	R2, [PC, #32]
0x24CA	0x6810    LDR	R0, [R2, #0]
0x24CC	0x2108    MOVS	R1, #8
0x24CE	0x4308    ORRS	R0, R1
0x24D0	0x6010    STR	R0, [R2, #0]
;driverrf4463pro.c, 962 :: 		Delay_ms( 20 );       // Delay 20ms RF module enters working state, but CTS still needs to be judged later, this delay can be removed
0x24D2	0x4F02    LDR	R7, [PC, #8]
0x24D4	0xBF00    NOP
L_VRF4463SDNReset184:
0x24D6	0x1E7F    SUBS	R7, R7, #1
0x24D8	0xD1FD    BNE	L_VRF4463SDNReset184
0x24DA	0xE002    B	#4
0x24DC	0x387F0001  	#79999
0x24E0	0xBF00    NOP
;driverrf4463pro.c, 963 :: 		}
L_end_VRF4463SDNReset:
0x24E2	0xB001    ADD	SP, SP, #4
0x24E4	0xBD00    POP	(R15)
0x24E6	0xBF00    NOP
0x24E8	0x04145000  	GPIOB_ODRbits+0
0x24EC	0x00145000  	GPIOA_ODRbits+0
0x24F0	0x34580000  	_RF_POWER_UP_data+0
; end of _VRF4463SDNReset
_ucRf4463SPIByte:
;driverrf4463pro.c, 758 :: 		unsigned char ucRf4463SPIByte( unsigned char ucData ) {
0x034C	0xB500    PUSH	(R14)
;driverrf4463pro.c, 797 :: 		ucSPI1ByteReceived = 0;
0x034E	0x2100    MOVS	R1, #0
0x0350	0x4809    LDR	R0, [PC, #36]
0x0352	0x7001    STRB	R1, [R0, #0]
;driverrf4463pro.c, 799 :: 		vRF4463SpiBufferTX ( &ucData, 1 );
0x0354	0x2001    MOVS	R0, #1
0x0356	0xB401    PUSH	(R0)
0x0358	0x2008    MOVS	R0, #8
0x035A	0x4468    ADD	R0, SP, R0
0x035C	0xB401    PUSH	(R0)
0x035E	0xF7FFFF2D  BL	_vRF4463SpiBufferTX+0
0x0362	0xB002    ADD	SP, SP, #8
;driverrf4463pro.c, 801 :: 		while ( SPI1_SRbits.RXNE );
L_ucRf4463SPIByte143:
0x0364	0x4805    LDR	R0, [PC, #20]
0x0366	0x6801    LDR	R1, [R0, #0]
0x0368	0x2001    MOVS	R0, #1
0x036A	0x4008    ANDS	R0, R1
0x036C	0x2800    CMP	R0, #0
0x036E	0xD000    BEQ	L_ucRf4463SPIByte144
0x0370	0xE7F8    B	L_ucRf4463SPIByte143
L_ucRf4463SPIByte144:
;driverrf4463pro.c, 807 :: 		return ( ucSPI1ByteReceived );
0x0372	0x4801    LDR	R0, [PC, #4]
0x0374	0x7800    LDRB	R0, [R0, #0]
;driverrf4463pro.c, 809 :: 		}
L_end_ucRf4463SPIByte:
0x0376	0xBD00    POP	(R15)
0x0378	0x008E2000  	_ucSPI1ByteReceived+0
0x037C	0x30084001  	SPI1_SRbits+0
; end of _ucRf4463SPIByte
_vRF4463SpiBufferTX:
;driverspi.c, 115 :: 		char vRF4463SpiBufferTX ( unsigned long *ucBuffer, unsigned long ulSize ) {
0x01BC	0xB500    PUSH	(R14)
;driverspi.c, 117 :: 		while ( DMA_CCR1bits.EN || !SPI1_SRbits.TXE );
L_vRF4463SpiBufferTX16:
0x01BE	0x4833    LDR	R0, [PC, #204]
0x01C0	0x6801    LDR	R1, [R0, #0]
0x01C2	0x2001    MOVS	R0, #1
0x01C4	0x4008    ANDS	R0, R1
0x01C6	0x2800    CMP	R0, #0
0x01C8	0xD107    BNE	L__vRF4463SpiBufferTX250
0x01CA	0x4831    LDR	R0, [PC, #196]
0x01CC	0x6801    LDR	R1, [R0, #0]
0x01CE	0x2002    MOVS	R0, #2
0x01D0	0x4008    ANDS	R0, R1
0x01D2	0x0840    LSRS	R0, R0, #1
0x01D4	0x2800    CMP	R0, #0
0x01D6	0xD000    BEQ	L__vRF4463SpiBufferTX250
0x01D8	0xE000    B	L_vRF4463SpiBufferTX17
L__vRF4463SpiBufferTX250:
0x01DA	0xE7F0    B	L_vRF4463SpiBufferTX16
L_vRF4463SpiBufferTX17:
;driverspi.c, 119 :: 		SPI1_CR1bits.SPE = 1;                         // habilita el periferico
0x01DC	0x4A2D    LDR	R2, [PC, #180]
0x01DE	0x6810    LDR	R0, [R2, #0]
0x01E0	0x2140    MOVS	R1, #64
0x01E2	0x4308    ORRS	R0, R1
0x01E4	0x6010    STR	R0, [R2, #0]
;driverspi.c, 121 :: 		if ( SPI1_CR1bits.SPE && SPI1_SRbits.TXE && ulSize > 0 ) { // la transmision anterior termino?
0x01E6	0x482B    LDR	R0, [PC, #172]
0x01E8	0x6801    LDR	R1, [R0, #0]
0x01EA	0x2040    MOVS	R0, #64
0x01EC	0x4008    ANDS	R0, R1
0x01EE	0x0980    LSRS	R0, R0, #6
0x01F0	0x2800    CMP	R0, #0
0x01F2	0xD100    BNE	#0
0x01F4	0xE047    B	L_vRF4463SpiBufferTX22
0x01F6	0x4826    LDR	R0, [PC, #152]
0x01F8	0x6801    LDR	R1, [R0, #0]
0x01FA	0x2002    MOVS	R0, #2
0x01FC	0x4008    ANDS	R0, R1
0x01FE	0x0840    LSRS	R0, R0, #1
0x0200	0x2800    CMP	R0, #0
0x0202	0xD040    BEQ	L_vRF4463SpiBufferTX22
0x0204	0x9802    LDR	R0, [SP, #8]
0x0206	0x2800    CMP	R0, #0
0x0208	0xD93D    BLS	L_vRF4463SpiBufferTX22
L__vRF4463SpiBufferTX249:
;driverspi.c, 122 :: 		DMA_CCR1bits.EN = 0;                       // Desabilita la recepcion para poder modificar los par?metros
0x020A	0x4A20    LDR	R2, [PC, #128]
0x020C	0x6810    LDR	R0, [R2, #0]
0x020E	0x2101    MOVS	R1, #1
0x0210	0x4388    BICS	R0, R1
0x0212	0x6010    STR	R0, [R2, #0]
;driverspi.c, 123 :: 		while ( DMA_CCR1bits.EN );                 // espera a que se haya desabilitado realmente
L_vRF4463SpiBufferTX23:
0x0214	0x481D    LDR	R0, [PC, #116]
0x0216	0x6801    LDR	R1, [R0, #0]
0x0218	0x2001    MOVS	R0, #1
0x021A	0x4008    ANDS	R0, R1
0x021C	0x2800    CMP	R0, #0
0x021E	0xD000    BEQ	L_vRF4463SpiBufferTX24
0x0220	0xE7F8    B	L_vRF4463SpiBufferTX23
L_vRF4463SpiBufferTX24:
;driverspi.c, 125 :: 		DMA_CMAR1 = ( unsigned long ) ucBuffer;    // Direccion de la memoria a rutear
0x0222	0x9901    LDR	R1, [SP, #4]
0x0224	0x481C    LDR	R0, [PC, #112]
0x0226	0x6001    STR	R1, [R0, #0]
;driverspi.c, 126 :: 		DMA_CNDTR1 = ulSize;                       // Tamagno de datos a manejar
0x0228	0x9902    LDR	R1, [SP, #8]
0x022A	0x481C    LDR	R0, [PC, #112]
0x022C	0x6001    STR	R1, [R0, #0]
;driverspi.c, 127 :: 		DMA_CCR1bits.EN = 1;
0x022E	0x4A17    LDR	R2, [PC, #92]
0x0230	0x6810    LDR	R0, [R2, #0]
0x0232	0x2101    MOVS	R1, #1
0x0234	0x4308    ORRS	R0, R1
0x0236	0x6010    STR	R0, [R2, #0]
;driverspi.c, 129 :: 		while ( DMA_CNDTR1 > 1 );                  // esperando el fin de la transmision
L_vRF4463SpiBufferTX25:
0x0238	0x4818    LDR	R0, [PC, #96]
0x023A	0x6800    LDR	R0, [R0, #0]
0x023C	0x2801    CMP	R0, #1
0x023E	0xD900    BLS	L_vRF4463SpiBufferTX26
0x0240	0xE7FA    B	L_vRF4463SpiBufferTX25
L_vRF4463SpiBufferTX26:
;driverspi.c, 131 :: 		while ( SPI1_SRbits.FTLVL != 0 );          // SPI1_SRbits.FTLVL != 0
L_vRF4463SpiBufferTX27:
0x0242	0x4813    LDR	R0, [PC, #76]
0x0244	0x8800    LDRH	R0, [R0, #0]
0x0246	0xB281    UXTH	R1, R0
0x0248	0x4815    LDR	R0, [PC, #84]
0x024A	0x4001    ANDS	R1, R0
0x024C	0xB289    UXTH	R1, R1
0x024E	0x0AC9    LSRS	R1, R1, #11
0x0250	0xB289    UXTH	R1, R1
0x0252	0x2900    CMP	R1, #0
0x0254	0xD000    BEQ	L_vRF4463SpiBufferTX28
0x0256	0xE7F4    B	L_vRF4463SpiBufferTX27
L_vRF4463SpiBufferTX28:
;driverspi.c, 133 :: 		while ( SPI1_SRbits.BSY );
L_vRF4463SpiBufferTX29:
0x0258	0x480D    LDR	R0, [PC, #52]
0x025A	0x6801    LDR	R1, [R0, #0]
0x025C	0x2080    MOVS	R0, #128
0x025E	0x4008    ANDS	R0, R1
0x0260	0x09C0    LSRS	R0, R0, #7
0x0262	0x2800    CMP	R0, #0
0x0264	0xD000    BEQ	L_vRF4463SpiBufferTX30
0x0266	0xE7F7    B	L_vRF4463SpiBufferTX29
L_vRF4463SpiBufferTX30:
;driverspi.c, 134 :: 		while ( !SPI1_SRbits.TXE );
L_vRF4463SpiBufferTX31:
0x0268	0x4809    LDR	R0, [PC, #36]
0x026A	0x6801    LDR	R1, [R0, #0]
0x026C	0x2002    MOVS	R0, #2
0x026E	0x4008    ANDS	R0, R1
0x0270	0x0840    LSRS	R0, R0, #1
0x0272	0x2800    CMP	R0, #0
0x0274	0xD100    BNE	L_vRF4463SpiBufferTX32
0x0276	0xE7F7    B	L_vRF4463SpiBufferTX31
L_vRF4463SpiBufferTX32:
;driverspi.c, 136 :: 		DMA_CCR1bits.EN = 0;                       // DEPURACION
0x0278	0x4A04    LDR	R2, [PC, #16]
0x027A	0x6810    LDR	R0, [R2, #0]
0x027C	0x2101    MOVS	R1, #1
0x027E	0x4388    BICS	R0, R1
0x0280	0x6010    STR	R0, [R2, #0]
;driverspi.c, 138 :: 		return 1;
0x0282	0x2001    MOVS	R0, #1
0x0284	0xE000    B	L_end_vRF4463SpiBufferTX
;driverspi.c, 139 :: 		}
L_vRF4463SpiBufferTX22:
;driverspi.c, 140 :: 		return 0;
0x0286	0x2000    MOVS	R0, #0
;driverspi.c, 141 :: 		}
L_end_vRF4463SpiBufferTX:
0x0288	0xBD00    POP	(R15)
0x028A	0xBF00    NOP
0x028C	0x00084002  	DMA_CCR1bits+0
0x0290	0x30084001  	SPI1_SRbits+0
0x0294	0x30004001  	SPI1_CR1bits+0
0x0298	0x00144002  	DMA_CMAR1+0
0x029C	0x000C4002  	DMA_CNDTR1+0
0x02A0	0x18000000  	#6144
; end of _vRF4463SpiBufferTX
_vRF4463Init:
;driverrf4463pro.c, 53 :: 		void vRF4463Init ( void ) {  // MODE,
0x194C	0xB500    PUSH	(R14)
0x194E	0xB086    SUB	SP, SP, #24
;driverrf4463pro.c, 56 :: 		for ( i = 4; i < 16; i++ ) {
0x1950	0x2004    MOVS	R0, #4
0x1952	0x9005    STR	R0, [SP, #20]
L_vRF4463Init36:
0x1954	0x9805    LDR	R0, [SP, #20]
0x1956	0xB2C0    UXTB	R0, R0
0x1958	0x2810    CMP	R0, #16
0x195A	0xD217    BCS	L_vRF4463Init37
;driverrf4463pro.c, 57 :: 		RF_MODEM_MOD_TYPE_12_data[ i ] = RF_MODEM_MOD_TYPE_12[ rate ][ i - 4 ];
0x195C	0x9905    LDR	R1, [SP, #20]
0x195E	0xB2C9    UXTB	R1, R1
0x1960	0x48C3    LDR	R0, [PC, #780]
0x1962	0x1843    ADDS	R3, R0, R1
0x1964	0x48C3    LDR	R0, [PC, #780]
0x1966	0x7802    LDRB	R2, [R0, #0]
0x1968	0x200C    MOVS	R0, #12
0x196A	0x4611    MOV	R1, R2
0x196C	0x4341    MULS	R1, R0, R1
0x196E	0x48C2    LDR	R0, [PC, #776]
0x1970	0x1842    ADDS	R2, R0, R1
0x1972	0x9805    LDR	R0, [SP, #20]
0x1974	0xB2C0    UXTB	R0, R0
0x1976	0x1F01    SUBS	R1, R0, #4
0x1978	0xB209    SXTH	R1, R1
0x197A	0x4610    MOV	R0, R2
0x197C	0x1840    ADDS	R0, R0, R1
0x197E	0x7800    LDRB	R0, [R0, #0]
0x1980	0x7018    STRB	R0, [R3, #0]
;driverrf4463pro.c, 56 :: 		for ( i = 4; i < 16; i++ ) {
0x1982	0x9805    LDR	R0, [SP, #20]
0x1984	0xB2C0    UXTB	R0, R0
0x1986	0x3001    ADDS	R0, #1
0x1988	0x9005    STR	R0, [SP, #20]
;driverrf4463pro.c, 58 :: 		}
0x198A	0xE7E3    B	L_vRF4463Init36
L_vRF4463Init37:
;driverrf4463pro.c, 61 :: 		if ( freq3 < 8 ) {
0x198C	0x48BB    LDR	R0, [PC, #748]
0x198E	0x7800    LDRB	R0, [R0, #0]
0x1990	0x2808    CMP	R0, #8
0x1992	0xD300    BCC	#0
0x1994	0xE0F0    B	L_vRF4463Init39
;driverrf4463pro.c, 62 :: 		for ( i = 4; i < 12; i++ ) {
0x1996	0x2004    MOVS	R0, #4
0x1998	0x9005    STR	R0, [SP, #20]
L_vRF4463Init40:
0x199A	0x9805    LDR	R0, [SP, #20]
0x199C	0xB2C0    UXTB	R0, R0
0x199E	0x280C    CMP	R0, #12
0x19A0	0xD217    BCS	L_vRF4463Init41
;driverrf4463pro.c, 63 :: 		RF_MODEM_TX_RAMP_DELAY_8_data[ i ] = RF_MODEM_TX_RAMP_DELAY_8_433[ rate ][ i - 4 ];
0x19A2	0x9905    LDR	R1, [SP, #20]
0x19A4	0xB2C9    UXTB	R1, R1
0x19A6	0x48B6    LDR	R0, [PC, #728]
0x19A8	0x1843    ADDS	R3, R0, R1
0x19AA	0x48B2    LDR	R0, [PC, #712]
0x19AC	0x7802    LDRB	R2, [R0, #0]
0x19AE	0x2008    MOVS	R0, #8
0x19B0	0x4611    MOV	R1, R2
0x19B2	0x4341    MULS	R1, R0, R1
0x19B4	0x48B3    LDR	R0, [PC, #716]
0x19B6	0x1842    ADDS	R2, R0, R1
0x19B8	0x9805    LDR	R0, [SP, #20]
0x19BA	0xB2C0    UXTB	R0, R0
0x19BC	0x1F01    SUBS	R1, R0, #4
0x19BE	0xB209    SXTH	R1, R1
0x19C0	0x4610    MOV	R0, R2
0x19C2	0x1840    ADDS	R0, R0, R1
0x19C4	0x7800    LDRB	R0, [R0, #0]
0x19C6	0x7018    STRB	R0, [R3, #0]
;driverrf4463pro.c, 62 :: 		for ( i = 4; i < 12; i++ ) {
0x19C8	0x9805    LDR	R0, [SP, #20]
0x19CA	0xB2C0    UXTB	R0, R0
0x19CC	0x3001    ADDS	R0, #1
0x19CE	0x9005    STR	R0, [SP, #20]
;driverrf4463pro.c, 64 :: 		}
0x19D0	0xE7E3    B	L_vRF4463Init40
L_vRF4463Init41:
;driverrf4463pro.c, 65 :: 		for ( i = 4; i < 11; i++ ) {
0x19D2	0x2004    MOVS	R0, #4
0x19D4	0x9005    STR	R0, [SP, #20]
L_vRF4463Init43:
0x19D6	0x9805    LDR	R0, [SP, #20]
0x19D8	0xB2C0    UXTB	R0, R0
0x19DA	0x280B    CMP	R0, #11
0x19DC	0xD217    BCS	L_vRF4463Init44
;driverrf4463pro.c, 66 :: 		RF_MODEM_AFC_GEAR_7_data[ i ] = RF_MODEM_AFC_GEAR_7_433[ rate ][ i - 4 ];
0x19DE	0x9905    LDR	R1, [SP, #20]
0x19E0	0xB2C9    UXTB	R1, R1
0x19E2	0x48A9    LDR	R0, [PC, #676]
0x19E4	0x1843    ADDS	R3, R0, R1
0x19E6	0x48A3    LDR	R0, [PC, #652]
0x19E8	0x7802    LDRB	R2, [R0, #0]
0x19EA	0x2007    MOVS	R0, #7
0x19EC	0x4611    MOV	R1, R2
0x19EE	0x4341    MULS	R1, R0, R1
0x19F0	0x48A6    LDR	R0, [PC, #664]
0x19F2	0x1842    ADDS	R2, R0, R1
0x19F4	0x9805    LDR	R0, [SP, #20]
0x19F6	0xB2C0    UXTB	R0, R0
0x19F8	0x1F01    SUBS	R1, R0, #4
0x19FA	0xB209    SXTH	R1, R1
0x19FC	0x4610    MOV	R0, R2
0x19FE	0x1840    ADDS	R0, R0, R1
0x1A00	0x7800    LDRB	R0, [R0, #0]
0x1A02	0x7018    STRB	R0, [R3, #0]
;driverrf4463pro.c, 65 :: 		for ( i = 4; i < 11; i++ ) {
0x1A04	0x9805    LDR	R0, [SP, #20]
0x1A06	0xB2C0    UXTB	R0, R0
0x1A08	0x3001    ADDS	R0, #1
0x1A0A	0x9005    STR	R0, [SP, #20]
;driverrf4463pro.c, 67 :: 		}
0x1A0C	0xE7E3    B	L_vRF4463Init43
L_vRF4463Init44:
;driverrf4463pro.c, 68 :: 		for ( i = 4; i < 15; i++ ) {
0x1A0E	0x2004    MOVS	R0, #4
0x1A10	0x9005    STR	R0, [SP, #20]
L_vRF4463Init46:
0x1A12	0x9805    LDR	R0, [SP, #20]
0x1A14	0xB2C0    UXTB	R0, R0
0x1A16	0x280F    CMP	R0, #15
0x1A18	0xD217    BCS	L_vRF4463Init47
;driverrf4463pro.c, 69 :: 		RF_MODEM_OOK_CNT1_11_data[ i ] = RF_MODEM_OOK_CNT1_11_433[ rate ][ i - 4 ];
0x1A1A	0x9905    LDR	R1, [SP, #20]
0x1A1C	0xB2C9    UXTB	R1, R1
0x1A1E	0x489C    LDR	R0, [PC, #624]
0x1A20	0x1843    ADDS	R3, R0, R1
0x1A22	0x4894    LDR	R0, [PC, #592]
0x1A24	0x7802    LDRB	R2, [R0, #0]
0x1A26	0x200B    MOVS	R0, #11
0x1A28	0x4611    MOV	R1, R2
0x1A2A	0x4341    MULS	R1, R0, R1
0x1A2C	0x4899    LDR	R0, [PC, #612]
0x1A2E	0x1842    ADDS	R2, R0, R1
0x1A30	0x9805    LDR	R0, [SP, #20]
0x1A32	0xB2C0    UXTB	R0, R0
0x1A34	0x1F01    SUBS	R1, R0, #4
0x1A36	0xB209    SXTH	R1, R1
0x1A38	0x4610    MOV	R0, R2
0x1A3A	0x1840    ADDS	R0, R0, R1
0x1A3C	0x7800    LDRB	R0, [R0, #0]
0x1A3E	0x7018    STRB	R0, [R3, #0]
;driverrf4463pro.c, 68 :: 		for ( i = 4; i < 15; i++ ) {
0x1A40	0x9805    LDR	R0, [SP, #20]
0x1A42	0xB2C0    UXTB	R0, R0
0x1A44	0x3001    ADDS	R0, #1
0x1A46	0x9005    STR	R0, [SP, #20]
;driverrf4463pro.c, 70 :: 		}
0x1A48	0xE7E3    B	L_vRF4463Init46
L_vRF4463Init47:
;driverrf4463pro.c, 71 :: 		for ( i = 4; i < 16; i++ ) {
0x1A4A	0x2004    MOVS	R0, #4
0x1A4C	0x9005    STR	R0, [SP, #20]
L_vRF4463Init49:
0x1A4E	0x9805    LDR	R0, [SP, #20]
0x1A50	0xB2C0    UXTB	R0, R0
0x1A52	0x2810    CMP	R0, #16
0x1A54	0xD217    BCS	L_vRF4463Init50
;driverrf4463pro.c, 72 :: 		RF_MODEM_CHFLT_RX1_CHFLT_COE13_7_0_12_data[ i ] = RF_MODEM_CHFLT_RX1_CHFLT_COE13_7_0_12_433[ rate ][ i - 4 ];
0x1A56	0x9905    LDR	R1, [SP, #20]
0x1A58	0xB2C9    UXTB	R1, R1
0x1A5A	0x488F    LDR	R0, [PC, #572]
0x1A5C	0x1843    ADDS	R3, R0, R1
0x1A5E	0x4885    LDR	R0, [PC, #532]
0x1A60	0x7802    LDRB	R2, [R0, #0]
0x1A62	0x200C    MOVS	R0, #12
0x1A64	0x4611    MOV	R1, R2
0x1A66	0x4341    MULS	R1, R0, R1
0x1A68	0x488C    LDR	R0, [PC, #560]
0x1A6A	0x1842    ADDS	R2, R0, R1
0x1A6C	0x9805    LDR	R0, [SP, #20]
0x1A6E	0xB2C0    UXTB	R0, R0
0x1A70	0x1F01    SUBS	R1, R0, #4
0x1A72	0xB209    SXTH	R1, R1
0x1A74	0x4610    MOV	R0, R2
0x1A76	0x1840    ADDS	R0, R0, R1
0x1A78	0x7800    LDRB	R0, [R0, #0]
0x1A7A	0x7018    STRB	R0, [R3, #0]
;driverrf4463pro.c, 71 :: 		for ( i = 4; i < 16; i++ ) {
0x1A7C	0x9805    LDR	R0, [SP, #20]
0x1A7E	0xB2C0    UXTB	R0, R0
0x1A80	0x3001    ADDS	R0, #1
0x1A82	0x9005    STR	R0, [SP, #20]
;driverrf4463pro.c, 73 :: 		}
0x1A84	0xE7E3    B	L_vRF4463Init49
L_vRF4463Init50:
;driverrf4463pro.c, 74 :: 		for ( i = 4; i < 16; i++ ) {
0x1A86	0x2004    MOVS	R0, #4
0x1A88	0x9005    STR	R0, [SP, #20]
L_vRF4463Init52:
0x1A8A	0x9805    LDR	R0, [SP, #20]
0x1A8C	0xB2C0    UXTB	R0, R0
0x1A8E	0x2810    CMP	R0, #16
0x1A90	0xD217    BCS	L_vRF4463Init53
;driverrf4463pro.c, 75 :: 		RF_MODEM_CHFLT_RX1_CHFLT_COE1_7_0_12_data[ i ] = RF_MODEM_CHFLT_RX1_CHFLT_COE1_7_0_12_433[ rate ][ i - 4 ];
0x1A92	0x9905    LDR	R1, [SP, #20]
0x1A94	0xB2C9    UXTB	R1, R1
0x1A96	0x4882    LDR	R0, [PC, #520]
0x1A98	0x1843    ADDS	R3, R0, R1
0x1A9A	0x4876    LDR	R0, [PC, #472]
0x1A9C	0x7802    LDRB	R2, [R0, #0]
0x1A9E	0x200C    MOVS	R0, #12
0x1AA0	0x4611    MOV	R1, R2
0x1AA2	0x4341    MULS	R1, R0, R1
0x1AA4	0x487F    LDR	R0, [PC, #508]
0x1AA6	0x1842    ADDS	R2, R0, R1
0x1AA8	0x9805    LDR	R0, [SP, #20]
0x1AAA	0xB2C0    UXTB	R0, R0
0x1AAC	0x1F01    SUBS	R1, R0, #4
0x1AAE	0xB209    SXTH	R1, R1
0x1AB0	0x4610    MOV	R0, R2
0x1AB2	0x1840    ADDS	R0, R0, R1
0x1AB4	0x7800    LDRB	R0, [R0, #0]
0x1AB6	0x7018    STRB	R0, [R3, #0]
;driverrf4463pro.c, 74 :: 		for ( i = 4; i < 16; i++ ) {
0x1AB8	0x9805    LDR	R0, [SP, #20]
0x1ABA	0xB2C0    UXTB	R0, R0
0x1ABC	0x3001    ADDS	R0, #1
0x1ABE	0x9005    STR	R0, [SP, #20]
;driverrf4463pro.c, 76 :: 		}
0x1AC0	0xE7E3    B	L_vRF4463Init52
L_vRF4463Init53:
;driverrf4463pro.c, 77 :: 		for ( i = 4; i < 16; i++ ) {
0x1AC2	0x2004    MOVS	R0, #4
0x1AC4	0x9005    STR	R0, [SP, #20]
L_vRF4463Init55:
0x1AC6	0x9805    LDR	R0, [SP, #20]
0x1AC8	0xB2C0    UXTB	R0, R0
0x1ACA	0x2810    CMP	R0, #16
0x1ACC	0xD217    BCS	L_vRF4463Init56
;driverrf4463pro.c, 78 :: 		RF_MODEM_CHFLT_RX2_CHFLT_COE7_7_0_12_data[ i ] = RF_MODEM_CHFLT_RX2_CHFLT_COE7_7_0_12_433[ rate ][ i - 4 ];
0x1ACE	0x9905    LDR	R1, [SP, #20]
0x1AD0	0xB2C9    UXTB	R1, R1
0x1AD2	0x4875    LDR	R0, [PC, #468]
0x1AD4	0x1843    ADDS	R3, R0, R1
0x1AD6	0x4867    LDR	R0, [PC, #412]
0x1AD8	0x7802    LDRB	R2, [R0, #0]
0x1ADA	0x200C    MOVS	R0, #12
0x1ADC	0x4611    MOV	R1, R2
0x1ADE	0x4341    MULS	R1, R0, R1
0x1AE0	0x4872    LDR	R0, [PC, #456]
0x1AE2	0x1842    ADDS	R2, R0, R1
0x1AE4	0x9805    LDR	R0, [SP, #20]
0x1AE6	0xB2C0    UXTB	R0, R0
0x1AE8	0x1F01    SUBS	R1, R0, #4
0x1AEA	0xB209    SXTH	R1, R1
0x1AEC	0x4610    MOV	R0, R2
0x1AEE	0x1840    ADDS	R0, R0, R1
0x1AF0	0x7800    LDRB	R0, [R0, #0]
0x1AF2	0x7018    STRB	R0, [R3, #0]
;driverrf4463pro.c, 77 :: 		for ( i = 4; i < 16; i++ ) {
0x1AF4	0x9805    LDR	R0, [SP, #20]
0x1AF6	0xB2C0    UXTB	R0, R0
0x1AF8	0x3001    ADDS	R0, #1
0x1AFA	0x9005    STR	R0, [SP, #20]
;driverrf4463pro.c, 79 :: 		}
0x1AFC	0xE7E3    B	L_vRF4463Init55
L_vRF4463Init56:
;driverrf4463pro.c, 80 :: 		for ( i = 4; i < 13; i++ ) {
0x1AFE	0x2004    MOVS	R0, #4
0x1B00	0x9005    STR	R0, [SP, #20]
L_vRF4463Init58:
0x1B02	0x9805    LDR	R0, [SP, #20]
0x1B04	0xB2C0    UXTB	R0, R0
0x1B06	0x280D    CMP	R0, #13
0x1B08	0xD217    BCS	L_vRF4463Init59
;driverrf4463pro.c, 81 :: 		RF_MODEM_AGC_WINDOW_SIZE_9_data[ i ] = RF_MODEM_AGC_WINDOW_SIZE_9_433[ rate ][ i - 4 ];
0x1B0A	0x9905    LDR	R1, [SP, #20]
0x1B0C	0xB2C9    UXTB	R1, R1
0x1B0E	0x4868    LDR	R0, [PC, #416]
0x1B10	0x1843    ADDS	R3, R0, R1
0x1B12	0x4858    LDR	R0, [PC, #352]
0x1B14	0x7802    LDRB	R2, [R0, #0]
0x1B16	0x2009    MOVS	R0, #9
0x1B18	0x4611    MOV	R1, R2
0x1B1A	0x4341    MULS	R1, R0, R1
0x1B1C	0x4865    LDR	R0, [PC, #404]
0x1B1E	0x1842    ADDS	R2, R0, R1
0x1B20	0x9805    LDR	R0, [SP, #20]
0x1B22	0xB2C0    UXTB	R0, R0
0x1B24	0x1F01    SUBS	R1, R0, #4
0x1B26	0xB209    SXTH	R1, R1
0x1B28	0x4610    MOV	R0, R2
0x1B2A	0x1840    ADDS	R0, R0, R1
0x1B2C	0x7800    LDRB	R0, [R0, #0]
0x1B2E	0x7018    STRB	R0, [R3, #0]
;driverrf4463pro.c, 80 :: 		for ( i = 4; i < 13; i++ ) {
0x1B30	0x9805    LDR	R0, [SP, #20]
0x1B32	0xB2C0    UXTB	R0, R0
0x1B34	0x3001    ADDS	R0, #1
0x1B36	0x9005    STR	R0, [SP, #20]
;driverrf4463pro.c, 82 :: 		}
0x1B38	0xE7E3    B	L_vRF4463Init58
L_vRF4463Init59:
;driverrf4463pro.c, 83 :: 		for ( i = 4; i < 13; i++ ) {
0x1B3A	0x2004    MOVS	R0, #4
0x1B3C	0x9005    STR	R0, [SP, #20]
L_vRF4463Init61:
0x1B3E	0x9805    LDR	R0, [SP, #20]
0x1B40	0xB2C0    UXTB	R0, R0
0x1B42	0x280D    CMP	R0, #13
0x1B44	0xD217    BCS	L_vRF4463Init62
;driverrf4463pro.c, 84 :: 		RF_MODEM_BCR_OSR_1_9_data[ i ] = RF_MODEM_BCR_OSR_1_9_433[ rate ][ i - 4 ];
0x1B46	0x9905    LDR	R1, [SP, #20]
0x1B48	0xB2C9    UXTB	R1, R1
0x1B4A	0x485B    LDR	R0, [PC, #364]
0x1B4C	0x1843    ADDS	R3, R0, R1
0x1B4E	0x4849    LDR	R0, [PC, #292]
0x1B50	0x7802    LDRB	R2, [R0, #0]
0x1B52	0x2009    MOVS	R0, #9
0x1B54	0x4611    MOV	R1, R2
0x1B56	0x4341    MULS	R1, R0, R1
0x1B58	0x4858    LDR	R0, [PC, #352]
0x1B5A	0x1842    ADDS	R2, R0, R1
0x1B5C	0x9805    LDR	R0, [SP, #20]
0x1B5E	0xB2C0    UXTB	R0, R0
0x1B60	0x1F01    SUBS	R1, R0, #4
0x1B62	0xB209    SXTH	R1, R1
0x1B64	0x4610    MOV	R0, R2
0x1B66	0x1840    ADDS	R0, R0, R1
0x1B68	0x7800    LDRB	R0, [R0, #0]
0x1B6A	0x7018    STRB	R0, [R3, #0]
;driverrf4463pro.c, 83 :: 		for ( i = 4; i < 13; i++ ) {
0x1B6C	0x9805    LDR	R0, [SP, #20]
0x1B6E	0xB2C0    UXTB	R0, R0
0x1B70	0x3001    ADDS	R0, #1
0x1B72	0x9005    STR	R0, [SP, #20]
;driverrf4463pro.c, 85 :: 		}
0x1B74	0xE7E3    B	L_vRF4463Init61
L_vRF4463Init62:
;driverrf4463pro.c, 86 :: 		}
0x1B76	0xE120    B	L_vRF4463Init64
L_vRF4463Init39:
;driverrf4463pro.c, 88 :: 		for ( i = 4; i < 12; i++ ) {
0x1B78	0x2004    MOVS	R0, #4
0x1B7A	0x9005    STR	R0, [SP, #20]
L_vRF4463Init65:
0x1B7C	0x9805    LDR	R0, [SP, #20]
0x1B7E	0xB2C0    UXTB	R0, R0
0x1B80	0x280C    CMP	R0, #12
0x1B82	0xD217    BCS	L_vRF4463Init66
;driverrf4463pro.c, 89 :: 		RF_MODEM_TX_RAMP_DELAY_8_data[ i ] = RF_MODEM_TX_RAMP_DELAY_8_850[ rate ][ i - 4 ];
0x1B84	0x9905    LDR	R1, [SP, #20]
0x1B86	0xB2C9    UXTB	R1, R1
0x1B88	0x483D    LDR	R0, [PC, #244]
0x1B8A	0x1843    ADDS	R3, R0, R1
0x1B8C	0x4839    LDR	R0, [PC, #228]
0x1B8E	0x7802    LDRB	R2, [R0, #0]
0x1B90	0x2008    MOVS	R0, #8
0x1B92	0x4611    MOV	R1, R2
0x1B94	0x4341    MULS	R1, R0, R1
0x1B96	0x484A    LDR	R0, [PC, #296]
0x1B98	0x1842    ADDS	R2, R0, R1
0x1B9A	0x9805    LDR	R0, [SP, #20]
0x1B9C	0xB2C0    UXTB	R0, R0
0x1B9E	0x1F01    SUBS	R1, R0, #4
0x1BA0	0xB209    SXTH	R1, R1
0x1BA2	0x4610    MOV	R0, R2
0x1BA4	0x1840    ADDS	R0, R0, R1
0x1BA6	0x7800    LDRB	R0, [R0, #0]
0x1BA8	0x7018    STRB	R0, [R3, #0]
;driverrf4463pro.c, 88 :: 		for ( i = 4; i < 12; i++ ) {
0x1BAA	0x9805    LDR	R0, [SP, #20]
0x1BAC	0xB2C0    UXTB	R0, R0
0x1BAE	0x3001    ADDS	R0, #1
0x1BB0	0x9005    STR	R0, [SP, #20]
;driverrf4463pro.c, 90 :: 		}
0x1BB2	0xE7E3    B	L_vRF4463Init65
L_vRF4463Init66:
;driverrf4463pro.c, 91 :: 		for ( i = 4; i < 11; i++ ) {
0x1BB4	0x2004    MOVS	R0, #4
0x1BB6	0x9005    STR	R0, [SP, #20]
L_vRF4463Init68:
0x1BB8	0x9805    LDR	R0, [SP, #20]
0x1BBA	0xB2C0    UXTB	R0, R0
0x1BBC	0x280B    CMP	R0, #11
0x1BBE	0xD217    BCS	L_vRF4463Init69
;driverrf4463pro.c, 92 :: 		RF_MODEM_AFC_GEAR_7_data[ i ] = RF_MODEM_AFC_GEAR_7_850[ rate ][ i - 4 ];
0x1BC0	0x9905    LDR	R1, [SP, #20]
0x1BC2	0xB2C9    UXTB	R1, R1
0x1BC4	0x4830    LDR	R0, [PC, #192]
0x1BC6	0x1843    ADDS	R3, R0, R1
0x1BC8	0x482A    LDR	R0, [PC, #168]
0x1BCA	0x7802    LDRB	R2, [R0, #0]
0x1BCC	0x2007    MOVS	R0, #7
0x1BCE	0x4611    MOV	R1, R2
0x1BD0	0x4341    MULS	R1, R0, R1
0x1BD2	0x483C    LDR	R0, [PC, #240]
0x1BD4	0x1842    ADDS	R2, R0, R1
0x1BD6	0x9805    LDR	R0, [SP, #20]
0x1BD8	0xB2C0    UXTB	R0, R0
0x1BDA	0x1F01    SUBS	R1, R0, #4
0x1BDC	0xB209    SXTH	R1, R1
0x1BDE	0x4610    MOV	R0, R2
0x1BE0	0x1840    ADDS	R0, R0, R1
0x1BE2	0x7800    LDRB	R0, [R0, #0]
0x1BE4	0x7018    STRB	R0, [R3, #0]
;driverrf4463pro.c, 91 :: 		for ( i = 4; i < 11; i++ ) {
0x1BE6	0x9805    LDR	R0, [SP, #20]
0x1BE8	0xB2C0    UXTB	R0, R0
0x1BEA	0x3001    ADDS	R0, #1
0x1BEC	0x9005    STR	R0, [SP, #20]
;driverrf4463pro.c, 93 :: 		}
0x1BEE	0xE7E3    B	L_vRF4463Init68
L_vRF4463Init69:
;driverrf4463pro.c, 94 :: 		for ( i = 4; i < 15; i++ ) {
0x1BF0	0x2004    MOVS	R0, #4
0x1BF2	0x9005    STR	R0, [SP, #20]
L_vRF4463Init71:
0x1BF4	0x9805    LDR	R0, [SP, #20]
0x1BF6	0xB2C0    UXTB	R0, R0
0x1BF8	0x280F    CMP	R0, #15
0x1BFA	0xD217    BCS	L_vRF4463Init72
;driverrf4463pro.c, 95 :: 		RF_MODEM_OOK_CNT1_11_data[ i ] = RF_MODEM_OOK_CNT1_11_850[ rate ][ i - 4 ];
0x1BFC	0x9905    LDR	R1, [SP, #20]
0x1BFE	0xB2C9    UXTB	R1, R1
0x1C00	0x4823    LDR	R0, [PC, #140]
0x1C02	0x1843    ADDS	R3, R0, R1
0x1C04	0x481B    LDR	R0, [PC, #108]
0x1C06	0x7802    LDRB	R2, [R0, #0]
0x1C08	0x200B    MOVS	R0, #11
0x1C0A	0x4611    MOV	R1, R2
0x1C0C	0x4341    MULS	R1, R0, R1
0x1C0E	0x482E    LDR	R0, [PC, #184]
0x1C10	0x1842    ADDS	R2, R0, R1
0x1C12	0x9805    LDR	R0, [SP, #20]
0x1C14	0xB2C0    UXTB	R0, R0
0x1C16	0x1F01    SUBS	R1, R0, #4
0x1C18	0xB209    SXTH	R1, R1
0x1C1A	0x4610    MOV	R0, R2
0x1C1C	0x1840    ADDS	R0, R0, R1
0x1C1E	0x7800    LDRB	R0, [R0, #0]
0x1C20	0x7018    STRB	R0, [R3, #0]
;driverrf4463pro.c, 94 :: 		for ( i = 4; i < 15; i++ ) {
0x1C22	0x9805    LDR	R0, [SP, #20]
0x1C24	0xB2C0    UXTB	R0, R0
0x1C26	0x3001    ADDS	R0, #1
0x1C28	0x9005    STR	R0, [SP, #20]
;driverrf4463pro.c, 96 :: 		}
0x1C2A	0xE7E3    B	L_vRF4463Init71
L_vRF4463Init72:
;driverrf4463pro.c, 97 :: 		for ( i = 4; i < 16; i++ ) {
0x1C2C	0x2004    MOVS	R0, #4
0x1C2E	0x9005    STR	R0, [SP, #20]
L_vRF4463Init74:
0x1C30	0x9805    LDR	R0, [SP, #20]
0x1C32	0xB2C0    UXTB	R0, R0
0x1C34	0x2810    CMP	R0, #16
0x1C36	0xD217    BCS	L_vRF4463Init75
;driverrf4463pro.c, 98 :: 		RF_MODEM_CHFLT_RX1_CHFLT_COE13_7_0_12_data[ i ] = RF_MODEM_CHFLT_RX1_CHFLT_COE13_7_0_12_850[ rate ][ i - 4 ];
0x1C38	0x9905    LDR	R1, [SP, #20]
0x1C3A	0xB2C9    UXTB	R1, R1
0x1C3C	0x4816    LDR	R0, [PC, #88]
0x1C3E	0x1843    ADDS	R3, R0, R1
0x1C40	0x480C    LDR	R0, [PC, #48]
0x1C42	0x7802    LDRB	R2, [R0, #0]
0x1C44	0x200C    MOVS	R0, #12
0x1C46	0x4611    MOV	R1, R2
0x1C48	0x4341    MULS	R1, R0, R1
0x1C4A	0x4820    LDR	R0, [PC, #128]
0x1C4C	0x1842    ADDS	R2, R0, R1
0x1C4E	0x9805    LDR	R0, [SP, #20]
0x1C50	0xB2C0    UXTB	R0, R0
0x1C52	0x1F01    SUBS	R1, R0, #4
0x1C54	0xB209    SXTH	R1, R1
0x1C56	0x4610    MOV	R0, R2
0x1C58	0x1840    ADDS	R0, R0, R1
0x1C5A	0x7800    LDRB	R0, [R0, #0]
0x1C5C	0x7018    STRB	R0, [R3, #0]
;driverrf4463pro.c, 97 :: 		for ( i = 4; i < 16; i++ ) {
0x1C5E	0x9805    LDR	R0, [SP, #20]
0x1C60	0xB2C0    UXTB	R0, R0
0x1C62	0x3001    ADDS	R0, #1
0x1C64	0x9005    STR	R0, [SP, #20]
;driverrf4463pro.c, 99 :: 		}
0x1C66	0xE7E3    B	L_vRF4463Init74
L_vRF4463Init75:
;driverrf4463pro.c, 100 :: 		for ( i = 4; i < 16; i++ ) {
0x1C68	0x2004    MOVS	R0, #4
0x1C6A	0x9005    STR	R0, [SP, #20]
L_vRF4463Init77:
0x1C6C	0x9805    LDR	R0, [SP, #20]
0x1C6E	0xE02F    B	#94
0x1C70	0x00002000  	_RF_MODEM_MOD_TYPE_12_data+0
0x1C74	0x00C72000  	_rate+0
0x1C78	0x2E4F0000  	_RF_MODEM_MOD_TYPE_12+0
0x1C7C	0x008F2000  	_freq3+0
0x1C80	0x00102000  	_RF_MODEM_TX_RAMP_DELAY_8_data+0
0x1C84	0x329C0000  	_RF_MODEM_TX_RAMP_DELAY_8_433+0
0x1C88	0x001C2000  	_RF_MODEM_AFC_GEAR_7_data+0
0x1C8C	0x33410000  	_RF_MODEM_AFC_GEAR_7_433+0
0x1C90	0x00292000  	_RF_MODEM_OOK_CNT1_11_data+0
0x1C94	0x2FD00000  	_RF_MODEM_OOK_CNT1_11_433+0
0x1C98	0x00382000  	_RF_MODEM_CHFLT_RX1_CHFLT_COE13_7_0_12_data+0
0x1C9C	0x2ED30000  	_RF_MODEM_CHFLT_RX1_CHFLT_COE13_7_0_12_433+0
0x1CA0	0x00482000  	_RF_MODEM_CHFLT_RX1_CHFLT_COE1_7_0_12_data+0
0x1CA4	0x2DCB0000  	_RF_MODEM_CHFLT_RX1_CHFLT_COE1_7_0_12_433+0
0x1CA8	0x00582000  	_RF_MODEM_CHFLT_RX2_CHFLT_COE7_7_0_12_data+0
0x1CAC	0x2C3F0000  	_RF_MODEM_CHFLT_RX2_CHFLT_COE7_7_0_12_433+0
0x1CB0	0x00682000  	_RF_MODEM_AGC_WINDOW_SIZE_9_data+0
0x1CB4	0x31E10000  	_RF_MODEM_AGC_WINDOW_SIZE_9_433+0
0x1CB8	0x00752000  	_RF_MODEM_BCR_OSR_1_9_data+0
0x1CBC	0x317E0000  	_RF_MODEM_BCR_OSR_1_9_433+0
0x1CC0	0x32440000  	_RF_MODEM_TX_RAMP_DELAY_8_850+0
0x1CC4	0x338E0000  	_RF_MODEM_AFC_GEAR_7_850+0
0x1CC8	0x2F570000  	_RF_MODEM_OOK_CNT1_11_850+0
0x1CCC	0x2BBB0000  	_RF_MODEM_CHFLT_RX1_CHFLT_COE13_7_0_12_850+0
0x1CD0	0xB2C0    UXTB	R0, R0
0x1CD2	0x2810    CMP	R0, #16
0x1CD4	0xD217    BCS	L_vRF4463Init78
;driverrf4463pro.c, 101 :: 		RF_MODEM_CHFLT_RX1_CHFLT_COE1_7_0_12_data[ i ] = RF_MODEM_CHFLT_RX1_CHFLT_COE1_7_0_12_850[ rate ][ i - 4 ];
0x1CD6	0x9905    LDR	R1, [SP, #20]
0x1CD8	0xB2C9    UXTB	R1, R1
0x1CDA	0x48E3    LDR	R0, [PC, #908]
0x1CDC	0x1843    ADDS	R3, R0, R1
0x1CDE	0x48E3    LDR	R0, [PC, #908]
0x1CE0	0x7802    LDRB	R2, [R0, #0]
0x1CE2	0x200C    MOVS	R0, #12
0x1CE4	0x4611    MOV	R1, R2
0x1CE6	0x4341    MULS	R1, R0, R1
0x1CE8	0x48E1    LDR	R0, [PC, #900]
0x1CEA	0x1842    ADDS	R2, R0, R1
0x1CEC	0x9805    LDR	R0, [SP, #20]
0x1CEE	0xB2C0    UXTB	R0, R0
0x1CF0	0x1F01    SUBS	R1, R0, #4
0x1CF2	0xB209    SXTH	R1, R1
0x1CF4	0x4610    MOV	R0, R2
0x1CF6	0x1840    ADDS	R0, R0, R1
0x1CF8	0x7800    LDRB	R0, [R0, #0]
0x1CFA	0x7018    STRB	R0, [R3, #0]
;driverrf4463pro.c, 100 :: 		for ( i = 4; i < 16; i++ ) {
0x1CFC	0x9805    LDR	R0, [SP, #20]
0x1CFE	0xB2C0    UXTB	R0, R0
0x1D00	0x3001    ADDS	R0, #1
0x1D02	0x9005    STR	R0, [SP, #20]
;driverrf4463pro.c, 102 :: 		}
0x1D04	0xE7B2    B	L_vRF4463Init77
L_vRF4463Init78:
;driverrf4463pro.c, 103 :: 		for ( i = 4; i < 16; i++ ) {
0x1D06	0x2004    MOVS	R0, #4
0x1D08	0x9005    STR	R0, [SP, #20]
L_vRF4463Init80:
0x1D0A	0x9805    LDR	R0, [SP, #20]
0x1D0C	0xB2C0    UXTB	R0, R0
0x1D0E	0x2810    CMP	R0, #16
0x1D10	0xD217    BCS	L_vRF4463Init81
;driverrf4463pro.c, 104 :: 		RF_MODEM_CHFLT_RX2_CHFLT_COE7_7_0_12_data[ i ] = RF_MODEM_CHFLT_RX2_CHFLT_COE7_7_0_12_850[ rate ][ i - 4 ];
0x1D12	0x9905    LDR	R1, [SP, #20]
0x1D14	0xB2C9    UXTB	R1, R1
0x1D16	0x48D7    LDR	R0, [PC, #860]
0x1D18	0x1843    ADDS	R3, R0, R1
0x1D1A	0x48D4    LDR	R0, [PC, #848]
0x1D1C	0x7802    LDRB	R2, [R0, #0]
0x1D1E	0x200C    MOVS	R0, #12
0x1D20	0x4611    MOV	R1, R2
0x1D22	0x4341    MULS	R1, R0, R1
0x1D24	0x48D4    LDR	R0, [PC, #848]
0x1D26	0x1842    ADDS	R2, R0, R1
0x1D28	0x9805    LDR	R0, [SP, #20]
0x1D2A	0xB2C0    UXTB	R0, R0
0x1D2C	0x1F01    SUBS	R1, R0, #4
0x1D2E	0xB209    SXTH	R1, R1
0x1D30	0x4610    MOV	R0, R2
0x1D32	0x1840    ADDS	R0, R0, R1
0x1D34	0x7800    LDRB	R0, [R0, #0]
0x1D36	0x7018    STRB	R0, [R3, #0]
;driverrf4463pro.c, 103 :: 		for ( i = 4; i < 16; i++ ) {
0x1D38	0x9805    LDR	R0, [SP, #20]
0x1D3A	0xB2C0    UXTB	R0, R0
0x1D3C	0x3001    ADDS	R0, #1
0x1D3E	0x9005    STR	R0, [SP, #20]
;driverrf4463pro.c, 105 :: 		}
0x1D40	0xE7E3    B	L_vRF4463Init80
L_vRF4463Init81:
;driverrf4463pro.c, 106 :: 		for ( i = 4; i < 13; i++ ) {
0x1D42	0x2004    MOVS	R0, #4
0x1D44	0x9005    STR	R0, [SP, #20]
L_vRF4463Init83:
0x1D46	0x9805    LDR	R0, [SP, #20]
0x1D48	0xB2C0    UXTB	R0, R0
0x1D4A	0x280D    CMP	R0, #13
0x1D4C	0xD217    BCS	L_vRF4463Init84
;driverrf4463pro.c, 107 :: 		RF_MODEM_AGC_WINDOW_SIZE_9_data[ i ] = RF_MODEM_AGC_WINDOW_SIZE_9_850[ rate ][ i - 4 ];
0x1D4E	0x9905    LDR	R1, [SP, #20]
0x1D50	0xB2C9    UXTB	R1, R1
0x1D52	0x48CA    LDR	R0, [PC, #808]
0x1D54	0x1843    ADDS	R3, R0, R1
0x1D56	0x48C5    LDR	R0, [PC, #788]
0x1D58	0x7802    LDRB	R2, [R0, #0]
0x1D5A	0x2009    MOVS	R0, #9
0x1D5C	0x4611    MOV	R1, R2
0x1D5E	0x4341    MULS	R1, R0, R1
0x1D60	0x48C7    LDR	R0, [PC, #796]
0x1D62	0x1842    ADDS	R2, R0, R1
0x1D64	0x9805    LDR	R0, [SP, #20]
0x1D66	0xB2C0    UXTB	R0, R0
0x1D68	0x1F01    SUBS	R1, R0, #4
0x1D6A	0xB209    SXTH	R1, R1
0x1D6C	0x4610    MOV	R0, R2
0x1D6E	0x1840    ADDS	R0, R0, R1
0x1D70	0x7800    LDRB	R0, [R0, #0]
0x1D72	0x7018    STRB	R0, [R3, #0]
;driverrf4463pro.c, 106 :: 		for ( i = 4; i < 13; i++ ) {
0x1D74	0x9805    LDR	R0, [SP, #20]
0x1D76	0xB2C0    UXTB	R0, R0
0x1D78	0x3001    ADDS	R0, #1
0x1D7A	0x9005    STR	R0, [SP, #20]
;driverrf4463pro.c, 108 :: 		}
0x1D7C	0xE7E3    B	L_vRF4463Init83
L_vRF4463Init84:
;driverrf4463pro.c, 109 :: 		for ( i = 4; i < 13; i++ ) {
0x1D7E	0x2004    MOVS	R0, #4
0x1D80	0x9005    STR	R0, [SP, #20]
L_vRF4463Init86:
0x1D82	0x9805    LDR	R0, [SP, #20]
0x1D84	0xB2C0    UXTB	R0, R0
0x1D86	0x280D    CMP	R0, #13
0x1D88	0xD217    BCS	L_vRF4463Init87
;driverrf4463pro.c, 110 :: 		RF_MODEM_BCR_OSR_1_9_data[ i ] = RF_MODEM_BCR_OSR_1_9_850[ rate ][ i - 4 ];
0x1D8A	0x9905    LDR	R1, [SP, #20]
0x1D8C	0xB2C9    UXTB	R1, R1
0x1D8E	0x48BD    LDR	R0, [PC, #756]
0x1D90	0x1843    ADDS	R3, R0, R1
0x1D92	0x48B6    LDR	R0, [PC, #728]
0x1D94	0x7802    LDRB	R2, [R0, #0]
0x1D96	0x2009    MOVS	R0, #9
0x1D98	0x4611    MOV	R1, R2
0x1D9A	0x4341    MULS	R1, R0, R1
0x1D9C	0x48BA    LDR	R0, [PC, #744]
0x1D9E	0x1842    ADDS	R2, R0, R1
0x1DA0	0x9805    LDR	R0, [SP, #20]
0x1DA2	0xB2C0    UXTB	R0, R0
0x1DA4	0x1F01    SUBS	R1, R0, #4
0x1DA6	0xB209    SXTH	R1, R1
0x1DA8	0x4610    MOV	R0, R2
0x1DAA	0x1840    ADDS	R0, R0, R1
0x1DAC	0x7800    LDRB	R0, [R0, #0]
0x1DAE	0x7018    STRB	R0, [R3, #0]
;driverrf4463pro.c, 109 :: 		for ( i = 4; i < 13; i++ ) {
0x1DB0	0x9805    LDR	R0, [SP, #20]
0x1DB2	0xB2C0    UXTB	R0, R0
0x1DB4	0x3001    ADDS	R0, #1
0x1DB6	0x9005    STR	R0, [SP, #20]
;driverrf4463pro.c, 111 :: 		}
0x1DB8	0xE7E3    B	L_vRF4463Init86
L_vRF4463Init87:
;driverrf4463pro.c, 112 :: 		}
L_vRF4463Init64:
;driverrf4463pro.c, 113 :: 		for ( i = 4; i < 11; i++ ) {
0x1DBA	0x2004    MOVS	R0, #4
0x1DBC	0x9005    STR	R0, [SP, #20]
L_vRF4463Init89:
0x1DBE	0x9805    LDR	R0, [SP, #20]
0x1DC0	0xB2C0    UXTB	R0, R0
0x1DC2	0x280B    CMP	R0, #11
0x1DC4	0xD217    BCS	L_vRF4463Init90
;driverrf4463pro.c, 114 :: 		RF_SYNTH_PFDCP_CPFF_7_data[ i ] = RF_SYNTH_PFDCP_CPFF_7[ rate ][ i - 4 ];
0x1DC6	0x9905    LDR	R1, [SP, #20]
0x1DC8	0xB2C9    UXTB	R1, R1
0x1DCA	0x48B0    LDR	R0, [PC, #704]
0x1DCC	0x1843    ADDS	R3, R0, R1
0x1DCE	0x48A7    LDR	R0, [PC, #668]
0x1DD0	0x7802    LDRB	R2, [R0, #0]
0x1DD2	0x2007    MOVS	R0, #7
0x1DD4	0x4611    MOV	R1, R2
0x1DD6	0x4341    MULS	R1, R0, R1
0x1DD8	0x48AD    LDR	R0, [PC, #692]
0x1DDA	0x1842    ADDS	R2, R0, R1
0x1DDC	0x9805    LDR	R0, [SP, #20]
0x1DDE	0xB2C0    UXTB	R0, R0
0x1DE0	0x1F01    SUBS	R1, R0, #4
0x1DE2	0xB209    SXTH	R1, R1
0x1DE4	0x4610    MOV	R0, R2
0x1DE6	0x1840    ADDS	R0, R0, R1
0x1DE8	0x7800    LDRB	R0, [R0, #0]
0x1DEA	0x7018    STRB	R0, [R3, #0]
;driverrf4463pro.c, 113 :: 		for ( i = 4; i < 11; i++ ) {
0x1DEC	0x9805    LDR	R0, [SP, #20]
0x1DEE	0xB2C0    UXTB	R0, R0
0x1DF0	0x3001    ADDS	R0, #1
0x1DF2	0x9005    STR	R0, [SP, #20]
;driverrf4463pro.c, 115 :: 		}
0x1DF4	0xE7E3    B	L_vRF4463Init89
L_vRF4463Init90:
;driverrf4463pro.c, 119 :: 		vRF4463GPIO_SET( mode );                              // PARAMETRO CONFIGURABLE
0x1DF6	0x48A7    LDR	R0, [PC, #668]
0x1DF8	0x7800    LDRB	R0, [R0, #0]
0x1DFA	0xB401    PUSH	(R0)
0x1DFC	0xF7FEFD82  BL	_vRF4463GPIO_SET+0
0x1E00	0xB001    ADD	SP, SP, #4
;driverrf4463pro.c, 122 :: 		app_command_buf[ 0 ] = 0x11;
0x1E02	0x4668    MOV	R0, SP
0x1E04	0x1C01    ADDS	R1, R0, #0
0x1E06	0x2011    MOVS	R0, #17
0x1E08	0x7008    STRB	R0, [R1, #0]
;driverrf4463pro.c, 123 :: 		app_command_buf[ 1 ] = 0x00;    // 0x0000
0x1E0A	0x4668    MOV	R0, SP
0x1E0C	0x1C41    ADDS	R1, R0, #1
0x1E0E	0x2000    MOVS	R0, #0
0x1E10	0x7008    STRB	R0, [R1, #0]
;driverrf4463pro.c, 124 :: 		app_command_buf[ 2 ] = 0x01;    // Total 1 Parameters
0x1E12	0x4668    MOV	R0, SP
0x1E14	0x1C81    ADDS	R1, R0, #2
0x1E16	0x2001    MOVS	R0, #1
0x1E18	0x7008    STRB	R0, [R1, #0]
;driverrf4463pro.c, 125 :: 		app_command_buf[ 3 ] = 0x00;    // 0x0000
0x1E1A	0x4668    MOV	R0, SP
0x1E1C	0x1CC1    ADDS	R1, R0, #3
0x1E1E	0x2000    MOVS	R0, #0
0x1E20	0x7008    STRB	R0, [R1, #0]
;driverrf4463pro.c, 126 :: 		app_command_buf[ 4 ] = 98;      // freq  adjustment    ( rango desde 0 - 127 Low cap - High Cap )
0x1E22	0x4668    MOV	R0, SP
0x1E24	0x1D01    ADDS	R1, R0, #4
0x1E26	0x2062    MOVS	R0, #98
0x1E28	0x7008    STRB	R0, [R1, #0]
;driverrf4463pro.c, 127 :: 		spi_write( 5, app_command_buf );
0x1E2A	0x4668    MOV	R0, SP
0x1E2C	0xB401    PUSH	(R0)
0x1E2E	0x2005    MOVS	R0, #5
0x1E30	0xB401    PUSH	(R0)
0x1E32	0xF7FEFEF9  BL	_spi_write+0
0x1E36	0xB002    ADD	SP, SP, #8
;driverrf4463pro.c, 130 :: 		app_command_buf[ 0 ] = 0x11;
0x1E38	0x4668    MOV	R0, SP
0x1E3A	0x1C01    ADDS	R1, R0, #0
0x1E3C	0x2011    MOVS	R0, #17
0x1E3E	0x7008    STRB	R0, [R1, #0]
;driverrf4463pro.c, 131 :: 		app_command_buf[ 1 ] = 0x00;    // 0x0003
0x1E40	0x4668    MOV	R0, SP
0x1E42	0x1C41    ADDS	R1, R0, #1
0x1E44	0x2000    MOVS	R0, #0
0x1E46	0x7008    STRB	R0, [R1, #0]
;driverrf4463pro.c, 132 :: 		app_command_buf[ 2 ] = 0x01;    // Total 1 Parameters
0x1E48	0x4668    MOV	R0, SP
0x1E4A	0x1C81    ADDS	R1, R0, #2
0x1E4C	0x2001    MOVS	R0, #1
0x1E4E	0x7008    STRB	R0, [R1, #0]
;driverrf4463pro.c, 133 :: 		app_command_buf[ 3 ] = 0x03;   // 0x0003
0x1E50	0x4668    MOV	R0, SP
0x1E52	0x1CC1    ADDS	R1, R0, #3
0x1E54	0x2003    MOVS	R0, #3
0x1E56	0x7008    STRB	R0, [R1, #0]
;driverrf4463pro.c, 134 :: 		app_command_buf[ 4 ] = 0x40;  // tx = rx = 64 byte, ordinary PH,high performance mode  ?????????????????????
0x1E58	0x4668    MOV	R0, SP
0x1E5A	0x1D01    ADDS	R1, R0, #4
0x1E5C	0x2040    MOVS	R0, #64
0x1E5E	0x7008    STRB	R0, [R1, #0]
;driverrf4463pro.c, 135 :: 		spi_write( 5, app_command_buf );
0x1E60	0x4668    MOV	R0, SP
0x1E62	0xB401    PUSH	(R0)
0x1E64	0x2005    MOVS	R0, #5
0x1E66	0xB401    PUSH	(R0)
0x1E68	0xF7FEFEDE  BL	_spi_write+0
0x1E6C	0xB002    ADD	SP, SP, #8
;driverrf4463pro.c, 139 :: 		spi_write( 0x08, RF_FRR_CTL_A_MODE_4_data );    // disable all fast response register
0x1E6E	0x488A    LDR	R0, [PC, #552]
0x1E70	0xB401    PUSH	(R0)
0x1E72	0x2008    MOVS	R0, #8
0x1E74	0xB401    PUSH	(R0)
0x1E76	0xF7FEFED7  BL	_spi_write+0
0x1E7A	0xB002    ADD	SP, SP, #8
;driverrf4463pro.c, 142 :: 		app_command_buf[ 0 ] = 0x11;
0x1E7C	0x4668    MOV	R0, SP
0x1E7E	0x1C01    ADDS	R1, R0, #0
0x1E80	0x2011    MOVS	R0, #17
0x1E82	0x7008    STRB	R0, [R1, #0]
;driverrf4463pro.c, 143 :: 		app_command_buf[ 1 ] = 0x10;    // 0x1000
0x1E84	0x4668    MOV	R0, SP
0x1E86	0x1C41    ADDS	R1, R0, #1
0x1E88	0x2010    MOVS	R0, #16
0x1E8A	0x7008    STRB	R0, [R1, #0]
;driverrf4463pro.c, 144 :: 		app_command_buf[ 2 ] = 0x09;    // Total 9 Parameters
0x1E8C	0x4668    MOV	R0, SP
0x1E8E	0x1C81    ADDS	R1, R0, #2
0x1E90	0x2009    MOVS	R0, #9
0x1E92	0x7008    STRB	R0, [R1, #0]
;driverrf4463pro.c, 145 :: 		app_command_buf[ 3 ] = 0x00;   // 0x1000
0x1E94	0x4668    MOV	R0, SP
0x1E96	0x1CC1    ADDS	R1, R0, #3
0x1E98	0x2000    MOVS	R0, #0
0x1E9A	0x7008    STRB	R0, [R1, #0]
;driverrf4463pro.c, 147 :: 		if ( mode == tx_test_mode ) {
0x1E9C	0x487D    LDR	R0, [PC, #500]
0x1E9E	0x7800    LDRB	R0, [R0, #0]
0x1EA0	0x2802    CMP	R0, #2
0x1EA2	0xD104    BNE	L_vRF4463Init92
;driverrf4463pro.c, 148 :: 		app_command_buf[ 4 ] = 0xff;     //  Need to send 255 bytes of Preamble
0x1EA4	0x4668    MOV	R0, SP
0x1EA6	0x1D01    ADDS	R1, R0, #4
0x1EA8	0x20FF    MOVS	R0, #255
0x1EAA	0x7008    STRB	R0, [R1, #0]
;driverrf4463pro.c, 149 :: 		}
0x1EAC	0xE003    B	L_vRF4463Init93
L_vRF4463Init92:
;driverrf4463pro.c, 151 :: 		app_command_buf[ 4 ] = 0x08;   //  Need to send 8 bytes of Preamble
0x1EAE	0x4668    MOV	R0, SP
0x1EB0	0x1D01    ADDS	R1, R0, #4
0x1EB2	0x2008    MOVS	R0, #8
0x1EB4	0x7008    STRB	R0, [R1, #0]
;driverrf4463pro.c, 152 :: 		}
L_vRF4463Init93:
;driverrf4463pro.c, 155 :: 		app_command_buf[ 5 ]   = 0x14;       //To detect 20 bit sync word,
0x1EB6	0x4668    MOV	R0, SP
0x1EB8	0x1D41    ADDS	R1, R0, #5
0x1EBA	0x2014    MOVS	R0, #20
0x1EBC	0x7008    STRB	R0, [R1, #0]
;driverrf4463pro.c, 156 :: 		app_command_buf[ 6 ]   = 0x00;       // Non-standard preamble settings, useless
0x1EBE	0x4668    MOV	R0, SP
0x1EC0	0x1D81    ADDS	R1, R0, #6
0x1EC2	0x2000    MOVS	R0, #0
0x1EC4	0x7008    STRB	R0, [R1, #0]
;driverrf4463pro.c, 157 :: 		app_command_buf[ 7 ]   = 0x0f;       // Time of the preamble Timeout   ????????????????????????????????????????????????????????????
0x1EC6	0x4668    MOV	R0, SP
0x1EC8	0x1DC1    ADDS	R1, R0, #7
0x1ECA	0x200F    MOVS	R0, #15
0x1ECC	0x7008    STRB	R0, [R1, #0]
;driverrf4463pro.c, 158 :: 		app_command_buf[ 8 ]   = 0x31;       // The length of the preamble is   byte Calculation , 1st = 1 NO manchest  Encoding, using standard 1010.??
0x1ECE	0x4668    MOV	R0, SP
0x1ED0	0x4601    MOV	R1, R0
0x1ED2	0x3108    ADDS	R1, #8
0x1ED4	0x2031    MOVS	R0, #49
0x1ED6	0x7008    STRB	R0, [R1, #0]
;driverrf4463pro.c, 159 :: 		app_command_buf[ 9 ]   = 0x0;        //  Non-standard Preamble Patten 4th byte
0x1ED8	0x4668    MOV	R0, SP
0x1EDA	0x4601    MOV	R1, R0
0x1EDC	0x3109    ADDS	R1, #9
0x1EDE	0x2000    MOVS	R0, #0
0x1EE0	0x7008    STRB	R0, [R1, #0]
;driverrf4463pro.c, 160 :: 		app_command_buf[ 10 ]  = 0x00;       //  Non-standard Preamble Patten 3rd byte
0x1EE2	0x4668    MOV	R0, SP
0x1EE4	0x4601    MOV	R1, R0
0x1EE6	0x310A    ADDS	R1, #10
0x1EE8	0x2000    MOVS	R0, #0
0x1EEA	0x7008    STRB	R0, [R1, #0]
;driverrf4463pro.c, 161 :: 		app_command_buf[ 11 ]  = 0x00;       //  Non-standard Preamble Patten 2nd byte
0x1EEC	0x4668    MOV	R0, SP
0x1EEE	0x4601    MOV	R1, R0
0x1EF0	0x310B    ADDS	R1, #11
0x1EF2	0x2000    MOVS	R0, #0
0x1EF4	0x7008    STRB	R0, [R1, #0]
;driverrf4463pro.c, 162 :: 		app_command_buf[ 12 ]  = 0x00;       //  Non-standard Preamble Patten 1st byte
0x1EF6	0x4668    MOV	R0, SP
0x1EF8	0x4601    MOV	R1, R0
0x1EFA	0x310C    ADDS	R1, #12
0x1EFC	0x2000    MOVS	R0, #0
0x1EFE	0x7008    STRB	R0, [R1, #0]
;driverrf4463pro.c, 163 :: 		spi_write(13, app_command_buf);
0x1F00	0x4668    MOV	R0, SP
0x1F02	0xB401    PUSH	(R0)
0x1F04	0x200D    MOVS	R0, #13
0x1F06	0xB401    PUSH	(R0)
0x1F08	0xF7FEFE8E  BL	_spi_write+0
0x1F0C	0xB002    ADD	SP, SP, #8
;driverrf4463pro.c, 166 :: 		app_command_buf[ 0 ] = 0x11;
0x1F0E	0x4668    MOV	R0, SP
0x1F10	0x1C01    ADDS	R1, R0, #0
0x1F12	0x2011    MOVS	R0, #17
0x1F14	0x7008    STRB	R0, [R1, #0]
;driverrf4463pro.c, 167 :: 		app_command_buf[ 1 ] = 0x11;         // command = 0x1100
0x1F16	0x4668    MOV	R0, SP
0x1F18	0x1C41    ADDS	R1, R0, #1
0x1F1A	0x2011    MOVS	R0, #17
0x1F1C	0x7008    STRB	R0, [R1, #0]
;driverrf4463pro.c, 168 :: 		app_command_buf[ 2 ] = 0x05;         // Total 5 Parameters
0x1F1E	0x4668    MOV	R0, SP
0x1F20	0x1C81    ADDS	R1, R0, #2
0x1F22	0x2005    MOVS	R0, #5
0x1F24	0x7008    STRB	R0, [R1, #0]
;driverrf4463pro.c, 169 :: 		app_command_buf[ 3 ] = 0x00;         // command = 0x1100
0x1F26	0x4668    MOV	R0, SP
0x1F28	0x1CC1    ADDS	R1, R0, #3
0x1F2A	0x2000    MOVS	R0, #0
0x1F2C	0x7008    STRB	R0, [R1, #0]
;driverrf4463pro.c, 170 :: 		app_command_buf[ 4 ] = 0x01;         // The synchronization word is defined and sent in the length field, and the synchronization word cannot be wrong,Not 4FSK, not manchest encoding, only 2 bytes
0x1F2E	0x4668    MOV	R0, SP
0x1F30	0x1D01    ADDS	R1, R0, #4
0x1F32	0x2001    MOVS	R0, #1
0x1F34	0x7008    STRB	R0, [R1, #0]
;driverrf4463pro.c, 172 :: 		if ( mode == tx_test_mode ) {
0x1F36	0x4857    LDR	R0, [PC, #348]
0x1F38	0x7800    LDRB	R0, [R0, #0]
0x1F3A	0x2802    CMP	R0, #2
0x1F3C	0xD108    BNE	L_vRF4463Init94
;driverrf4463pro.c, 173 :: 		app_command_buf[ 5 ] = 0x55;      //Sync word 3
0x1F3E	0x4668    MOV	R0, SP
0x1F40	0x1D41    ADDS	R1, R0, #5
0x1F42	0x2055    MOVS	R0, #85
0x1F44	0x7008    STRB	R0, [R1, #0]
;driverrf4463pro.c, 174 :: 		app_command_buf[ 6 ] = 0x55;      // Sync word 2
0x1F46	0x4668    MOV	R0, SP
0x1F48	0x1D81    ADDS	R1, R0, #6
0x1F4A	0x2055    MOVS	R0, #85
0x1F4C	0x7008    STRB	R0, [R1, #0]
;driverrf4463pro.c, 175 :: 		}
0x1F4E	0xE007    B	L_vRF4463Init95
L_vRF4463Init94:
;driverrf4463pro.c, 177 :: 		app_command_buf[ 5 ] = 0x2d;    //Sync word 3
0x1F50	0x4668    MOV	R0, SP
0x1F52	0x1D41    ADDS	R1, R0, #5
0x1F54	0x202D    MOVS	R0, #45
0x1F56	0x7008    STRB	R0, [R1, #0]
;driverrf4463pro.c, 178 :: 		app_command_buf[ 6 ] = 0xd4;    // Sync word 2
0x1F58	0x4668    MOV	R0, SP
0x1F5A	0x1D81    ADDS	R1, R0, #6
0x1F5C	0x20D4    MOVS	R0, #212
0x1F5E	0x7008    STRB	R0, [R1, #0]
;driverrf4463pro.c, 179 :: 		}
L_vRF4463Init95:
;driverrf4463pro.c, 181 :: 		app_command_buf[ 7 ] =  0x00;        // Sync word 1
0x1F60	0x4668    MOV	R0, SP
0x1F62	0x1DC1    ADDS	R1, R0, #7
0x1F64	0x2000    MOVS	R0, #0
0x1F66	0x7008    STRB	R0, [R1, #0]
;driverrf4463pro.c, 182 :: 		app_command_buf[ 8 ] = 0x00;        // Sync word 0
0x1F68	0x4668    MOV	R0, SP
0x1F6A	0x4601    MOV	R1, R0
0x1F6C	0x3108    ADDS	R1, #8
0x1F6E	0x2000    MOVS	R0, #0
0x1F70	0x7008    STRB	R0, [R1, #0]
;driverrf4463pro.c, 183 :: 		spi_write( 9, app_command_buf );
0x1F72	0x4668    MOV	R0, SP
0x1F74	0xB401    PUSH	(R0)
0x1F76	0x2009    MOVS	R0, #9
0x1F78	0xB401    PUSH	(R0)
0x1F7A	0xF7FEFE55  BL	_spi_write+0
0x1F7E	0xB002    ADD	SP, SP, #8
;driverrf4463pro.c, 186 :: 		app_command_buf[ 0 ] = 0x11;
0x1F80	0x4668    MOV	R0, SP
0x1F82	0x1C01    ADDS	R1, R0, #0
0x1F84	0x2011    MOVS	R0, #17
0x1F86	0x7008    STRB	R0, [R1, #0]
;driverrf4463pro.c, 187 :: 		app_command_buf[ 1 ] = 0x12;        // command = 0x1200
0x1F88	0x4668    MOV	R0, SP
0x1F8A	0x1C41    ADDS	R1, R0, #1
0x1F8C	0x2012    MOVS	R0, #18
0x1F8E	0x7008    STRB	R0, [R1, #0]
;driverrf4463pro.c, 188 :: 		app_command_buf[ 2 ] = 0x01;        // Total 1 Parameters
0x1F90	0x4668    MOV	R0, SP
0x1F92	0x1C81    ADDS	R1, R0, #2
0x1F94	0x2001    MOVS	R0, #1
0x1F96	0x7008    STRB	R0, [R1, #0]
;driverrf4463pro.c, 189 :: 		app_command_buf[ 3 ] = 0x00;        // command = 0x1200
0x1F98	0x4668    MOV	R0, SP
0x1F9A	0x1CC1    ADDS	R1, R0, #3
0x1F9C	0x2000    MOVS	R0, #0
0x1F9E	0x7008    STRB	R0, [R1, #0]
;driverrf4463pro.c, 190 :: 		app_command_buf[ 4 ] = 0x81;        // 1?cRC ??,CRC = itu-c, enable crc
0x1FA0	0x4668    MOV	R0, SP
0x1FA2	0x1D01    ADDS	R1, R0, #4
0x1FA4	0x2081    MOVS	R0, #129
0x1FA6	0x7008    STRB	R0, [R1, #0]
;driverrf4463pro.c, 191 :: 		spi_write( 5, app_command_buf );
0x1FA8	0x4668    MOV	R0, SP
0x1FAA	0xB401    PUSH	(R0)
0x1FAC	0x2005    MOVS	R0, #5
0x1FAE	0xB401    PUSH	(R0)
0x1FB0	0xF7FEFE3A  BL	_spi_write+0
0x1FB4	0xB002    ADD	SP, SP, #8
;driverrf4463pro.c, 194 :: 		app_command_buf[ 0 ] = 0x11;
0x1FB6	0x4668    MOV	R0, SP
0x1FB8	0x1C01    ADDS	R1, R0, #0
0x1FBA	0x2011    MOVS	R0, #17
0x1FBC	0x7008    STRB	R0, [R1, #0]
;driverrf4463pro.c, 195 :: 		app_command_buf[ 1 ] = 0x12;        // command = 0x1206
0x1FBE	0x4668    MOV	R0, SP
0x1FC0	0x1C41    ADDS	R1, R0, #1
0x1FC2	0x2012    MOVS	R0, #18
0x1FC4	0x7008    STRB	R0, [R1, #0]
;driverrf4463pro.c, 196 :: 		app_command_buf[ 2 ] = 0x01;        // Total 1Parameters
0x1FC6	0x4668    MOV	R0, SP
0x1FC8	0x1C81    ADDS	R1, R0, #2
0x1FCA	0x2001    MOVS	R0, #1
0x1FCC	0x7008    STRB	R0, [R1, #0]
;driverrf4463pro.c, 197 :: 		app_command_buf[ 3 ] = 0x06;        // command = 0x1206
0x1FCE	0x4668    MOV	R0, SP
0x1FD0	0x1CC1    ADDS	R1, R0, #3
0x1FD2	0x2006    MOVS	R0, #6
0x1FD4	0x7008    STRB	R0, [R1, #0]
;driverrf4463pro.c, 198 :: 		app_command_buf[ 4 ] = 0x02;        //  tx = rx = 120d--1220 (tx packet,ph enable, not 4fsk, After receiving a packet of data,RX off,CRC Do not flip ,CRC MSB, data MSB
0x1FD6	0x4668    MOV	R0, SP
0x1FD8	0x1D01    ADDS	R1, R0, #4
0x1FDA	0x2002    MOVS	R0, #2
0x1FDC	0x7008    STRB	R0, [R1, #0]
;driverrf4463pro.c, 199 :: 		spi_write( 5, app_command_buf );
0x1FDE	0x4668    MOV	R0, SP
0x1FE0	0xB401    PUSH	(R0)
0x1FE2	0x2005    MOVS	R0, #5
0x1FE4	0xB401    PUSH	(R0)
0x1FE6	0xF7FEFE1F  BL	_spi_write+0
0x1FEA	0xB002    ADD	SP, SP, #8
;driverrf4463pro.c, 202 :: 		app_command_buf[ 0 ] = 0x11;
0x1FEC	0x4668    MOV	R0, SP
0x1FEE	0x1C01    ADDS	R1, R0, #0
0x1FF0	0x2011    MOVS	R0, #17
0x1FF2	0x7008    STRB	R0, [R1, #0]
;driverrf4463pro.c, 203 :: 		app_command_buf[ 1 ] = 0x12;        // command = 0x1208
0x1FF4	0x4668    MOV	R0, SP
0x1FF6	0x1C41    ADDS	R1, R0, #1
0x1FF8	0x2012    MOVS	R0, #18
0x1FFA	0x7008    STRB	R0, [R1, #0]
;driverrf4463pro.c, 204 :: 		app_command_buf[ 2 ] = 0x03;        // Total 3 Parameters
0x1FFC	0x4668    MOV	R0, SP
0x1FFE	0x1C81    ADDS	R1, R0, #2
0x2000	0x2003    MOVS	R0, #3
0x2002	0x7008    STRB	R0, [R1, #0]
;driverrf4463pro.c, 205 :: 		app_command_buf[ 3 ] = 0x08;        // command = 0x1208
0x2004	0x4668    MOV	R0, SP
0x2006	0x1CC1    ADDS	R1, R0, #3
0x2008	0x2008    MOVS	R0, #8
0x200A	0x7008    STRB	R0, [R1, #0]
;driverrf4463pro.c, 206 :: 		app_command_buf[ 4 ] = 0x00;        // Length Field = LSB,  length Only 1 byte,length Not put In FiFo, fixed packet length mode
0x200C	0x4668    MOV	R0, SP
0x200E	0x1D01    ADDS	R1, R0, #4
0x2010	0x2000    MOVS	R0, #0
0x2012	0x7008    STRB	R0, [R1, #0]
;driverrf4463pro.c, 207 :: 		app_command_buf[ 5 ] = 0x00;        // Used for variable packet length mode, which defines which Field contains length Filed
0x2014	0x4668    MOV	R0, SP
0x2016	0x1D41    ADDS	R1, R0, #5
0x2018	0x2000    MOVS	R0, #0
0x201A	0x7008    STRB	R0, [R1, #0]
;driverrf4463pro.c, 208 :: 		app_command_buf[ 6 ] = 0x00;        // Used for variable packet length mode, adjust the length of variable packet length
0x201C	0x4668    MOV	R0, SP
0x201E	0x1D81    ADDS	R1, R0, #6
0x2020	0x2000    MOVS	R0, #0
0x2022	0x7008    STRB	R0, [R1, #0]
;driverrf4463pro.c, 209 :: 		spi_write( 7, app_command_buf );
0x2024	0x4668    MOV	R0, SP
0x2026	0xB401    PUSH	(R0)
0x2028	0x2007    MOVS	R0, #7
0x202A	0xB401    PUSH	(R0)
0x202C	0xF7FEFDFC  BL	_spi_write+0
0x2030	0xB002    ADD	SP, SP, #8
;driverrf4463pro.c, 212 :: 		app_command_buf[ 0 ]  = 0x11;
0x2032	0x4668    MOV	R0, SP
0x2034	0x1C01    ADDS	R1, R0, #0
0x2036	0x2011    MOVS	R0, #17
0x2038	0x7008    STRB	R0, [R1, #0]
;driverrf4463pro.c, 213 :: 		app_command_buf[ 1 ]  = 0x12;       // 0x120d
0x203A	0x4668    MOV	R0, SP
0x203C	0x1C41    ADDS	R1, R0, #1
0x203E	0x2012    MOVS	R0, #18
0x2040	0x7008    STRB	R0, [R1, #0]
;driverrf4463pro.c, 214 :: 		app_command_buf[ 2 ]  = 0x0c;       // Total 12 Parameters
0x2042	0x4668    MOV	R0, SP
0x2044	0x1C81    ADDS	R1, R0, #2
0x2046	0x200C    MOVS	R0, #12
0x2048	0x7008    STRB	R0, [R1, #0]
;driverrf4463pro.c, 215 :: 		app_command_buf[ 3 ]  = 0x0d;       // 0x120d
0x204A	0x4668    MOV	R0, SP
0x204C	0x1CC1    ADDS	R1, R0, #3
0x204E	0x200D    MOVS	R0, #13
0x2050	0x7008    STRB	R0, [R1, #0]
;driverrf4463pro.c, 216 :: 		app_command_buf[ 4 ]  = 0x00;       //  Field 1 length (?4?)
0x2052	0x4668    MOV	R0, SP
0x2054	0x1D01    ADDS	R1, R0, #4
0x2056	0x2000    MOVS	R0, #0
0x2058	0x7008    STRB	R0, [R1, #0]
;driverrf4463pro.c, 217 :: 		app_command_buf[ 5 ]  = payload_length;   //  field 1 length, (? 8?), ?Total14???
0x205A	0x4668    MOV	R0, SP
0x205C	0x1D41    ADDS	R1, R0, #5
0x205E	0x200E    MOVS	R0, #14
0x2060	0x7008    STRB	R0, [R1, #0]
;driverrf4463pro.c, 218 :: 		app_command_buf[ 6 ]  = 0x04;       // field 1 Is not 4FSK,manchest, whiting, PN9,
0x2062	0x4668    MOV	R0, SP
0x2064	0x1D81    ADDS	R1, R0, #6
0x2066	0xE019    B	#50
0x2068	0x00482000  	_RF_MODEM_CHFLT_RX1_CHFLT_COE1_7_0_12_data+0
0x206C	0x00C72000  	_rate+0
0x2070	0x2D470000  	_RF_MODEM_CHFLT_RX1_CHFLT_COE1_7_0_12_850+0
0x2074	0x00582000  	_RF_MODEM_CHFLT_RX2_CHFLT_COE7_7_0_12_data+0
0x2078	0x2CC30000  	_RF_MODEM_CHFLT_RX2_CHFLT_COE7_7_0_12_850+0
0x207C	0x00682000  	_RF_MODEM_AGC_WINDOW_SIZE_9_data+0
0x2080	0x311B0000  	_RF_MODEM_AGC_WINDOW_SIZE_9_850+0
0x2084	0x00752000  	_RF_MODEM_BCR_OSR_1_9_data+0
0x2088	0x30B80000  	_RF_MODEM_BCR_OSR_1_9_850+0
0x208C	0x00822000  	_RF_SYNTH_PFDCP_CPFF_7_data+0
0x2090	0x32F40000  	_RF_SYNTH_PFDCP_CPFF_7+0
0x2094	0x00C82000  	_mode+0
0x2098	0x343F0000  	_RF_FRR_CTL_A_MODE_4_data+0
0x209C	0x2004    MOVS	R0, #4
0x209E	0x7008    STRB	R0, [R1, #0]
;driverrf4463pro.c, 219 :: 		app_command_buf[ 7 ]  = 0xaa;       // field 1 crc enble, check enbale, There are also launchingCRC,cRC?Seed ?CRC_seed?????
0x20A0	0x4668    MOV	R0, SP
0x20A2	0x1DC1    ADDS	R1, R0, #7
0x20A4	0x20AA    MOVS	R0, #170
0x20A6	0x7008    STRB	R0, [R1, #0]
;driverrf4463pro.c, 220 :: 		app_command_buf[ 8 ]  = 0x00;       //  field 2 length(?4?)
0x20A8	0x4668    MOV	R0, SP
0x20AA	0x4601    MOV	R1, R0
0x20AC	0x3108    ADDS	R1, #8
0x20AE	0x2000    MOVS	R0, #0
0x20B0	0x7008    STRB	R0, [R1, #0]
;driverrf4463pro.c, 221 :: 		app_command_buf[ 9 ]  = 0x00;           //  field 2 length, (? 8?), length = 0 Means thisfield did not use
0x20B2	0x4668    MOV	R0, SP
0x20B4	0x4601    MOV	R1, R0
0x20B6	0x3109    ADDS	R1, #9
0x20B8	0x2000    MOVS	R0, #0
0x20BA	0x7008    STRB	R0, [R1, #0]
;driverrf4463pro.c, 222 :: 		app_command_buf[ 10 ] = 0x00;       // field 2 Is not 4FSK,manchest, whiting, PN9
0x20BC	0x4668    MOV	R0, SP
0x20BE	0x4601    MOV	R1, R0
0x20C0	0x310A    ADDS	R1, #10
0x20C2	0x2000    MOVS	R0, #0
0x20C4	0x7008    STRB	R0, [R1, #0]
;driverrf4463pro.c, 223 :: 		app_command_buf[ 11 ] = 0x00;       //  field 2 ?CRCSet up
0x20C6	0x4668    MOV	R0, SP
0x20C8	0x4601    MOV	R1, R0
0x20CA	0x310B    ADDS	R1, #11
0x20CC	0x2000    MOVS	R0, #0
0x20CE	0x7008    STRB	R0, [R1, #0]
;driverrf4463pro.c, 224 :: 		app_command_buf[ 12 ] = 0x00;       //  field 3 length, (? 8?), length = 0 Means thisfield did not use
0x20D0	0x4668    MOV	R0, SP
0x20D2	0x4601    MOV	R1, R0
0x20D4	0x310C    ADDS	R1, #12
0x20D6	0x2000    MOVS	R0, #0
0x20D8	0x7008    STRB	R0, [R1, #0]
;driverrf4463pro.c, 225 :: 		app_command_buf[ 13 ] = 0x00;           //  field 3 length, (? 8?), length = 0 Means thisfield did not use
0x20DA	0x4668    MOV	R0, SP
0x20DC	0x4601    MOV	R1, R0
0x20DE	0x310D    ADDS	R1, #13
0x20E0	0x2000    MOVS	R0, #0
0x20E2	0x7008    STRB	R0, [R1, #0]
;driverrf4463pro.c, 226 :: 		app_command_buf[ 14 ] = 0x00;       //  field 3 Is not 4FSK,manchest, whiting, PN9
0x20E4	0x4668    MOV	R0, SP
0x20E6	0x4601    MOV	R1, R0
0x20E8	0x310E    ADDS	R1, #14
0x20EA	0x2000    MOVS	R0, #0
0x20EC	0x7008    STRB	R0, [R1, #0]
;driverrf4463pro.c, 227 :: 		app_command_buf[ 15 ] = 0x00;       //  field 3 ?CRCSet up
0x20EE	0x4668    MOV	R0, SP
0x20F0	0x4601    MOV	R1, R0
0x20F2	0x310F    ADDS	R1, #15
0x20F4	0x2000    MOVS	R0, #0
0x20F6	0x7008    STRB	R0, [R1, #0]
;driverrf4463pro.c, 228 :: 		spi_write( 16, app_command_buf );
0x20F8	0x4668    MOV	R0, SP
0x20FA	0xB401    PUSH	(R0)
0x20FC	0x2010    MOVS	R0, #16
0x20FE	0xB401    PUSH	(R0)
0x2100	0xF7FEFD92  BL	_spi_write+0
0x2104	0xB002    ADD	SP, SP, #8
;driverrf4463pro.c, 231 :: 		app_command_buf[ 0 ]  = 0x11;
0x2106	0x4668    MOV	R0, SP
0x2108	0x1C01    ADDS	R1, R0, #0
0x210A	0x2011    MOVS	R0, #17
0x210C	0x7008    STRB	R0, [R1, #0]
;driverrf4463pro.c, 232 :: 		app_command_buf[ 1 ]  = 0x12;       // 0x1219
0x210E	0x4668    MOV	R0, SP
0x2110	0x1C41    ADDS	R1, R0, #1
0x2112	0x2012    MOVS	R0, #18
0x2114	0x7008    STRB	R0, [R1, #0]
;driverrf4463pro.c, 233 :: 		app_command_buf[ 2 ]  = 0x08;       // Total 8Parameters
0x2116	0x4668    MOV	R0, SP
0x2118	0x1C81    ADDS	R1, R0, #2
0x211A	0x2008    MOVS	R0, #8
0x211C	0x7008    STRB	R0, [R1, #0]
;driverrf4463pro.c, 234 :: 		app_command_buf[ 3 ]  = 0x19;       // 0x1219
0x211E	0x4668    MOV	R0, SP
0x2120	0x1CC1    ADDS	R1, R0, #3
0x2122	0x2019    MOVS	R0, #25
0x2124	0x7008    STRB	R0, [R1, #0]
;driverrf4463pro.c, 235 :: 		app_command_buf[ 4 ]  = 0x00;       // field4 length(?4?)
0x2126	0x4668    MOV	R0, SP
0x2128	0x1D01    ADDS	R1, R0, #4
0x212A	0x2000    MOVS	R0, #0
0x212C	0x7008    STRB	R0, [R1, #0]
;driverrf4463pro.c, 236 :: 		app_command_buf[ 5 ]  = 0x00;       // field 4 length, (? 8?), length = 0 Means this field did not use
0x212E	0x4668    MOV	R0, SP
0x2130	0x1D41    ADDS	R1, R0, #5
0x2132	0x2000    MOVS	R0, #0
0x2134	0x7008    STRB	R0, [R1, #0]
;driverrf4463pro.c, 237 :: 		app_command_buf[ 6 ]  = 0x00;       // field 4 Is not 4FSK,manchest, whiting, PN9
0x2136	0x4668    MOV	R0, SP
0x2138	0x1D81    ADDS	R1, R0, #6
0x213A	0x2000    MOVS	R0, #0
0x213C	0x7008    STRB	R0, [R1, #0]
;driverrf4463pro.c, 238 :: 		app_command_buf[ 7 ]  = 0x00;       // field 4 ?CRCSet up
0x213E	0x4668    MOV	R0, SP
0x2140	0x1DC1    ADDS	R1, R0, #7
0x2142	0x2000    MOVS	R0, #0
0x2144	0x7008    STRB	R0, [R1, #0]
;driverrf4463pro.c, 239 :: 		app_command_buf[ 8 ]  = 0x00;       // field5 length(?4?)
0x2146	0x4668    MOV	R0, SP
0x2148	0x4601    MOV	R1, R0
0x214A	0x3108    ADDS	R1, #8
0x214C	0x2000    MOVS	R0, #0
0x214E	0x7008    STRB	R0, [R1, #0]
;driverrf4463pro.c, 240 :: 		app_command_buf[ 9 ]  = 0x00;       // field 5 length, (? 8?), length = 0 Means this field did not use
0x2150	0x4668    MOV	R0, SP
0x2152	0x4601    MOV	R1, R0
0x2154	0x3109    ADDS	R1, #9
0x2156	0x2000    MOVS	R0, #0
0x2158	0x7008    STRB	R0, [R1, #0]
;driverrf4463pro.c, 241 :: 		app_command_buf[ 10 ] = 0x00;       // field 5 Is not 4FSK,manchest, whiting, PN9
0x215A	0x4668    MOV	R0, SP
0x215C	0x4601    MOV	R1, R0
0x215E	0x310A    ADDS	R1, #10
0x2160	0x2000    MOVS	R0, #0
0x2162	0x7008    STRB	R0, [R1, #0]
;driverrf4463pro.c, 242 :: 		app_command_buf[ 11 ] = 0x00;       // field 5 ?CRCSet up
0x2164	0x4668    MOV	R0, SP
0x2166	0x4601    MOV	R1, R0
0x2168	0x310B    ADDS	R1, #11
0x216A	0x2000    MOVS	R0, #0
0x216C	0x7008    STRB	R0, [R1, #0]
;driverrf4463pro.c, 243 :: 		spi_write( 12, app_command_buf );
0x216E	0x4668    MOV	R0, SP
0x2170	0xB401    PUSH	(R0)
0x2172	0x200C    MOVS	R0, #12
0x2174	0xB401    PUSH	(R0)
0x2176	0xF7FEFD57  BL	_spi_write+0
0x217A	0xB002    ADD	SP, SP, #8
;driverrf4463pro.c, 246 :: 		spi_write( 0x10, RF_MODEM_MOD_TYPE_12_data );   // //  2FSK ,  module source = PH fifo, disable manchest, tx, rx Do not flip, deviation Do not flip
0x217C	0x48A7    LDR	R0, [PC, #668]
0x217E	0xB401    PUSH	(R0)
0x2180	0x2010    MOVS	R0, #16
0x2182	0xB401    PUSH	(R0)
0x2184	0xF7FEFD50  BL	_spi_write+0
0x2188	0xB002    ADD	SP, SP, #8
;driverrf4463pro.c, 249 :: 		app_command_buf[0] = 0x11;
0x218A	0x4668    MOV	R0, SP
0x218C	0x1C01    ADDS	R1, R0, #0
0x218E	0x2011    MOVS	R0, #17
0x2190	0x7008    STRB	R0, [R1, #0]
;driverrf4463pro.c, 250 :: 		app_command_buf[1]  = 0x20;    // 0x200c
0x2192	0x4668    MOV	R0, SP
0x2194	0x1C41    ADDS	R1, R0, #1
0x2196	0x2020    MOVS	R0, #32
0x2198	0x7008    STRB	R0, [R1, #0]
;driverrf4463pro.c, 251 :: 		app_command_buf[2]  = 0x01;    // Total 1Parameters
0x219A	0x4668    MOV	R0, SP
0x219C	0x1C81    ADDS	R1, R0, #2
0x219E	0x2001    MOVS	R0, #1
0x21A0	0x7008    STRB	R0, [R1, #0]
;driverrf4463pro.c, 252 :: 		app_command_buf[3]  = 0x0c;   // 0x200c
0x21A2	0x4668    MOV	R0, SP
0x21A4	0x1CC1    ADDS	R1, R0, #3
0x21A6	0x200C    MOVS	R0, #12
0x21A8	0x7008    STRB	R0, [R1, #0]
;driverrf4463pro.c, 254 :: 		if ( freq3 < 8 ) {
0x21AA	0x489D    LDR	R0, [PC, #628]
0x21AC	0x7800    LDRB	R0, [R0, #0]
0x21AE	0x2808    CMP	R0, #8
0x21B0	0xD216    BCS	L_vRF4463Init96
;driverrf4463pro.c, 255 :: 		if ( rate >= dr_256k ) {
0x21B2	0x489C    LDR	R0, [PC, #624]
0x21B4	0x7800    LDRB	R0, [R0, #0]
0x21B6	0x2808    CMP	R0, #8
0x21B8	0xD304    BCC	L_vRF4463Init97
;driverrf4463pro.c, 256 :: 		app_command_buf[ 4 ] = 0x4f;
0x21BA	0x4668    MOV	R0, SP
0x21BC	0x1D01    ADDS	R1, R0, #4
0x21BE	0x204F    MOVS	R0, #79
0x21C0	0x7008    STRB	R0, [R1, #0]
;driverrf4463pro.c, 257 :: 		}
0x21C2	0xE00C    B	L_vRF4463Init98
L_vRF4463Init97:
;driverrf4463pro.c, 258 :: 		else if ( rate >= dr_19p2 ) {
0x21C4	0x4897    LDR	R0, [PC, #604]
0x21C6	0x7800    LDRB	R0, [R0, #0]
0x21C8	0x2804    CMP	R0, #4
0x21CA	0xD304    BCC	L_vRF4463Init99
;driverrf4463pro.c, 259 :: 		app_command_buf[ 4 ]  = 0x5e;
0x21CC	0x4668    MOV	R0, SP
0x21CE	0x1D01    ADDS	R1, R0, #4
0x21D0	0x205E    MOVS	R0, #94
0x21D2	0x7008    STRB	R0, [R1, #0]
;driverrf4463pro.c, 260 :: 		}
0x21D4	0xE003    B	L_vRF4463Init100
L_vRF4463Init99:
;driverrf4463pro.c, 262 :: 		app_command_buf[ 4 ]  = 0xd2;
0x21D6	0x4668    MOV	R0, SP
0x21D8	0x1D01    ADDS	R1, R0, #4
0x21DA	0x20D2    MOVS	R0, #210
0x21DC	0x7008    STRB	R0, [R1, #0]
;driverrf4463pro.c, 263 :: 		}
L_vRF4463Init100:
L_vRF4463Init98:
;driverrf4463pro.c, 264 :: 		}
0x21DE	0xE015    B	L_vRF4463Init101
L_vRF4463Init96:
;driverrf4463pro.c, 266 :: 		if ( rate >= dr_115p2 ) {
0x21E0	0x4890    LDR	R0, [PC, #576]
0x21E2	0x7800    LDRB	R0, [R0, #0]
0x21E4	0x2807    CMP	R0, #7
0x21E6	0xD304    BCC	L_vRF4463Init102
;driverrf4463pro.c, 267 :: 		app_command_buf[ 4 ]  = 0x69;        // 15k
0x21E8	0x4668    MOV	R0, SP
0x21EA	0x1D01    ADDS	R1, R0, #4
0x21EC	0x2069    MOVS	R0, #105
0x21EE	0x7008    STRB	R0, [R1, #0]
;driverrf4463pro.c, 268 :: 		}
0x21F0	0xE00C    B	L_vRF4463Init103
L_vRF4463Init102:
;driverrf4463pro.c, 269 :: 		else if ( rate >= dr_19p2 ) {
0x21F2	0x488C    LDR	R0, [PC, #560]
0x21F4	0x7800    LDRB	R0, [R0, #0]
0x21F6	0x2804    CMP	R0, #4
0x21F8	0xD304    BCC	L_vRF4463Init104
;driverrf4463pro.c, 270 :: 		app_command_buf[ 4 ]  = 0x5e;        // 10k
0x21FA	0x4668    MOV	R0, SP
0x21FC	0x1D01    ADDS	R1, R0, #4
0x21FE	0x205E    MOVS	R0, #94
0x2200	0x7008    STRB	R0, [R1, #0]
;driverrf4463pro.c, 271 :: 		}
0x2202	0xE003    B	L_vRF4463Init105
L_vRF4463Init104:
;driverrf4463pro.c, 273 :: 		app_command_buf[ 4 ]  = 0x18; // 8k
0x2204	0x4668    MOV	R0, SP
0x2206	0x1D01    ADDS	R1, R0, #4
0x2208	0x2018    MOVS	R0, #24
0x220A	0x7008    STRB	R0, [R1, #0]
;driverrf4463pro.c, 274 :: 		}
L_vRF4463Init105:
L_vRF4463Init103:
;driverrf4463pro.c, 275 :: 		}
L_vRF4463Init101:
;driverrf4463pro.c, 276 :: 		spi_write( 5, app_command_buf );
0x220C	0x4668    MOV	R0, SP
0x220E	0xB401    PUSH	(R0)
0x2210	0x2005    MOVS	R0, #5
0x2212	0xB401    PUSH	(R0)
0x2214	0xF7FEFD08  BL	_spi_write+0
0x2218	0xB002    ADD	SP, SP, #8
;driverrf4463pro.c, 279 :: 		spi_write( 0x0C, RF_MODEM_TX_RAMP_DELAY_8_data );            // Without this Parameters,Not needed
0x221A	0x4883    LDR	R0, [PC, #524]
0x221C	0xB401    PUSH	(R0)
0x221E	0x200C    MOVS	R0, #12
0x2220	0xB401    PUSH	(R0)
0x2222	0xF7FEFD01  BL	_spi_write+0
0x2226	0xB002    ADD	SP, SP, #8
;driverrf4463pro.c, 280 :: 		spi_write( 0x0D, RF_MODEM_BCR_OSR_1_9_data );                // Without this Parameters,Not needed
0x2228	0x4880    LDR	R0, [PC, #512]
0x222A	0xB401    PUSH	(R0)
0x222C	0x200D    MOVS	R0, #13
0x222E	0xB401    PUSH	(R0)
0x2230	0xF7FEFCFA  BL	_spi_write+0
0x2234	0xB002    ADD	SP, SP, #8
;driverrf4463pro.c, 281 :: 		spi_write( 0x0B, RF_MODEM_AFC_GEAR_7_data );                // Without this Parameters,Not needed
0x2236	0x487E    LDR	R0, [PC, #504]
0x2238	0xB401    PUSH	(R0)
0x223A	0x200B    MOVS	R0, #11
0x223C	0xB401    PUSH	(R0)
0x223E	0xF7FEFCF3  BL	_spi_write+0
0x2242	0xB002    ADD	SP, SP, #8
;driverrf4463pro.c, 282 :: 		spi_write( 0x05, RF_MODEM_AGC_CONTROL_1_data );                // Without this Parameters,Not needed
0x2244	0x487B    LDR	R0, [PC, #492]
0x2246	0xB401    PUSH	(R0)
0x2248	0x2005    MOVS	R0, #5
0x224A	0xB401    PUSH	(R0)
0x224C	0xF7FEFCEC  BL	_spi_write+0
0x2250	0xB002    ADD	SP, SP, #8
;driverrf4463pro.c, 283 :: 		spi_write( 0x0D, RF_MODEM_AGC_WINDOW_SIZE_9_data );        // Without this Parameters,Not needed
0x2252	0x4879    LDR	R0, [PC, #484]
0x2254	0xB401    PUSH	(R0)
0x2256	0x200D    MOVS	R0, #13
0x2258	0xB401    PUSH	(R0)
0x225A	0xF7FEFCE5  BL	_spi_write+0
0x225E	0xB002    ADD	SP, SP, #8
;driverrf4463pro.c, 284 :: 		spi_write( 0x0F, RF_MODEM_OOK_CNT1_11_data );                // Without this Parameters,Not needed
0x2260	0x4876    LDR	R0, [PC, #472]
0x2262	0xB401    PUSH	(R0)
0x2264	0x200F    MOVS	R0, #15
0x2266	0xB401    PUSH	(R0)
0x2268	0xF7FEFCDE  BL	_spi_write+0
0x226C	0xB002    ADD	SP, SP, #8
;driverrf4463pro.c, 287 :: 		app_command_buf[ 0 ] = 0x11;
0x226E	0x4668    MOV	R0, SP
0x2270	0x1C01    ADDS	R1, R0, #0
0x2272	0x2011    MOVS	R0, #17
0x2274	0x7008    STRB	R0, [R1, #0]
;driverrf4463pro.c, 288 :: 		app_command_buf[ 1 ] = 0x20;    // 0x204e
0x2276	0x4668    MOV	R0, SP
0x2278	0x1C41    ADDS	R1, R0, #1
0x227A	0x2020    MOVS	R0, #32
0x227C	0x7008    STRB	R0, [R1, #0]
;driverrf4463pro.c, 289 :: 		app_command_buf[ 2 ] = 0x01;    // Total 1Parameters
0x227E	0x4668    MOV	R0, SP
0x2280	0x1C81    ADDS	R1, R0, #2
0x2282	0x2001    MOVS	R0, #1
0x2284	0x7008    STRB	R0, [R1, #0]
;driverrf4463pro.c, 290 :: 		app_command_buf[ 3 ] = 0x4e;   // 0x204e
0x2286	0x4668    MOV	R0, SP
0x2288	0x1CC1    ADDS	R1, R0, #3
0x228A	0x204E    MOVS	R0, #78
0x228C	0x7008    STRB	R0, [R1, #0]
;driverrf4463pro.c, 292 :: 		if ( rate == dr_500 ) {
0x228E	0x4865    LDR	R0, [PC, #404]
0x2290	0x7800    LDRB	R0, [R0, #0]
0x2292	0x280A    CMP	R0, #10
0x2294	0xD104    BNE	L_vRF4463Init106
;driverrf4463pro.c, 293 :: 		app_command_buf[ 4 ] = 0x3a;
0x2296	0x4668    MOV	R0, SP
0x2298	0x1D01    ADDS	R1, R0, #4
0x229A	0x203A    MOVS	R0, #58
0x229C	0x7008    STRB	R0, [R1, #0]
;driverrf4463pro.c, 294 :: 		}
0x229E	0xE003    B	L_vRF4463Init107
L_vRF4463Init106:
;driverrf4463pro.c, 296 :: 		app_command_buf[ 4 ] = 0x40;  //  rssi Reading deviation, the difference with the true value
0x22A0	0x4668    MOV	R0, SP
0x22A2	0x1D01    ADDS	R1, R0, #4
0x22A4	0x2040    MOVS	R0, #64
0x22A6	0x7008    STRB	R0, [R1, #0]
;driverrf4463pro.c, 297 :: 		}
L_vRF4463Init107:
;driverrf4463pro.c, 298 :: 		spi_write( 5, app_command_buf );
0x22A8	0x4668    MOV	R0, SP
0x22AA	0xB401    PUSH	(R0)
0x22AC	0x2005    MOVS	R0, #5
0x22AE	0xB401    PUSH	(R0)
0x22B0	0xF7FEFCBA  BL	_spi_write+0
0x22B4	0xB002    ADD	SP, SP, #8
;driverrf4463pro.c, 301 :: 		spi_write( 0x10, RF_MODEM_CHFLT_RX1_CHFLT_COE13_7_0_12_data );  // Without this Parameters,Not needed
0x22B6	0x4862    LDR	R0, [PC, #392]
0x22B8	0xB401    PUSH	(R0)
0x22BA	0x2010    MOVS	R0, #16
0x22BC	0xB401    PUSH	(R0)
0x22BE	0xF7FEFCB3  BL	_spi_write+0
0x22C2	0xB002    ADD	SP, SP, #8
;driverrf4463pro.c, 302 :: 		spi_write( 0x10, RF_MODEM_CHFLT_RX1_CHFLT_COE1_7_0_12_data );   // Without this Parameters,Not needed
0x22C4	0x485F    LDR	R0, [PC, #380]
0x22C6	0xB401    PUSH	(R0)
0x22C8	0x2010    MOVS	R0, #16
0x22CA	0xB401    PUSH	(R0)
0x22CC	0xF7FEFCAC  BL	_spi_write+0
0x22D0	0xB002    ADD	SP, SP, #8
;driverrf4463pro.c, 303 :: 		spi_write( 0x10, RF_MODEM_CHFLT_RX2_CHFLT_COE7_7_0_12_data );   // Without this Parameters,Not needed
0x22D2	0x485D    LDR	R0, [PC, #372]
0x22D4	0xB401    PUSH	(R0)
0x22D6	0x2010    MOVS	R0, #16
0x22D8	0xB401    PUSH	(R0)
0x22DA	0xF7FEFCA5  BL	_spi_write+0
0x22DE	0xB002    ADD	SP, SP, #8
;driverrf4463pro.c, 306 :: 		app_command_buf[ 0 ]  = 0x11;
0x22E0	0x4668    MOV	R0, SP
0x22E2	0x1C01    ADDS	R1, R0, #0
0x22E4	0x2011    MOVS	R0, #17
0x22E6	0x7008    STRB	R0, [R1, #0]
;driverrf4463pro.c, 307 :: 		app_command_buf[ 1 ]  = 0x22;    // 0x2200
0x22E8	0x4668    MOV	R0, SP
0x22EA	0x1C41    ADDS	R1, R0, #1
0x22EC	0x2022    MOVS	R0, #34
0x22EE	0x7008    STRB	R0, [R1, #0]
;driverrf4463pro.c, 308 :: 		app_command_buf[ 2 ]  = 0x04;    // Total 4Parameters
0x22F0	0x4668    MOV	R0, SP
0x22F2	0x1C81    ADDS	R1, R0, #2
0x22F4	0x2004    MOVS	R0, #4
0x22F6	0x7008    STRB	R0, [R1, #0]
;driverrf4463pro.c, 309 :: 		app_command_buf[ 3 ]  = 0x00;   // 0x2200
0x22F8	0x4668    MOV	R0, SP
0x22FA	0x1CC1    ADDS	R1, R0, #3
0x22FC	0x2000    MOVS	R0, #0
0x22FE	0x7008    STRB	R0, [R1, #0]
;driverrf4463pro.c, 310 :: 		app_command_buf[ 4 ]  = 0x08;  //0x10;   //   PA mode  = default , ??Class E mode,?Is not Switch Current mode  ????????
0x2300	0x4668    MOV	R0, SP
0x2302	0x1D01    ADDS	R1, R0, #4
0x2304	0x2008    MOVS	R0, #8
0x2306	0x7008    STRB	R0, [R1, #0]
;driverrf4463pro.c, 336 :: 		if ( power > 0 || power < 127 ) {
0x2308	0x4850    LDR	R0, [PC, #320]
0x230A	0x7800    LDRB	R0, [R0, #0]
0x230C	0x2800    CMP	R0, #0
0x230E	0xD804    BHI	L__vRF4463Init252
0x2310	0x484E    LDR	R0, [PC, #312]
0x2312	0x7800    LDRB	R0, [R0, #0]
0x2314	0x287F    CMP	R0, #127
0x2316	0xD300    BCC	L__vRF4463Init252
0x2318	0xE005    B	L_vRF4463Init110
L__vRF4463Init252:
;driverrf4463pro.c, 337 :: 		app_command_buf[ 5 ]  = power;   //  Set to maximum power
0x231A	0x4668    MOV	R0, SP
0x231C	0x1D41    ADDS	R1, R0, #5
0x231E	0x484B    LDR	R0, [PC, #300]
0x2320	0x7800    LDRB	R0, [R0, #0]
0x2322	0x7008    STRB	R0, [R1, #0]
;driverrf4463pro.c, 338 :: 		}
0x2324	0xE003    B	L_vRF4463Init111
L_vRF4463Init110:
;driverrf4463pro.c, 340 :: 		app_command_buf[ 5 ]  = 127;
0x2326	0x4668    MOV	R0, SP
0x2328	0x1D41    ADDS	R1, R0, #5
0x232A	0x207F    MOVS	R0, #127
0x232C	0x7008    STRB	R0, [R1, #0]
;driverrf4463pro.c, 341 :: 		}
L_vRF4463Init111:
;driverrf4463pro.c, 343 :: 		app_command_buf[ 6 ] = 0x00; //???????? 0x00;   // CLK duty = 50%, other = Default
0x232E	0x4668    MOV	R0, SP
0x2330	0x1D81    ADDS	R1, R0, #6
0x2332	0x2000    MOVS	R0, #0
0x2334	0x7008    STRB	R0, [R1, #0]
;driverrf4463pro.c, 345 :: 		if ( ( rate <= dr_115p2 )||( rate == dr_500 ) ) {
0x2336	0x483B    LDR	R0, [PC, #236]
0x2338	0x7800    LDRB	R0, [R0, #0]
0x233A	0x2807    CMP	R0, #7
0x233C	0xD904    BLS	L__vRF4463Init251
0x233E	0x4839    LDR	R0, [PC, #228]
0x2340	0x7800    LDRB	R0, [R0, #0]
0x2342	0x280A    CMP	R0, #10
0x2344	0xD000    BEQ	L__vRF4463Init251
0x2346	0xE004    B	L_vRF4463Init114
L__vRF4463Init251:
;driverrf4463pro.c, 346 :: 		app_command_buf[ 7 ]  = 0x3d;  // ???????? 0x5d;   // PA ramp time = default
0x2348	0x4668    MOV	R0, SP
0x234A	0x1DC1    ADDS	R1, R0, #7
0x234C	0x203D    MOVS	R0, #61
0x234E	0x7008    STRB	R0, [R1, #0]
;driverrf4463pro.c, 347 :: 		}
0x2350	0xE003    B	L_vRF4463Init115
L_vRF4463Init114:
;driverrf4463pro.c, 349 :: 		app_command_buf[ 7 ]  = 0x5d;
0x2352	0x4668    MOV	R0, SP
0x2354	0x1DC1    ADDS	R1, R0, #7
0x2356	0x205D    MOVS	R0, #93
0x2358	0x7008    STRB	R0, [R1, #0]
;driverrf4463pro.c, 350 :: 		}
L_vRF4463Init115:
;driverrf4463pro.c, 351 :: 		spi_write( 8, app_command_buf );
0x235A	0x4668    MOV	R0, SP
0x235C	0xB401    PUSH	(R0)
0x235E	0x2008    MOVS	R0, #8
0x2360	0xB401    PUSH	(R0)
0x2362	0xF7FEFC61  BL	_spi_write+0
0x2366	0xB002    ADD	SP, SP, #8
;driverrf4463pro.c, 355 :: 		spi_write( 0x0B , RF_SYNTH_PFDCP_CPFF_7_data );      // Without this Parameters,Not needed
0x2368	0x4839    LDR	R0, [PC, #228]
0x236A	0xB401    PUSH	(R0)
0x236C	0x200B    MOVS	R0, #11
0x236E	0xB401    PUSH	(R0)
0x2370	0xF7FEFC5A  BL	_spi_write+0
0x2374	0xB002    ADD	SP, SP, #8
;driverrf4463pro.c, 358 :: 		app_command_buf[ 0 ]  = 0x11;    // SetProperty
0x2376	0x4668    MOV	R0, SP
0x2378	0x1C01    ADDS	R1, R0, #0
0x237A	0x2011    MOVS	R0, #17
0x237C	0x7008    STRB	R0, [R1, #0]
;driverrf4463pro.c, 359 :: 		app_command_buf[ 1 ]  = 0x30;    // 0x30 group
0x237E	0x4668    MOV	R0, SP
0x2380	0x1C41    ADDS	R1, R0, #1
0x2382	0x2030    MOVS	R0, #48
0x2384	0x7008    STRB	R0, [R1, #0]
;driverrf4463pro.c, 360 :: 		app_command_buf[ 2 ]  = 0x0c;    // Total 12 Parameters
0x2386	0x4668    MOV	R0, SP
0x2388	0x1C81    ADDS	R1, R0, #2
0x238A	0x200C    MOVS	R0, #12
0x238C	0x7008    STRB	R0, [R1, #0]
;driverrf4463pro.c, 361 :: 		app_command_buf[ 3 ]  = 0x00;    // 0x00 Index
0x238E	0x4668    MOV	R0, SP
0x2390	0x1CC1    ADDS	R1, R0, #3
0x2392	0x2000    MOVS	R0, #0
0x2394	0x7008    STRB	R0, [R1, #0]
;driverrf4463pro.c, 362 :: 		app_command_buf[ 4 ]  = 's';     // match 1 Value of
0x2396	0x4668    MOV	R0, SP
0x2398	0x1D01    ADDS	R1, R0, #4
0x239A	0x2073    MOVS	R0, #115
0x239C	0x7008    STRB	R0, [R1, #0]
;driverrf4463pro.c, 363 :: 		app_command_buf[ 5 ]  = 0xFF;    // match 1 mask
0x239E	0x4668    MOV	R0, SP
0x23A0	0x1D41    ADDS	R1, R0, #5
0x23A2	0x20FF    MOVS	R0, #255
0x23A4	0x7008    STRB	R0, [R1, #0]
;driverrf4463pro.c, 364 :: 		app_command_buf[ 6 ]  = 0x40;    // enable match 1, match 1 The distance between the value of and the synchronization word, 0 = match
0x23A6	0x4668    MOV	R0, SP
0x23A8	0x1D81    ADDS	R1, R0, #6
0x23AA	0x2040    MOVS	R0, #64
0x23AC	0x7008    STRB	R0, [R1, #0]
;driverrf4463pro.c, 365 :: 		app_command_buf[ 7 ]  = 'w';     // match 2 Value of
0x23AE	0x4668    MOV	R0, SP
0x23B0	0x1DC1    ADDS	R1, R0, #7
0x23B2	0x2077    MOVS	R0, #119
0x23B4	0x7008    STRB	R0, [R1, #0]
;driverrf4463pro.c, 366 :: 		app_command_buf[ 8 ]  = 0xFF;    // match 2 mask
0x23B6	0x4668    MOV	R0, SP
0x23B8	0x4601    MOV	R1, R0
0x23BA	0x3108    ADDS	R1, #8
0x23BC	0x20FF    MOVS	R0, #255
0x23BE	0x7008    STRB	R0, [R1, #0]
;driverrf4463pro.c, 367 :: 		app_command_buf[ 9 ]  = 0x01;    // enable match 2, match 2 The distance between the value of and the synchronization word  , and function
0x23C0	0x4668    MOV	R0, SP
0x23C2	0x4601    MOV	R1, R0
0x23C4	0x3109    ADDS	R1, #9
0x23C6	0x2001    MOVS	R0, #1
0x23C8	0x7008    STRB	R0, [R1, #0]
;driverrf4463pro.c, 368 :: 		app_command_buf[ 10 ] = 'w';     // match 3 Value of
0x23CA	0x4668    MOV	R0, SP
0x23CC	0x4601    MOV	R1, R0
0x23CE	0x310A    ADDS	R1, #10
0x23D0	0x2077    MOVS	R0, #119
0x23D2	0x7008    STRB	R0, [R1, #0]
;driverrf4463pro.c, 369 :: 		app_command_buf[ 11 ] = 0xFF;;   // match 3 mask
0x23D4	0x4668    MOV	R0, SP
0x23D6	0x4601    MOV	R1, R0
0x23D8	0x310B    ADDS	R1, #11
0x23DA	0x20FF    MOVS	R0, #255
0x23DC	0x7008    STRB	R0, [R1, #0]
;driverrf4463pro.c, 370 :: 		app_command_buf[ 12 ] = 0x02;;   // enable match 3, match 3 The distance between the value of and the synchronization word    and function
0x23DE	0x4668    MOV	R0, SP
0x23E0	0x4601    MOV	R1, R0
0x23E2	0x310C    ADDS	R1, #12
0x23E4	0x2002    MOVS	R0, #2
0x23E6	0x7008    STRB	R0, [R1, #0]
;driverrf4463pro.c, 371 :: 		app_command_buf[ 13 ] = 'x';     // match 4 Value of
0x23E8	0x4668    MOV	R0, SP
0x23EA	0x4601    MOV	R1, R0
0x23EC	0x310D    ADDS	R1, #13
0x23EE	0x2078    MOVS	R0, #120
0x23F0	0x7008    STRB	R0, [R1, #0]
;driverrf4463pro.c, 372 :: 		app_command_buf[ 14 ] = 0xFF;    // match 4 mask
0x23F2	0x4668    MOV	R0, SP
0x23F4	0x4601    MOV	R1, R0
0x23F6	0x310E    ADDS	R1, #14
0x23F8	0x20FF    MOVS	R0, #255
0x23FA	0x7008    STRB	R0, [R1, #0]
;driverrf4463pro.c, 373 :: 		app_command_buf[ 15 ] = 0x03;    // enable match 4, match 4 The distance between the value of and the synchronization word    and function
0x23FC	0x4668    MOV	R0, SP
0x23FE	0x4601    MOV	R1, R0
0x2400	0x310F    ADDS	R1, #15
0x2402	0x2003    MOVS	R0, #3
0x2404	0x7008    STRB	R0, [R1, #0]
;driverrf4463pro.c, 374 :: 		spi_write( 16, app_command_buf );
0x2406	0x4668    MOV	R0, SP
0x2408	0xB401    PUSH	(R0)
0x240A	0x2010    MOVS	R0, #16
0x240C	0xB401    PUSH	(R0)
0x240E	0xF7FEFC0B  BL	_spi_write+0
0x2412	0xB002    ADD	SP, SP, #8
;driverrf4463pro.c, 376 :: 		rf_init_freq();     // FUNCION DE FRECUENCIA ( REVISAR PARAMETROS )
0x2414	0xF7FEFACE  BL	_rf_init_freq+0
;driverrf4463pro.c, 377 :: 		}
L_end_vRF4463Init:
0x2418	0xB006    ADD	SP, SP, #24
0x241A	0xBD00    POP	(R15)
0x241C	0x00002000  	_RF_MODEM_MOD_TYPE_12_data+0
0x2420	0x008F2000  	_freq3+0
0x2424	0x00C72000  	_rate+0
0x2428	0x00102000  	_RF_MODEM_TX_RAMP_DELAY_8_data+0
0x242C	0x00752000  	_RF_MODEM_BCR_OSR_1_9_data+0
0x2430	0x001C2000  	_RF_MODEM_AFC_GEAR_7_data+0
0x2434	0x345F0000  	_RF_MODEM_AGC_CONTROL_1_data+0
0x2438	0x00682000  	_RF_MODEM_AGC_WINDOW_SIZE_9_data+0
0x243C	0x00292000  	_RF_MODEM_OOK_CNT1_11_data+0
0x2440	0x00382000  	_RF_MODEM_CHFLT_RX1_CHFLT_COE13_7_0_12_data+0
0x2444	0x00482000  	_RF_MODEM_CHFLT_RX1_CHFLT_COE1_7_0_12_data+0
0x2448	0x00582000  	_RF_MODEM_CHFLT_RX2_CHFLT_COE7_7_0_12_data+0
0x244C	0x00C92000  	_power+0
0x2450	0x00822000  	_RF_SYNTH_PFDCP_CPFF_7_data+0
; end of _vRF4463Init
_vRF4463GPIO_SET:
;driverrf4463pro.c, 383 :: 		void vRF4463GPIO_SET( unsigned char ucData ) {
0x0904	0xB500    PUSH	(R14)
0x0906	0xB082    SUB	SP, SP, #8
;driverrf4463pro.c, 386 :: 		ucAppCommandBuf[0] = 0x13;     // gpio Set up
0x0908	0x4668    MOV	R0, SP
0x090A	0x1C01    ADDS	R1, R0, #0
0x090C	0x2013    MOVS	R0, #19
0x090E	0x7008    STRB	R0, [R1, #0]
;driverrf4463pro.c, 388 :: 		switch ( ucData ) {
0x0910	0xE023    B	L_vRF4463GPIO_SET116
;driverrf4463pro.c, 389 :: 		case tx_normal:
L_vRF4463GPIO_SET118:
;driverrf4463pro.c, 390 :: 		case rx_normal: ucAppCommandBuf[ 1 ] = 3;                 // GPIO0=1
L_vRF4463GPIO_SET119:
0x0912	0x4668    MOV	R0, SP
0x0914	0x1C41    ADDS	R1, R0, #1
0x0916	0x2003    MOVS	R0, #3
0x0918	0x7008    STRB	R0, [R1, #0]
;driverrf4463pro.c, 391 :: 		ucAppCommandBuf[ 2 ] = 2;                // GPIO1=0
0x091A	0x4668    MOV	R0, SP
0x091C	0x1C81    ADDS	R1, R0, #2
0x091E	0x2002    MOVS	R0, #2
0x0920	0x7008    STRB	R0, [R1, #0]
;driverrf4463pro.c, 392 :: 		break;
0x0922	0xE02E    B	L_vRF4463GPIO_SET117
;driverrf4463pro.c, 394 :: 		case tx_test:   ucAppCommandBuf[ 1 ] = 3;                 // GPIO0=1
L_vRF4463GPIO_SET120:
0x0924	0x4668    MOV	R0, SP
0x0926	0x1C41    ADDS	R1, R0, #1
0x0928	0x2003    MOVS	R0, #3
0x092A	0x7008    STRB	R0, [R1, #0]
;driverrf4463pro.c, 395 :: 		ucAppCommandBuf[ 2 ] = 3;                // GPIO1=1
0x092C	0x4668    MOV	R0, SP
0x092E	0x1C81    ADDS	R1, R0, #2
0x0930	0x2003    MOVS	R0, #3
0x0932	0x7008    STRB	R0, [R1, #0]
;driverrf4463pro.c, 396 :: 		break;
0x0934	0xE025    B	L_vRF4463GPIO_SET117
;driverrf4463pro.c, 398 :: 		case rx_test:   ucAppCommandBuf[ 1 ] = 2;                 // GPIO0=0
L_vRF4463GPIO_SET121:
0x0936	0x4668    MOV	R0, SP
0x0938	0x1C41    ADDS	R1, R0, #1
0x093A	0x2002    MOVS	R0, #2
0x093C	0x7008    STRB	R0, [R1, #0]
;driverrf4463pro.c, 399 :: 		ucAppCommandBuf[ 2 ] = 20;                // GPIO1=RX DATA
0x093E	0x4668    MOV	R0, SP
0x0940	0x1C81    ADDS	R1, R0, #2
0x0942	0x2014    MOVS	R0, #20
0x0944	0x7008    STRB	R0, [R1, #0]
;driverrf4463pro.c, 400 :: 		break;
0x0946	0xE01C    B	L_vRF4463GPIO_SET117
;driverrf4463pro.c, 402 :: 		case rf_off:    ucAppCommandBuf[ 1 ] = 2;                 // GPIO0=0
L_vRF4463GPIO_SET122:
0x0948	0x4668    MOV	R0, SP
0x094A	0x1C41    ADDS	R1, R0, #1
0x094C	0x2002    MOVS	R0, #2
0x094E	0x7008    STRB	R0, [R1, #0]
;driverrf4463pro.c, 403 :: 		ucAppCommandBuf[ 2 ] = 2;                // GPIO1=0
0x0950	0x4668    MOV	R0, SP
0x0952	0x1C81    ADDS	R1, R0, #2
0x0954	0x2002    MOVS	R0, #2
0x0956	0x7008    STRB	R0, [R1, #0]
;driverrf4463pro.c, 404 :: 		break;
0x0958	0xE013    B	L_vRF4463GPIO_SET117
;driverrf4463pro.c, 405 :: 		}
L_vRF4463GPIO_SET116:
0x095A	0x9803    LDR	R0, [SP, #12]
0x095C	0xB2C0    UXTB	R0, R0
0x095E	0x2800    CMP	R0, #0
0x0960	0xD0D7    BEQ	L_vRF4463GPIO_SET118
0x0962	0x9803    LDR	R0, [SP, #12]
0x0964	0xB2C0    UXTB	R0, R0
0x0966	0x2801    CMP	R0, #1
0x0968	0xD0D3    BEQ	L_vRF4463GPIO_SET119
0x096A	0x9803    LDR	R0, [SP, #12]
0x096C	0xB2C0    UXTB	R0, R0
0x096E	0x2802    CMP	R0, #2
0x0970	0xD0D8    BEQ	L_vRF4463GPIO_SET120
0x0972	0x9803    LDR	R0, [SP, #12]
0x0974	0xB2C0    UXTB	R0, R0
0x0976	0x2803    CMP	R0, #3
0x0978	0xD0DD    BEQ	L_vRF4463GPIO_SET121
0x097A	0x9803    LDR	R0, [SP, #12]
0x097C	0xB2C0    UXTB	R0, R0
0x097E	0x2804    CMP	R0, #4
0x0980	0xD0E2    BEQ	L_vRF4463GPIO_SET122
L_vRF4463GPIO_SET117:
;driverrf4463pro.c, 407 :: 		ucAppCommandBuf[ 3 ]  = 0x21;     //0x20;   //  gpio2, h = tx mode
0x0982	0x4668    MOV	R0, SP
0x0984	0x1CC1    ADDS	R1, R0, #3
0x0986	0x2021    MOVS	R0, #33
0x0988	0x7008    STRB	R0, [R1, #0]
;driverrf4463pro.c, 408 :: 		ucAppCommandBuf[ 4 ]  = 0x20;     // 0x14;  //   gpio3
0x098A	0x4668    MOV	R0, SP
0x098C	0x1D01    ADDS	R1, R0, #4
0x098E	0x2020    MOVS	R0, #32
0x0990	0x7008    STRB	R0, [R1, #0]
;driverrf4463pro.c, 409 :: 		ucAppCommandBuf[ 5 ]  = 0x27;     // nIRQ
0x0992	0x4668    MOV	R0, SP
0x0994	0x1D41    ADDS	R1, R0, #5
0x0996	0x2027    MOVS	R0, #39
0x0998	0x7008    STRB	R0, [R1, #0]
;driverrf4463pro.c, 410 :: 		ucAppCommandBuf[ 6 ]  = 0x0b;     // sdo
0x099A	0x4668    MOV	R0, SP
0x099C	0x1D81    ADDS	R1, R0, #6
0x099E	0x200B    MOVS	R0, #11
0x09A0	0x7008    STRB	R0, [R1, #0]
;driverrf4463pro.c, 411 :: 		spi_write( 7, ucAppCommandBuf );
0x09A2	0x4668    MOV	R0, SP
0x09A4	0xB401    PUSH	(R0)
0x09A6	0x2007    MOVS	R0, #7
0x09A8	0xB401    PUSH	(R0)
0x09AA	0xF000F93D  BL	_spi_write+0
0x09AE	0xB002    ADD	SP, SP, #8
;driverrf4463pro.c, 412 :: 		}
L_end_vRF4463GPIO_SET:
0x09B0	0xB002    ADD	SP, SP, #8
0x09B2	0xBD00    POP	(R15)
; end of _vRF4463GPIO_SET
_spi_write:
;driverrf4463pro.c, 814 :: 		void spi_write( unsigned char tx_length, unsigned char *p ) {
0x0C28	0xB500    PUSH	(R14)
0x0C2A	0xB082    SUB	SP, SP, #8
;driverrf4463pro.c, 817 :: 		i = 0;
0x0C2C	0x2000    MOVS	R0, #0
0x0C2E	0x9000    STR	R0, [SP, #0]
;driverrf4463pro.c, 818 :: 		while ( i != 0xFF ) {
L_spi_write145:
0x0C30	0x9800    LDR	R0, [SP, #0]
0x0C32	0xB2C0    UXTB	R0, R0
0x0C34	0x28FF    CMP	R0, #255
0x0C36	0xD003    BEQ	L_spi_write146
;driverrf4463pro.c, 819 :: 		i = check_cts();
0x0C38	0xF7FFFC40  BL	_check_cts+0
0x0C3C	0x9000    STR	R0, [SP, #0]
;driverrf4463pro.c, 820 :: 		}
0x0C3E	0xE7F7    B	L_spi_write145
L_spi_write146:
;driverrf4463pro.c, 822 :: 		nSEL = 0;                              // habilita escritura
0x0C40	0x4A12    LDR	R2, [PC, #72]
0x0C42	0x6810    LDR	R0, [R2, #0]
0x0C44	0x2108    MOVS	R1, #8
0x0C46	0x4388    BICS	R0, R1
0x0C48	0x6010    STR	R0, [R2, #0]
;driverrf4463pro.c, 824 :: 		for ( i = 0; i < tx_length; i++ ) {
0x0C4A	0x2000    MOVS	R0, #0
0x0C4C	0x9000    STR	R0, [SP, #0]
L_spi_write147:
0x0C4E	0x9903    LDR	R1, [SP, #12]
0x0C50	0xB2C9    UXTB	R1, R1
0x0C52	0x9800    LDR	R0, [SP, #0]
0x0C54	0xB2C0    UXTB	R0, R0
0x0C56	0x4288    CMP	R0, R1
0x0C58	0xD210    BCS	L_spi_write148
;driverrf4463pro.c, 825 :: 		j = *( p + i );
0x0C5A	0x9900    LDR	R1, [SP, #0]
0x0C5C	0xB2C9    UXTB	R1, R1
0x0C5E	0x9804    LDR	R0, [SP, #16]
0x0C60	0x1840    ADDS	R0, R0, R1
0x0C62	0x7800    LDRB	R0, [R0, #0]
0x0C64	0x9001    STR	R0, [SP, #4]
;driverrf4463pro.c, 826 :: 		ucRf4463SPIByte( j );
0x0C66	0x9801    LDR	R0, [SP, #4]
0x0C68	0xB2C0    UXTB	R0, R0
0x0C6A	0xB401    PUSH	(R0)
0x0C6C	0xF7FFFB6E  BL	_ucRf4463SPIByte+0
0x0C70	0xB001    ADD	SP, SP, #4
;driverrf4463pro.c, 824 :: 		for ( i = 0; i < tx_length; i++ ) {
0x0C72	0x9800    LDR	R0, [SP, #0]
0x0C74	0xB2C0    UXTB	R0, R0
0x0C76	0x3001    ADDS	R0, #1
0x0C78	0x9000    STR	R0, [SP, #0]
;driverrf4463pro.c, 827 :: 		}
0x0C7A	0xE7E8    B	L_spi_write147
L_spi_write148:
;driverrf4463pro.c, 829 :: 		nSEL = 1;                              // desabilita escritura
0x0C7C	0x4A03    LDR	R2, [PC, #12]
0x0C7E	0x6810    LDR	R0, [R2, #0]
0x0C80	0x2108    MOVS	R1, #8
0x0C82	0x4308    ORRS	R0, R1
0x0C84	0x6010    STR	R0, [R2, #0]
;driverrf4463pro.c, 830 :: 		}
L_end_spi_write:
0x0C86	0xB002    ADD	SP, SP, #8
0x0C88	0xBD00    POP	(R15)
0x0C8A	0xBF00    NOP
0x0C8C	0x00145000  	GPIOA_ODRbits+0
; end of _spi_write
_check_cts:
;driverrf4463pro.c, 835 :: 		unsigned char check_cts( void ) {           // This Command follows the Command and reads the response
0x04BC	0xB500    PUSH	(R14)
0x04BE	0xB081    SUB	SP, SP, #4
;driverrf4463pro.c, 838 :: 		nSEL = 1;
0x04C0	0x4A0E    LDR	R2, [PC, #56]
0x04C2	0x6810    LDR	R0, [R2, #0]
0x04C4	0x2108    MOVS	R1, #8
0x04C6	0x4308    ORRS	R0, R1
0x04C8	0x6010    STR	R0, [R2, #0]
;driverrf4463pro.c, 839 :: 		nSEL = 0;
0x04CA	0x4A0C    LDR	R2, [PC, #48]
0x04CC	0x6810    LDR	R0, [R2, #0]
0x04CE	0x2108    MOVS	R1, #8
0x04D0	0x4388    BICS	R0, R1
0x04D2	0x6010    STR	R0, [R2, #0]
;driverrf4463pro.c, 840 :: 		ucRf4463SPIByte( 0x44 );
0x04D4	0x2044    MOVS	R0, #68
0x04D6	0xB401    PUSH	(R0)
0x04D8	0xF7FFFF38  BL	_ucRf4463SPIByte+0
0x04DC	0xB001    ADD	SP, SP, #4
;driverrf4463pro.c, 841 :: 		i = ucRf4463SPIByte( 0 );
0x04DE	0x2000    MOVS	R0, #0
0x04E0	0xB401    PUSH	(R0)
0x04E2	0xF7FFFF33  BL	_ucRf4463SPIByte+0
0x04E6	0xB001    ADD	SP, SP, #4
0x04E8	0x9000    STR	R0, [SP, #0]
;driverrf4463pro.c, 842 :: 		nSEL = 1;
0x04EA	0x4A04    LDR	R2, [PC, #16]
0x04EC	0x6810    LDR	R0, [R2, #0]
0x04EE	0x2108    MOVS	R1, #8
0x04F0	0x4308    ORRS	R0, R1
0x04F2	0x6010    STR	R0, [R2, #0]
;driverrf4463pro.c, 843 :: 		return ( i );
0x04F4	0x9800    LDR	R0, [SP, #0]
0x04F6	0xB2C0    UXTB	R0, R0
;driverrf4463pro.c, 844 :: 		}
L_end_check_cts:
0x04F8	0xB001    ADD	SP, SP, #4
0x04FA	0xBD00    POP	(R15)
0x04FC	0x00145000  	GPIOA_ODRbits+0
; end of _check_cts
_rf_init_freq:
;driverrf4463pro.c, 638 :: 		void rf_init_freq ( void ) {
0x09B4	0xB500    PUSH	(R14)
0x09B6	0xB090    SUB	SP, SP, #64
;driverrf4463pro.c, 644 :: 		ulFrequency = ( freq3 * 100) + ( freq2 * 10) + freq1;
0x09B8	0x487F    LDR	R0, [PC, #508]
0x09BA	0x7801    LDRB	R1, [R0, #0]
0x09BC	0x2064    MOVS	R0, #100
0x09BE	0x4603    MOV	R3, R0
0x09C0	0x434B    MULS	R3, R1, R3
0x09C2	0xB21B    SXTH	R3, R3
0x09C4	0x487D    LDR	R0, [PC, #500]
0x09C6	0x7802    LDRB	R2, [R0, #0]
0x09C8	0x210A    MOVS	R1, #10
0x09CA	0x4608    MOV	R0, R1
0x09CC	0x4350    MULS	R0, R2, R0
0x09CE	0xB200    SXTH	R0, R0
0x09D0	0x1819    ADDS	R1, R3, R0
0x09D2	0xB209    SXTH	R1, R1
0x09D4	0x487A    LDR	R0, [PC, #488]
0x09D6	0x7800    LDRB	R0, [R0, #0]
0x09D8	0x1808    ADDS	R0, R1, R0
0x09DA	0xB200    SXTH	R0, R0
0x09DC	0x900A    STR	R0, [SP, #40]
;driverrf4463pro.c, 646 :: 		ulFrequency = ( ulFrequency * 10000);
0x09DE	0x9A0A    LDR	R2, [SP, #40]
0x09E0	0x4978    LDR	R1, [PC, #480]
0x09E2	0x4608    MOV	R0, R1
0x09E4	0x4350    MULS	R0, R2, R0
0x09E6	0x900A    STR	R0, [SP, #40]
;driverrf4463pro.c, 649 :: 		if ( ulFrequency >= 7600000 ) {
0x09E8	0x990A    LDR	R1, [SP, #40]
0x09EA	0x4877    LDR	R0, [PC, #476]
0x09EC	0x4281    CMP	R1, R0
0x09EE	0xD306    BCC	L_rf_init_freq133
;driverrf4463pro.c, 650 :: 		ucOUTDIV = 4;
0x09F0	0x2004    MOVS	R0, #4
0x09F2	0x9000    STR	R0, [SP, #0]
;driverrf4463pro.c, 651 :: 		ucBAND = 0;
0x09F4	0x2000    MOVS	R0, #0
0x09F6	0x9004    STR	R0, [SP, #16]
;driverrf4463pro.c, 652 :: 		ucVCO = 0xFF;
0x09F8	0x20FF    MOVS	R0, #255
0x09FA	0x9002    STR	R0, [SP, #8]
;driverrf4463pro.c, 653 :: 		}
0x09FC	0xE031    B	L_rf_init_freq134
L_rf_init_freq133:
;driverrf4463pro.c, 656 :: 		else if ( ulFrequency >= 5460000 ) {
0x09FE	0x990A    LDR	R1, [SP, #40]
0x0A00	0x4872    LDR	R0, [PC, #456]
0x0A02	0x4281    CMP	R1, R0
0x0A04	0xD306    BCC	L_rf_init_freq135
;driverrf4463pro.c, 657 :: 		ucOUTDIV = 6;
0x0A06	0x2006    MOVS	R0, #6
0x0A08	0x9000    STR	R0, [SP, #0]
;driverrf4463pro.c, 658 :: 		ucBAND   = 1;
0x0A0A	0x2001    MOVS	R0, #1
0x0A0C	0x9004    STR	R0, [SP, #16]
;driverrf4463pro.c, 659 :: 		ucVCO    = 0xFE;
0x0A0E	0x20FE    MOVS	R0, #254
0x0A10	0x9002    STR	R0, [SP, #8]
;driverrf4463pro.c, 660 :: 		}
0x0A12	0xE026    B	L_rf_init_freq136
L_rf_init_freq135:
;driverrf4463pro.c, 663 :: 		else if ( ulFrequency >= 3850000 ) {
0x0A14	0x990A    LDR	R1, [SP, #40]
0x0A16	0x486E    LDR	R0, [PC, #440]
0x0A18	0x4281    CMP	R1, R0
0x0A1A	0xD306    BCC	L_rf_init_freq137
;driverrf4463pro.c, 664 :: 		ucOUTDIV = 8;
0x0A1C	0x2008    MOVS	R0, #8
0x0A1E	0x9000    STR	R0, [SP, #0]
;driverrf4463pro.c, 665 :: 		ucBAND   = 2;
0x0A20	0x2002    MOVS	R0, #2
0x0A22	0x9004    STR	R0, [SP, #16]
;driverrf4463pro.c, 666 :: 		ucVCO    = 0xFE;
0x0A24	0x20FE    MOVS	R0, #254
0x0A26	0x9002    STR	R0, [SP, #8]
;driverrf4463pro.c, 667 :: 		}
0x0A28	0xE01B    B	L_rf_init_freq138
L_rf_init_freq137:
;driverrf4463pro.c, 670 :: 		else if ( ulFrequency >= 2730000 ) {
0x0A2A	0x990A    LDR	R1, [SP, #40]
0x0A2C	0x4869    LDR	R0, [PC, #420]
0x0A2E	0x4281    CMP	R1, R0
0x0A30	0xD306    BCC	L_rf_init_freq139
;driverrf4463pro.c, 671 :: 		ucOUTDIV = 12;
0x0A32	0x200C    MOVS	R0, #12
0x0A34	0x9000    STR	R0, [SP, #0]
;driverrf4463pro.c, 672 :: 		ucBAND   = 3;
0x0A36	0x2003    MOVS	R0, #3
0x0A38	0x9004    STR	R0, [SP, #16]
;driverrf4463pro.c, 673 :: 		ucVCO    = 0xFD;
0x0A3A	0x20FD    MOVS	R0, #253
0x0A3C	0x9002    STR	R0, [SP, #8]
;driverrf4463pro.c, 674 :: 		}
0x0A3E	0xE010    B	L_rf_init_freq140
L_rf_init_freq139:
;driverrf4463pro.c, 677 :: 		else if ( ulFrequency >= 1940000 ) {
0x0A40	0x990A    LDR	R1, [SP, #40]
0x0A42	0x4865    LDR	R0, [PC, #404]
0x0A44	0x4281    CMP	R1, R0
0x0A46	0xD306    BCC	L_rf_init_freq141
;driverrf4463pro.c, 678 :: 		ucOUTDIV = 16;
0x0A48	0x2010    MOVS	R0, #16
0x0A4A	0x9000    STR	R0, [SP, #0]
;driverrf4463pro.c, 679 :: 		ucBAND   = 4;
0x0A4C	0x2004    MOVS	R0, #4
0x0A4E	0x9004    STR	R0, [SP, #16]
;driverrf4463pro.c, 680 :: 		ucVCO    = 0xFC;
0x0A50	0x20FC    MOVS	R0, #252
0x0A52	0x9002    STR	R0, [SP, #8]
;driverrf4463pro.c, 681 :: 		}
0x0A54	0xE005    B	L_rf_init_freq142
L_rf_init_freq141:
;driverrf4463pro.c, 685 :: 		ucOUTDIV = 24;
0x0A56	0x2018    MOVS	R0, #24
0x0A58	0x9000    STR	R0, [SP, #0]
;driverrf4463pro.c, 686 :: 		ucBAND   = 5;
0x0A5A	0x2005    MOVS	R0, #5
0x0A5C	0x9004    STR	R0, [SP, #16]
;driverrf4463pro.c, 687 :: 		ucVCO    = 0xFA;
0x0A5E	0x20FA    MOVS	R0, #250
0x0A60	0x9002    STR	R0, [SP, #8]
;driverrf4463pro.c, 688 :: 		}
L_rf_init_freq142:
L_rf_init_freq140:
L_rf_init_freq138:
L_rf_init_freq136:
L_rf_init_freq134:
;driverrf4463pro.c, 690 :: 		ucDIV = ucOUTDIV / 2;
0x0A62	0x9800    LDR	R0, [SP, #0]
0x0A64	0xB2C0    UXTB	R0, R0
0x0A66	0x2202    MOVS	R2, #2
0x0A68	0xF7FFFB30  BL	__Div_32x32_U+0
0x0A6C	0x9001    STR	R0, [SP, #4]
;driverrf4463pro.c, 692 :: 		ulData = ( ulFrequency * ucDIV ) / 3;          // ucDIV = 88.5 = 88   //// UCdiv = 2
0x0A6E	0x9A01    LDR	R2, [SP, #4]
0x0A70	0xB2D2    UXTB	R2, R2
0x0A72	0x980A    LDR	R0, [SP, #40]
0x0A74	0x4611    MOV	R1, R2
0x0A76	0x4341    MULS	R1, R0, R1
0x0A78	0x2203    MOVS	R2, #3
0x0A7A	0x4608    MOV	R0, R1
0x0A7C	0xF7FFFB26  BL	__Div_32x32_U+0
0x0A80	0x9009    STR	R0, [SP, #36]
;driverrf4463pro.c, 693 :: 		ucINTE = ( ulData / 100000) - 1;               // ulData = 6 000 000  //// ULdATA = 9 000 000
0x0A82	0x9809    LDR	R0, [SP, #36]
0x0A84	0x4A55    LDR	R2, [PC, #340]
0x0A86	0xF7FFFB21  BL	__Div_32x32_U+0
0x0A8A	0x1E40    SUBS	R0, R0, #1
0x0A8C	0x9003    STR	R0, [SP, #12]
;driverrf4463pro.c, 694 :: 		ulFRAC = ( ulData - ( ucINTE + 1 ) * 100000 ) * 16384 / 3125;         // ulFRAC = 15 728 640
0x0A8E	0x9803    LDR	R0, [SP, #12]
0x0A90	0xB2C0    UXTB	R0, R0
0x0A92	0x1C42    ADDS	R2, R0, #1
0x0A94	0xB212    SXTH	R2, R2
0x0A96	0x4851    LDR	R0, [PC, #324]
0x0A98	0x4601    MOV	R1, R0
0x0A9A	0x4351    MULS	R1, R2, R1
0x0A9C	0x9809    LDR	R0, [SP, #36]
0x0A9E	0x1A42    SUBS	R2, R0, R1
0x0AA0	0x484F    LDR	R0, [PC, #316]
0x0AA2	0x4601    MOV	R1, R0
0x0AA4	0x4351    MULS	R1, R2, R1
0x0AA6	0x4A4F    LDR	R2, [PC, #316]
0x0AA8	0x4608    MOV	R0, R1
0x0AAA	0xF7FFFB0F  BL	__Div_32x32_U+0
0x0AAE	0x9008    STR	R0, [SP, #32]
;driverrf4463pro.c, 695 :: 		ulFRAC = ulFRAC + 0x80000;
0x0AB0	0x9908    LDR	R1, [SP, #32]
0x0AB2	0x484D    LDR	R0, [PC, #308]
0x0AB4	0x1808    ADDS	R0, R1, R0
0x0AB6	0x9008    STR	R0, [SP, #32]
;driverrf4463pro.c, 697 :: 		ucFRAC_0 = ulFRAC;
0x0AB8	0x9808    LDR	R0, [SP, #32]
0x0ABA	0x9007    STR	R0, [SP, #28]
;driverrf4463pro.c, 698 :: 		ulFRAC >>= 8;
0x0ABC	0x9808    LDR	R0, [SP, #32]
0x0ABE	0x0A00    LSRS	R0, R0, #8
0x0AC0	0x9008    STR	R0, [SP, #32]
;driverrf4463pro.c, 699 :: 		ucFRAC_1 = ulFRAC;
0x0AC2	0x9808    LDR	R0, [SP, #32]
0x0AC4	0x9006    STR	R0, [SP, #24]
;driverrf4463pro.c, 700 :: 		ulFRAC >>= 8;
0x0AC6	0x9808    LDR	R0, [SP, #32]
0x0AC8	0x0A00    LSRS	R0, R0, #8
0x0ACA	0x9008    STR	R0, [SP, #32]
;driverrf4463pro.c, 701 :: 		ucFRAC_2 = ulFRAC;
0x0ACC	0x9808    LDR	R0, [SP, #32]
0x0ACE	0x9005    STR	R0, [SP, #20]
;driverrf4463pro.c, 705 :: 		app_command_buf[ 0 ] = 0x11;           // SET property    MODEM_CLKGEN_BAND
0x0AD0	0x202C    MOVS	R0, #44
0x0AD2	0x4468    ADD	R0, SP, R0
0x0AD4	0x1C01    ADDS	R1, R0, #0
0x0AD6	0x2011    MOVS	R0, #17
0x0AD8	0x7008    STRB	R0, [R1, #0]
;driverrf4463pro.c, 706 :: 		app_command_buf[ 1 ] = 0x20;           // Group  // 0x2051
0x0ADA	0x202C    MOVS	R0, #44
0x0ADC	0x4468    ADD	R0, SP, R0
0x0ADE	0x1C41    ADDS	R1, R0, #1
0x0AE0	0x2020    MOVS	R0, #32
0x0AE2	0x7008    STRB	R0, [R1, #0]
;driverrf4463pro.c, 707 :: 		app_command_buf[ 2 ] = 0x01;           // Num Arguments // Total 1 Parameters
0x0AE4	0x202C    MOVS	R0, #44
0x0AE6	0x4468    ADD	R0, SP, R0
0x0AE8	0x1C81    ADDS	R1, R0, #2
0x0AEA	0x2001    MOVS	R0, #1
0x0AEC	0x7008    STRB	R0, [R1, #0]
;driverrf4463pro.c, 708 :: 		app_command_buf[ 3 ] = 0x51;           // Number  // 0x2051
0x0AEE	0x202C    MOVS	R0, #44
0x0AF0	0x4468    ADD	R0, SP, R0
0x0AF2	0x1CC1    ADDS	R1, R0, #3
0x0AF4	0x2051    MOVS	R0, #81
0x0AF6	0x7008    STRB	R0, [R1, #0]
;driverrf4463pro.c, 709 :: 		app_command_buf[ 4 ] = 0x08 | ucBAND;  // Argumento  //  high performance mode , clk outpu = osc /4
0x0AF8	0x202C    MOVS	R0, #44
0x0AFA	0x4468    ADD	R0, SP, R0
0x0AFC	0x1D02    ADDS	R2, R0, #4
0x0AFE	0x9904    LDR	R1, [SP, #16]
0x0B00	0xB2C9    UXTB	R1, R1
0x0B02	0x2008    MOVS	R0, #8
0x0B04	0x4308    ORRS	R0, R1
0x0B06	0x7010    STRB	R0, [R2, #0]
;driverrf4463pro.c, 710 :: 		spi_write( 5, app_command_buf );
0x0B08	0x202C    MOVS	R0, #44
0x0B0A	0x4468    ADD	R0, SP, R0
0x0B0C	0xB401    PUSH	(R0)
0x0B0E	0x2005    MOVS	R0, #5
0x0B10	0xB401    PUSH	(R0)
0x0B12	0xF000F889  BL	_spi_write+0
0x0B16	0xB002    ADD	SP, SP, #8
;driverrf4463pro.c, 712 :: 		app_command_buf[ 0 ]  = 0x11;
0x0B18	0x202C    MOVS	R0, #44
0x0B1A	0x4468    ADD	R0, SP, R0
0x0B1C	0x1C01    ADDS	R1, R0, #0
0x0B1E	0x2011    MOVS	R0, #17
0x0B20	0x7008    STRB	R0, [R1, #0]
;driverrf4463pro.c, 713 :: 		app_command_buf[ 1 ]  = 0x40;    // 0x4000         FREQ_CONTROL_INTE
0x0B22	0x202C    MOVS	R0, #44
0x0B24	0x4468    ADD	R0, SP, R0
0x0B26	0x1C41    ADDS	R1, R0, #1
0x0B28	0x2040    MOVS	R0, #64
0x0B2A	0x7008    STRB	R0, [R1, #0]
;driverrf4463pro.c, 714 :: 		app_command_buf[ 2 ]  = 0x08;    // Total 8 Parameters
0x0B2C	0x202C    MOVS	R0, #44
0x0B2E	0x4468    ADD	R0, SP, R0
0x0B30	0x1C81    ADDS	R1, R0, #2
0x0B32	0x2008    MOVS	R0, #8
0x0B34	0x7008    STRB	R0, [R1, #0]
;driverrf4463pro.c, 715 :: 		app_command_buf[ 3 ]  = 0x00;   // 0x4000
0x0B36	0x202C    MOVS	R0, #44
0x0B38	0x4468    ADD	R0, SP, R0
0x0B3A	0x1CC1    ADDS	R1, R0, #3
0x0B3C	0x2000    MOVS	R0, #0
0x0B3E	0x7008    STRB	R0, [R1, #0]
;driverrf4463pro.c, 716 :: 		app_command_buf[ 4 ]  = ucINTE;   //  default value
0x0B40	0x202C    MOVS	R0, #44
0x0B42	0x4468    ADD	R0, SP, R0
0x0B44	0x1D01    ADDS	R1, R0, #4
0x0B46	0x9803    LDR	R0, [SP, #12]
0x0B48	0xB2C0    UXTB	R0, R0
0x0B4A	0x7008    STRB	R0, [R1, #0]
;driverrf4463pro.c, 717 :: 		app_command_buf[ 5 ]  = ucFRAC_2;   //  defaul value
0x0B4C	0x202C    MOVS	R0, #44
0x0B4E	0x4468    ADD	R0, SP, R0
0x0B50	0x1D41    ADDS	R1, R0, #5
0x0B52	0x9805    LDR	R0, [SP, #20]
0x0B54	0xB2C0    UXTB	R0, R0
0x0B56	0x7008    STRB	R0, [R1, #0]
;driverrf4463pro.c, 718 :: 		app_command_buf[ 6 ]  = ucFRAC_1;   //  default value
0x0B58	0x202C    MOVS	R0, #44
0x0B5A	0x4468    ADD	R0, SP, R0
0x0B5C	0x1D81    ADDS	R1, R0, #6
0x0B5E	0x9806    LDR	R0, [SP, #24]
0x0B60	0xB2C0    UXTB	R0, R0
0x0B62	0x7008    STRB	R0, [R1, #0]
;driverrf4463pro.c, 719 :: 		app_command_buf[ 7 ]  = ucFRAC_0;   // frac ,from WDS
0x0B64	0x202C    MOVS	R0, #44
0x0B66	0x4468    ADD	R0, SP, R0
0x0B68	0x1DC1    ADDS	R1, R0, #7
0x0B6A	0x9807    LDR	R0, [SP, #28]
0x0B6C	0xB2C0    UXTB	R0, R0
0x0B6E	0x7008    STRB	R0, [R1, #0]
;driverrf4463pro.c, 720 :: 		app_command_buf[ 8 ]  = step_250K_step1;   // channel step1  from wds  // al parecer aqu? esta el ancho del canal
0x0B70	0x202C    MOVS	R0, #44
0x0B72	0x4468    ADD	R0, SP, R0
0x0B74	0x4601    MOV	R1, R0
0x0B76	0x3108    ADDS	R1, #8
0x0B78	0x2022    MOVS	R0, #34
0x0B7A	0x7008    STRB	R0, [R1, #0]
;driverrf4463pro.c, 721 :: 		app_command_buf[ 9 ]  = step_250K_step0;   // channel step0  from wds
0x0B7C	0x202C    MOVS	R0, #44
0x0B7E	0x4468    ADD	R0, SP, R0
0x0B80	0x4601    MOV	R1, R0
0x0B82	0x3109    ADDS	R1, #9
0x0B84	0x2022    MOVS	R0, #34
0x0B86	0x7008    STRB	R0, [R1, #0]
;driverrf4463pro.c, 722 :: 		app_command_buf[ 10 ] = 0x20;  //  from wds Without this Values
0x0B88	0x202C    MOVS	R0, #44
0x0B8A	0x4468    ADD	R0, SP, R0
0x0B8C	0x4601    MOV	R1, R0
0x0B8E	0x310A    ADDS	R1, #10
0x0B90	0x2020    MOVS	R0, #32
0x0B92	0x7008    STRB	R0, [R1, #0]
;driverrf4463pro.c, 723 :: 		app_command_buf[ 11 ] = ucVCO;    // from wds Without this Values
0x0B94	0x202C    MOVS	R0, #44
0x0B96	0x4468    ADD	R0, SP, R0
0x0B98	0x4601    MOV	R1, R0
0x0B9A	0x310B    ADDS	R1, #11
0x0B9C	0x9802    LDR	R0, [SP, #8]
0x0B9E	0xB2C0    UXTB	R0, R0
0x0BA0	0x7008    STRB	R0, [R1, #0]
;driverrf4463pro.c, 737 :: 		spi_write( 12, app_command_buf );
0x0BA2	0x202C    MOVS	R0, #44
0x0BA4	0x4468    ADD	R0, SP, R0
0x0BA6	0xB401    PUSH	(R0)
0x0BA8	0x200C    MOVS	R0, #12
0x0BAA	0xB401    PUSH	(R0)
0x0BAC	0xF000F83C  BL	_spi_write+0
0x0BB0	0xB002    ADD	SP, SP, #8
;driverrf4463pro.c, 738 :: 		}
L_end_rf_init_freq:
0x0BB2	0xB010    ADD	SP, SP, #64
0x0BB4	0xBD00    POP	(R15)
0x0BB6	0xBF00    NOP
0x0BB8	0x008F2000  	_freq3+0
0x0BBC	0x00982000  	_freq2+0
0x0BC0	0x00992000  	_freq1+0
0x0BC4	0x27100000  	#10000
0x0BC8	0xF7800073  	#7600000
0x0BCC	0x50200053  	#5460000
0x0BD0	0xBF10003A  	#3850000
0x0BD4	0xA8100029  	#2730000
0x0BD8	0x9A20001D  	#1940000
0x0BDC	0x86A00001  	#100000
0x0BE0	0x40000000  	#16384
0x0BE4	0x0C350000  	#3125
0x0BE8	0x00000008  	#524288
; end of _rf_init_freq
_vRF4463ClearInterrupts:
;driverrf4463pro.c, 429 :: 		void vRF4463ClearInterrupts( void ) {
0x24F4	0xB500    PUSH	(R14)
0x24F6	0xB081    SUB	SP, SP, #4
;driverrf4463pro.c, 432 :: 		p[ 0 ] = GET_INT_STATUS;
0x24F8	0x4668    MOV	R0, SP
0x24FA	0x1C01    ADDS	R1, R0, #0
0x24FC	0x2020    MOVS	R0, #32
0x24FE	0x7008    STRB	R0, [R1, #0]
;driverrf4463pro.c, 433 :: 		p[ 1 ] = 0;               // clr  PH pending
0x2500	0x4668    MOV	R0, SP
0x2502	0x1C41    ADDS	R1, R0, #1
0x2504	0x2000    MOVS	R0, #0
0x2506	0x7008    STRB	R0, [R1, #0]
;driverrf4463pro.c, 434 :: 		p[ 2 ] = 0;               // clr modem_pending
0x2508	0x4668    MOV	R0, SP
0x250A	0x1C81    ADDS	R1, R0, #2
0x250C	0x2000    MOVS	R0, #0
0x250E	0x7008    STRB	R0, [R1, #0]
;driverrf4463pro.c, 435 :: 		p[ 3 ] = 0;               // clr chip pending
0x2510	0x4668    MOV	R0, SP
0x2512	0x1CC1    ADDS	R1, R0, #3
0x2514	0x2000    MOVS	R0, #0
0x2516	0x7008    STRB	R0, [R1, #0]
;driverrf4463pro.c, 436 :: 		spi_write( 4, p );
0x2518	0x4668    MOV	R0, SP
0x251A	0xB401    PUSH	(R0)
0x251C	0x2004    MOVS	R0, #4
0x251E	0xB401    PUSH	(R0)
0x2520	0xF7FEFB82  BL	_spi_write+0
0x2524	0xB002    ADD	SP, SP, #8
;driverrf4463pro.c, 437 :: 		spi_read( 9, GET_INT_STATUS );
0x2526	0x2020    MOVS	R0, #32
0x2528	0xB401    PUSH	(R0)
0x252A	0x2009    MOVS	R0, #9
0x252C	0xB401    PUSH	(R0)
0x252E	0xF7FEFD29  BL	_spi_read+0
0x2532	0xB002    ADD	SP, SP, #8
;driverrf4463pro.c, 438 :: 		}
L_end_vRF4463ClearInterrupts:
0x2534	0xB001    ADD	SP, SP, #4
0x2536	0xBD00    POP	(R15)
; end of _vRF4463ClearInterrupts
_spi_read:
;driverrf4463pro.c, 849 :: 		void spi_read( unsigned char data_length, unsigned char api_command ) {
0x0F84	0xB500    PUSH	(R14)
0x0F86	0xB083    SUB	SP, SP, #12
;driverrf4463pro.c, 853 :: 		p[ 0 ] = api_command;
0x0F88	0x2004    MOVS	R0, #4
0x0F8A	0x4468    ADD	R0, SP, R0
0x0F8C	0x1C01    ADDS	R1, R0, #0
0x0F8E	0x9805    LDR	R0, [SP, #20]
0x0F90	0xB2C0    UXTB	R0, R0
0x0F92	0x7008    STRB	R0, [R1, #0]
;driverrf4463pro.c, 854 :: 		i = 0;
0x0F94	0x2000    MOVS	R0, #0
0x0F96	0x9000    STR	R0, [SP, #0]
;driverrf4463pro.c, 855 :: 		while ( i != 0xFF ) {
L_spi_read150:
0x0F98	0x9800    LDR	R0, [SP, #0]
0x0F9A	0xB2C0    UXTB	R0, R0
0x0F9C	0x28FF    CMP	R0, #255
0x0F9E	0xD003    BEQ	L_spi_read151
;driverrf4463pro.c, 856 :: 		i = check_cts();                // Check if you can send Command
0x0FA0	0xF7FFFA8C  BL	_check_cts+0
0x0FA4	0x9000    STR	R0, [SP, #0]
;driverrf4463pro.c, 857 :: 		}
0x0FA6	0xE7F7    B	L_spi_read150
L_spi_read151:
;driverrf4463pro.c, 859 :: 		spi_write( 1, p );    // Send Command
0x0FA8	0x2004    MOVS	R0, #4
0x0FAA	0x4468    ADD	R0, SP, R0
0x0FAC	0xB401    PUSH	(R0)
0x0FAE	0x2001    MOVS	R0, #1
0x0FB0	0xB401    PUSH	(R0)
0x0FB2	0xF7FFFE39  BL	_spi_write+0
0x0FB6	0xB002    ADD	SP, SP, #8
;driverrf4463pro.c, 861 :: 		i = 0;
0x0FB8	0x2000    MOVS	R0, #0
0x0FBA	0x9000    STR	R0, [SP, #0]
;driverrf4463pro.c, 862 :: 		while ( i != 0xFF ) {
L_spi_read152:
0x0FBC	0x9800    LDR	R0, [SP, #0]
0x0FBE	0xB2C0    UXTB	R0, R0
0x0FC0	0x28FF    CMP	R0, #255
0x0FC2	0xD003    BEQ	L_spi_read153
;driverrf4463pro.c, 863 :: 		i = check_cts();        //Check whether the data can be read
0x0FC4	0xF7FFFA7A  BL	_check_cts+0
0x0FC8	0x9000    STR	R0, [SP, #0]
;driverrf4463pro.c, 864 :: 		}
0x0FCA	0xE7F7    B	L_spi_read152
L_spi_read153:
;driverrf4463pro.c, 866 :: 		nSEL = 1;
0x0FCC	0x4A17    LDR	R2, [PC, #92]
0x0FCE	0x6810    LDR	R0, [R2, #0]
0x0FD0	0x2108    MOVS	R1, #8
0x0FD2	0x4308    ORRS	R0, R1
0x0FD4	0x6010    STR	R0, [R2, #0]
;driverrf4463pro.c, 867 :: 		nSEL = 0;
0x0FD6	0x4A15    LDR	R2, [PC, #84]
0x0FD8	0x6810    LDR	R0, [R2, #0]
0x0FDA	0x2108    MOVS	R1, #8
0x0FDC	0x4388    BICS	R0, R1
0x0FDE	0x6010    STR	R0, [R2, #0]
;driverrf4463pro.c, 868 :: 		ucRf4463SPIByte( 0x44 );
0x0FE0	0x2044    MOVS	R0, #68
0x0FE2	0xB401    PUSH	(R0)
0x0FE4	0xF7FFF9B2  BL	_ucRf4463SPIByte+0
0x0FE8	0xB001    ADD	SP, SP, #4
;driverrf4463pro.c, 869 :: 		for ( i = 0; i < data_length; i++ ) {        // Read data
0x0FEA	0x2000    MOVS	R0, #0
0x0FEC	0x9000    STR	R0, [SP, #0]
L_spi_read154:
0x0FEE	0x9904    LDR	R1, [SP, #16]
0x0FF0	0xB2C9    UXTB	R1, R1
0x0FF2	0x9800    LDR	R0, [SP, #0]
0x0FF4	0xB2C0    UXTB	R0, R0
0x0FF6	0x4288    CMP	R0, R1
0x0FF8	0xD210    BCS	L_spi_read155
;driverrf4463pro.c, 870 :: 		spi_read_buf[ i ] = ucRf4463SPIByte( 0x00 );             // 0x00
0x0FFA	0x9900    LDR	R1, [SP, #0]
0x0FFC	0xB2C9    UXTB	R1, R1
0x0FFE	0x480C    LDR	R0, [PC, #48]
0x1000	0x1840    ADDS	R0, R0, R1
0x1002	0x9002    STR	R0, [SP, #8]
0x1004	0x2000    MOVS	R0, #0
0x1006	0xB401    PUSH	(R0)
0x1008	0xF7FFF9A0  BL	_ucRf4463SPIByte+0
0x100C	0xB001    ADD	SP, SP, #4
0x100E	0x9902    LDR	R1, [SP, #8]
0x1010	0x7008    STRB	R0, [R1, #0]
;driverrf4463pro.c, 869 :: 		for ( i = 0; i < data_length; i++ ) {        // Read data
0x1012	0x9800    LDR	R0, [SP, #0]
0x1014	0xB2C0    UXTB	R0, R0
0x1016	0x3001    ADDS	R0, #1
0x1018	0x9000    STR	R0, [SP, #0]
;driverrf4463pro.c, 871 :: 		}
0x101A	0xE7E8    B	L_spi_read154
L_spi_read155:
;driverrf4463pro.c, 872 :: 		nSEL = 1;
0x101C	0x4A03    LDR	R2, [PC, #12]
0x101E	0x6810    LDR	R0, [R2, #0]
0x1020	0x2108    MOVS	R1, #8
0x1022	0x4308    ORRS	R0, R1
0x1024	0x6010    STR	R0, [R2, #0]
;driverrf4463pro.c, 873 :: 		}
L_end_spi_read:
0x1026	0xB003    ADD	SP, SP, #12
0x1028	0xBD00    POP	(R15)
0x102A	0xBF00    NOP
0x102C	0x00145000  	GPIOA_ODRbits+0
0x1030	0x009A2000  	_spi_read_buf+0
; end of _spi_read
_vRF4463PartInfo:
;driverrf4463pro.c, 440 :: 		void vRF4463PartInfo( void ) {  // Solicitud totalmente operativa
0x1894	0xB500    PUSH	(R14)
0x1896	0xB083    SUB	SP, SP, #12
;driverrf4463pro.c, 443 :: 		p[ 0 ] = PART_INFO;
0x1898	0x4668    MOV	R0, SP
0x189A	0x1C01    ADDS	R1, R0, #0
0x189C	0x2001    MOVS	R0, #1
0x189E	0x7008    STRB	R0, [R1, #0]
;driverrf4463pro.c, 447 :: 		spi_write( 1, p );
0x18A0	0x4668    MOV	R0, SP
0x18A2	0xB401    PUSH	(R0)
0x18A4	0x2001    MOVS	R0, #1
0x18A6	0xB401    PUSH	(R0)
0x18A8	0xF7FFF9BE  BL	_spi_write+0
0x18AC	0xB002    ADD	SP, SP, #8
;driverrf4463pro.c, 448 :: 		spi_read( 9, PART_INFO );
0x18AE	0x2001    MOVS	R0, #1
0x18B0	0xB401    PUSH	(R0)
0x18B2	0x2009    MOVS	R0, #9
0x18B4	0xB401    PUSH	(R0)
0x18B6	0xF7FFFB65  BL	_spi_read+0
0x18BA	0xB002    ADD	SP, SP, #8
;driverrf4463pro.c, 449 :: 		}
L_end_vRF4463PartInfo:
0x18BC	0xB003    ADD	SP, SP, #12
0x18BE	0xBD00    POP	(R15)
; end of _vRF4463PartInfo
_UART1_Write_Text:
;__Lib_UART_G0xx_1234.c, 448 :: 		
; uart_text start address is: 0 (R0)
0x18C0	0xB500    PUSH	(R14)
; uart_text end address is: 0 (R0)
; uart_text start address is: 0 (R0)
;__Lib_UART_G0xx_1234.c, 450 :: 		
0x18C2	0x4601    MOV	R1, R0
; uart_text end address is: 0 (R0)
0x18C4	0x4801    LDR	R0, [PC, #4]
0x18C6	0xF7FFFBF3  BL	__Lib_UART_G0xx_1234_UARTx_Write_Text+0
;__Lib_UART_G0xx_1234.c, 451 :: 		
L_end_UART1_Write_Text:
0x18CA	0xBD00    POP	(R15)
0x18CC	0x38004001  	USART1_CR1+0
; end of _UART1_Write_Text
__Lib_UART_G0xx_1234_UARTx_Write_Text:
;__Lib_UART_G0xx_1234.c, 127 :: 		
; uart_text start address is: 4 (R1)
; uartBase start address is: 0 (R0)
0x10B0	0xB500    PUSH	(R14)
; uart_text end address is: 4 (R1)
; uartBase end address is: 0 (R0)
; uartBase start address is: 0 (R0)
; uart_text start address is: 4 (R1)
;__Lib_UART_G0xx_1234.c, 130 :: 		
; counter start address is: 24 (R6)
0x10B2	0x2600    MOVS	R6, #0
;__Lib_UART_G0xx_1234.c, 133 :: 		
0x10B4	0x780A    LDRB	R2, [R1, #0]
; uartData start address is: 12 (R3)
0x10B6	0xB2D3    UXTB	R3, R2
; uartBase end address is: 0 (R0)
; uart_text end address is: 4 (R1)
; uartData end address is: 12 (R3)
; counter end address is: 24 (R6)
0x10B8	0x4605    MOV	R5, R0
0x10BA	0xB2D8    UXTB	R0, R3
0x10BC	0x460C    MOV	R4, R1
;__Lib_UART_G0xx_1234.c, 135 :: 		
L___Lib_UART_G0xx_1234_UARTx_Write_Text11:
; uartData start address is: 0 (R0)
; uartBase start address is: 20 (R5)
; uart_text start address is: 16 (R4)
; counter start address is: 24 (R6)
; uart_text start address is: 16 (R4)
; uart_text end address is: 16 (R4)
; uartBase start address is: 20 (R5)
; uartBase end address is: 20 (R5)
0x10BE	0x2800    CMP	R0, #0
0x10C0	0xD00A    BEQ	L___Lib_UART_G0xx_1234_UARTx_Write_Text12
; uart_text end address is: 16 (R4)
; uartBase end address is: 20 (R5)
;__Lib_UART_G0xx_1234.c, 137 :: 		
; uartBase start address is: 20 (R5)
; uart_text start address is: 16 (R4)
0x10C2	0xB2C1    UXTB	R1, R0
; uartData end address is: 0 (R0)
0x10C4	0x4628    MOV	R0, R5
0x10C6	0xF7FFF9AF  BL	__Lib_UART_G0xx_1234_UARTx_Write+0
;__Lib_UART_G0xx_1234.c, 138 :: 		
0x10CA	0x1C72    ADDS	R2, R6, #1
0x10CC	0xB2D2    UXTB	R2, R2
0x10CE	0xB2D6    UXTB	R6, R2
0x10D0	0x18A2    ADDS	R2, R4, R2
0x10D2	0x7812    LDRB	R2, [R2, #0]
; uartData start address is: 0 (R0)
0x10D4	0xB2D0    UXTB	R0, R2
;__Lib_UART_G0xx_1234.c, 139 :: 		
; uart_text end address is: 16 (R4)
; uartBase end address is: 20 (R5)
; counter end address is: 24 (R6)
; uartData end address is: 0 (R0)
0x10D6	0xE7F2    B	L___Lib_UART_G0xx_1234_UARTx_Write_Text11
L___Lib_UART_G0xx_1234_UARTx_Write_Text12:
;__Lib_UART_G0xx_1234.c, 140 :: 		
L_end_UARTx_Write_Text:
0x10D8	0xBD00    POP	(R15)
; end of __Lib_UART_G0xx_1234_UARTx_Write_Text
__Lib_UART_G0xx_1234_UARTx_Write:
;__Lib_UART_G0xx_1234.c, 113 :: 		
; _data start address is: 4 (R1)
; uartBase start address is: 0 (R0)
0x0428	0xB500    PUSH	(R14)
0x042A	0xB081    SUB	SP, SP, #4
; _data end address is: 4 (R1)
; uartBase end address is: 0 (R0)
; uartBase start address is: 0 (R0)
; _data start address is: 4 (R1)
0x042C	0x9100    STR	R1, [SP, #0]
; uartBase end address is: 0 (R0)
; _data end address is: 4 (R1)
0x042E	0x4601    MOV	R1, R0
0x0430	0x9800    LDR	R0, [SP, #0]
0x0432	0xB280    UXTH	R0, R0
;__Lib_UART_G0xx_1234.c, 116 :: 		
L___Lib_UART_G0xx_1234_UARTx_Write9:
; _data start address is: 0 (R0)
; uartBase start address is: 4 (R1)
0x0434	0x460A    MOV	R2, R1
0x0436	0x321C    ADDS	R2, #28
0x0438	0x6813    LDR	R3, [R2, #0]
0x043A	0x2280    MOVS	R2, #128
0x043C	0x401A    ANDS	R2, R3
0x043E	0x09D2    LSRS	R2, R2, #7
0x0440	0x2A00    CMP	R2, #0
0x0442	0xD100    BNE	L___Lib_UART_G0xx_1234_UARTx_Write10
0x0444	0xE7F6    B	L___Lib_UART_G0xx_1234_UARTx_Write9
L___Lib_UART_G0xx_1234_UARTx_Write10:
;__Lib_UART_G0xx_1234.c, 119 :: 		
0x0446	0x460A    MOV	R2, R1
0x0448	0x3228    ADDS	R2, #40
; uartBase end address is: 4 (R1)
0x044A	0x6010    STR	R0, [R2, #0]
; _data end address is: 0 (R0)
;__Lib_UART_G0xx_1234.c, 120 :: 		
L_end_UARTx_Write:
0x044C	0xB001    ADD	SP, SP, #4
0x044E	0xBD00    POP	(R15)
; end of __Lib_UART_G0xx_1234_UARTx_Write
_spi_read_fifo:
;driverrf4463pro.c, 927 :: 		void spi_read_fifo( void ) {
0x18D0	0xB500    PUSH	(R14)
0x18D2	0xB082    SUB	SP, SP, #8
;driverrf4463pro.c, 930 :: 		i = 0;
0x18D4	0x2000    MOVS	R0, #0
0x18D6	0x9000    STR	R0, [SP, #0]
;driverrf4463pro.c, 931 :: 		while ( i != 0xFF ) {
L_spi_read_fifo172:
0x18D8	0x9800    LDR	R0, [SP, #0]
0x18DA	0xB2C0    UXTB	R0, R0
0x18DC	0x28FF    CMP	R0, #255
0x18DE	0xD003    BEQ	L_spi_read_fifo173
;driverrf4463pro.c, 932 :: 		i = check_cts();                   // Check if you can send Command
0x18E0	0xF7FEFDEC  BL	_check_cts+0
0x18E4	0x9000    STR	R0, [SP, #0]
;driverrf4463pro.c, 933 :: 		}
0x18E6	0xE7F7    B	L_spi_read_fifo172
L_spi_read_fifo173:
;driverrf4463pro.c, 935 :: 		nSEL = 1;
0x18E8	0x4A16    LDR	R2, [PC, #88]
0x18EA	0x6810    LDR	R0, [R2, #0]
0x18EC	0x2108    MOVS	R1, #8
0x18EE	0x4308    ORRS	R0, R1
0x18F0	0x6010    STR	R0, [R2, #0]
;driverrf4463pro.c, 936 :: 		nSEL = 0;
0x18F2	0x4A14    LDR	R2, [PC, #80]
0x18F4	0x6810    LDR	R0, [R2, #0]
0x18F6	0x2108    MOVS	R1, #8
0x18F8	0x4388    BICS	R0, R1
0x18FA	0x6010    STR	R0, [R2, #0]
;driverrf4463pro.c, 937 :: 		ucRf4463SPIByte( READ_RX_FIFO );
0x18FC	0x2077    MOVS	R0, #119
0x18FE	0xB401    PUSH	(R0)
0x1900	0xF7FEFD24  BL	_ucRf4463SPIByte+0
0x1904	0xB001    ADD	SP, SP, #4
;driverrf4463pro.c, 938 :: 		for ( i = 0; i < payload_length; i++ ) {
0x1906	0x2000    MOVS	R0, #0
0x1908	0x9000    STR	R0, [SP, #0]
L_spi_read_fifo174:
0x190A	0x9800    LDR	R0, [SP, #0]
0x190C	0xB2C0    UXTB	R0, R0
0x190E	0x280E    CMP	R0, #14
0x1910	0xD210    BCS	L_spi_read_fifo175
;driverrf4463pro.c, 939 :: 		rx_buf[ i ] = ucRf4463SPIByte( 0xFF );      // Receive 10 test data
0x1912	0x9900    LDR	R1, [SP, #0]
0x1914	0xB2C9    UXTB	R1, R1
0x1916	0x480C    LDR	R0, [PC, #48]
0x1918	0x1840    ADDS	R0, R0, R1
0x191A	0x9001    STR	R0, [SP, #4]
0x191C	0x20FF    MOVS	R0, #255
0x191E	0xB401    PUSH	(R0)
0x1920	0xF7FEFD14  BL	_ucRf4463SPIByte+0
0x1924	0xB001    ADD	SP, SP, #4
0x1926	0x9901    LDR	R1, [SP, #4]
0x1928	0x7008    STRB	R0, [R1, #0]
;driverrf4463pro.c, 938 :: 		for ( i = 0; i < payload_length; i++ ) {
0x192A	0x9800    LDR	R0, [SP, #0]
0x192C	0xB2C0    UXTB	R0, R0
0x192E	0x3001    ADDS	R0, #1
0x1930	0x9000    STR	R0, [SP, #0]
;driverrf4463pro.c, 940 :: 		}
0x1932	0xE7EA    B	L_spi_read_fifo174
L_spi_read_fifo175:
;driverrf4463pro.c, 941 :: 		nSEL = 1;
0x1934	0x4A03    LDR	R2, [PC, #12]
0x1936	0x6810    LDR	R0, [R2, #0]
0x1938	0x2108    MOVS	R1, #8
0x193A	0x4308    ORRS	R0, R1
0x193C	0x6010    STR	R0, [R2, #0]
;driverrf4463pro.c, 942 :: 		}
L_end_spi_read_fifo:
0x193E	0xB002    ADD	SP, SP, #8
0x1940	0xBD00    POP	(R15)
0x1942	0xBF00    NOP
0x1944	0x00145000  	GPIOA_ODRbits+0
0x1948	0x00AE2000  	_rx_buf+0
; end of _spi_read_fifo
_vRF4463FifoReset:
;driverrf4463pro.c, 417 :: 		void vRF4463FifoReset( void ) {
0x10DC	0xB500    PUSH	(R14)
0x10DE	0xB081    SUB	SP, SP, #4
;driverrf4463pro.c, 420 :: 		p[ 0 ] = FIFO_INFO;
0x10E0	0x4668    MOV	R0, SP
0x10E2	0x1C01    ADDS	R1, R0, #0
0x10E4	0x2015    MOVS	R0, #21
0x10E6	0x7008    STRB	R0, [R1, #0]
;driverrf4463pro.c, 421 :: 		p[ 1 ] = 0x03;   // reset tx ,rx fifo
0x10E8	0x4668    MOV	R0, SP
0x10EA	0x1C41    ADDS	R1, R0, #1
0x10EC	0x2003    MOVS	R0, #3
0x10EE	0x7008    STRB	R0, [R1, #0]
;driverrf4463pro.c, 422 :: 		spi_write( 2, p );
0x10F0	0x4668    MOV	R0, SP
0x10F2	0xB401    PUSH	(R0)
0x10F4	0x2002    MOVS	R0, #2
0x10F6	0xB401    PUSH	(R0)
0x10F8	0xF7FFFD96  BL	_spi_write+0
0x10FC	0xB002    ADD	SP, SP, #8
;driverrf4463pro.c, 423 :: 		}
L_end_vRF4463FifoReset:
0x10FE	0xB001    ADD	SP, SP, #4
0x1100	0xBD00    POP	(R15)
; end of _vRF4463FifoReset
_vRF4463TxData:
;driverrf4463pro.c, 568 :: 		void vRF4463TxData( void ) {
0x1104	0xB500    PUSH	(R14)
0x1106	0xB085    SUB	SP, SP, #20
;driverrf4463pro.c, 571 :: 		ucRF4463IRQ = 0;
0x1108	0x2100    MOVS	R1, #0
0x110A	0x483C    LDR	R0, [PC, #240]
0x110C	0x7001    STRB	R1, [R0, #0]
;driverrf4463pro.c, 573 :: 		Flag.is_tx = 1;
0x110E	0x4A3C    LDR	R2, [PC, #240]
0x1110	0x7810    LDRB	R0, [R2, #0]
0x1112	0x2102    MOVS	R1, #2
0x1114	0x4308    ORRS	R0, R1
0x1116	0x7010    STRB	R0, [R2, #0]
;driverrf4463pro.c, 574 :: 		LED_RED ^= 1;
0x1118	0x483A    LDR	R0, [PC, #232]
0x111A	0x6800    LDR	R0, [R0, #0]
0x111C	0x2240    MOVS	R2, #64
0x111E	0x4002    ANDS	R2, R0
0x1120	0x0992    LSRS	R2, R2, #6
0x1122	0x4839    LDR	R0, [PC, #228]
0x1124	0x7801    LDRB	R1, [R0, #0]
0x1126	0x2001    MOVS	R0, BitMask(_ucSPI1ByteReceived+0)
0x1128	0x4008    ANDS	R0, R1
0x112A	0x4613    MOV	R3, R2
0x112C	0x4043    EORS	R3, R0
0x112E	0x4A35    LDR	R2, [PC, #212]
0x1130	0x6810    LDR	R0, [R2, #0]
0x1132	0x2101    MOVS	R1, #1
0x1134	0x4019    ANDS	R1, R3
0x1136	0xD002    BEQ	L__vRF4463TxData275
0x1138	0x2140    MOVS	R1, #64
0x113A	0x4308    ORRS	R0, R1
0x113C	0xE001    B	L__vRF4463TxData274
L__vRF4463TxData275:
0x113E	0x2140    MOVS	R1, #64
0x1140	0x4388    BICS	R0, R1
L__vRF4463TxData274:
0x1142	0x6010    STR	R0, [R2, #0]
;driverrf4463pro.c, 575 :: 		Delay_ms( 30 );
0x1144	0x4F02    LDR	R7, [PC, #8]
0x1146	0xBF00    NOP
L_vRF4463TxData125:
0x1148	0x1E7F    SUBS	R7, R7, #1
0x114A	0xD1FD    BNE	L_vRF4463TxData125
0x114C	0xE002    B	#4
0x114E	0xBF00    NOP
0x1150	0xD4BF0001  	#119999
;driverrf4463pro.c, 576 :: 		LED_RED ^= 1;
0x1154	0x482B    LDR	R0, [PC, #172]
0x1156	0x6800    LDR	R0, [R0, #0]
0x1158	0x2240    MOVS	R2, #64
0x115A	0x4002    ANDS	R2, R0
0x115C	0x0992    LSRS	R2, R2, #6
0x115E	0x482A    LDR	R0, [PC, #168]
0x1160	0x7801    LDRB	R1, [R0, #0]
0x1162	0x2001    MOVS	R0, BitMask(_ucSPI1ByteReceived+0)
0x1164	0x4008    ANDS	R0, R1
0x1166	0x4613    MOV	R3, R2
0x1168	0x4043    EORS	R3, R0
0x116A	0x4A26    LDR	R2, [PC, #152]
0x116C	0x6810    LDR	R0, [R2, #0]
0x116E	0x2101    MOVS	R1, #1
0x1170	0x4019    ANDS	R1, R3
0x1172	0xD002    BEQ	L__vRF4463TxData277
0x1174	0x2140    MOVS	R1, #64
0x1176	0x4308    ORRS	R0, R1
0x1178	0xE001    B	L__vRF4463TxData276
L__vRF4463TxData277:
0x117A	0x2140    MOVS	R1, #64
0x117C	0x4388    BICS	R0, R1
L__vRF4463TxData276:
0x117E	0x6010    STR	R0, [R2, #0]
;driverrf4463pro.c, 577 :: 		vRF4463FifoReset();            // fifo_reset();  // Buffer empty
0x1180	0xF7FFFFAC  BL	_vRF4463FifoReset+0
;driverrf4463pro.c, 578 :: 		spi_write_fifo();              // Fill the buffer with data
0x1184	0xF7FFFB46  BL	_spi_write_fifo+0
;driverrf4463pro.c, 579 :: 		vRF4463EnableTxInterrupt();    // enable_tx_interrupt();
0x1188	0xF7FFFF54  BL	_vRF4463EnableTxInterrupt+0
;driverrf4463pro.c, 580 :: 		vRF4463ClearInterrupts();       // clr_interrupt();  // Clear interrupt factor
0x118C	0xF001F9B2  BL	_vRF4463ClearInterrupts+0
;driverrf4463pro.c, 581 :: 		vRF4463TxStart();              // tx_start();    // Enter launch mode, start launch
0x1190	0xF7FFFB98  BL	_vRF4463TxStart+0
;driverrf4463pro.c, 582 :: 		rf_timeout = 0;
0x1194	0x2100    MOVS	R1, #0
0x1196	0x481D    LDR	R0, [PC, #116]
0x1198	0x8001    STRH	R1, [R0, #0]
;driverrf4463pro.c, 584 :: 		Flag.rf_reach_timeout = 0;
0x119A	0x4A19    LDR	R2, [PC, #100]
0x119C	0x7810    LDRB	R0, [R2, #0]
0x119E	0x2104    MOVS	R1, #4
0x11A0	0x4388    BICS	R0, R1
0x11A2	0x7010    STRB	R0, [R2, #0]
;driverrf4463pro.c, 586 :: 		if ( ucRF4463IRQ ) {
0x11A4	0x4815    LDR	R0, [PC, #84]
0x11A6	0x7800    LDRB	R0, [R0, #0]
0x11A8	0x2800    CMP	R0, #0
0x11AA	0xD00A    BEQ	L_vRF4463TxData127
;driverrf4463pro.c, 587 :: 		UART1_Write_Text( "[ UART1 ] TX INT\r\n" );
0x11AC	0x466E    MOV	R6, SP
0x11AE	0x2513    MOVS	R5, #19
0x11B0	0x19AD    ADDS	R5, R5, R6
0x11B2	0x4F17    LDR	R7, [PC, #92]
0x11B4	0xF000F9DA  BL	___CC2DW+0
0x11B8	0x4668    MOV	R0, SP
0x11BA	0x4604    MOV	R4, R0
0x11BC	0x4620    MOV	R0, R4
0x11BE	0xF000FB7F  BL	_UART1_Write_Text+0
;driverrf4463pro.c, 588 :: 		}
L_vRF4463TxData127:
;driverrf4463pro.c, 591 :: 		while ( nIRQ ) {     //nIRQ
L_vRF4463TxData128:
0x11C2	0x4814    LDR	R0, [PC, #80]
0x11C4	0x6801    LDR	R1, [R0, #0]
0x11C6	0x2004    MOVS	R0, #4
0x11C8	0x4008    ANDS	R0, R1
0x11CA	0x0880    LSRS	R0, R0, #2
0x11CC	0x2800    CMP	R0, #0
0x11CE	0xD00C    BEQ	L_vRF4463TxData129
;driverrf4463pro.c, 594 :: 		if ( Flag.rf_reach_timeout ) {
0x11D0	0x480B    LDR	R0, [PC, #44]
0x11D2	0x7801    LDRB	R1, [R0, #0]
0x11D4	0x2004    MOVS	R0, #4
0x11D6	0x4008    ANDS	R0, R1
0x11D8	0x0880    LSRS	R0, R0, #2
0x11DA	0x2800    CMP	R0, #0
0x11DC	0xD004    BEQ	L_vRF4463TxData130
;driverrf4463pro.c, 595 :: 		VRF4463SDNReset();
0x11DE	0xF001F939  BL	_VRF4463SDNReset+0
;driverrf4463pro.c, 596 :: 		vRF4463Init();        //SI4463_init();  // RF Module initialization
0x11E2	0xF000FBB3  BL	_vRF4463Init+0
;driverrf4463pro.c, 597 :: 		break;                // Forced out
0x11E6	0xE000    B	L_vRF4463TxData129
;driverrf4463pro.c, 598 :: 		}
L_vRF4463TxData130:
;driverrf4463pro.c, 599 :: 		}
0x11E8	0xE7EB    B	L_vRF4463TxData128
L_vRF4463TxData129:
;driverrf4463pro.c, 601 :: 		tx_cnt++;
0x11EA	0x480B    LDR	R0, [PC, #44]
0x11EC	0x6800    LDR	R0, [R0, #0]
0x11EE	0x1C41    ADDS	R1, R0, #1
0x11F0	0x4809    LDR	R0, [PC, #36]
0x11F2	0x6001    STR	R1, [R0, #0]
;driverrf4463pro.c, 603 :: 		vRF4463RxInit();          // rx_init();                //rf After the transmission is completed, enter the receiving mode
0x11F4	0xF7FFFF42  BL	_vRF4463RxInit+0
;driverrf4463pro.c, 604 :: 		}
L_end_vRF4463TxData:
0x11F8	0xB005    ADD	SP, SP, #20
0x11FA	0xBD00    POP	(R15)
0x11FC	0x008D2000  	DriverRF4463PROMain_ucRF4463IRQ+0
0x1200	0x00CC2000  	_Flag+0
0x1204	0x08145000  	GPIOC_ODRbits+0
0x1208	0x008E2000  	_ucSPI1ByteReceived+0
0x120C	0x00CA2000  	_rf_timeout+0
0x1210	0x34100000  	?ICS?lstr1_DriverRF4463PROMain+0
0x1214	0x00105000  	GPIOA_IDRbits+0
0x1218	0x00902000  	_tx_cnt+0
; end of _vRF4463TxData
_spi_write_fifo:
;driverrf4463pro.c, 899 :: 		void spi_write_fifo( void ) {
0x0814	0xB500    PUSH	(R14)
0x0816	0xB081    SUB	SP, SP, #4
;driverrf4463pro.c, 902 :: 		i = 0;
0x0818	0x2000    MOVS	R0, #0
0x081A	0x9000    STR	R0, [SP, #0]
;driverrf4463pro.c, 903 :: 		while ( i != 0xFF ) {
L_spi_write_fifo162:
0x081C	0x9800    LDR	R0, [SP, #0]
0x081E	0xB2C0    UXTB	R0, R0
0x0820	0x28FF    CMP	R0, #255
0x0822	0xD003    BEQ	L_spi_write_fifo163
;driverrf4463pro.c, 904 :: 		i = check_cts();                // Check if you can send Command
0x0824	0xF7FFFE4A  BL	_check_cts+0
0x0828	0x9000    STR	R0, [SP, #0]
;driverrf4463pro.c, 905 :: 		}
0x082A	0xE7F7    B	L_spi_write_fifo162
L_spi_write_fifo163:
;driverrf4463pro.c, 907 :: 		nSEL = 1;
0x082C	0x4A21    LDR	R2, [PC, #132]
0x082E	0x6810    LDR	R0, [R2, #0]
0x0830	0x2108    MOVS	R1, #8
0x0832	0x4308    ORRS	R0, R1
0x0834	0x6010    STR	R0, [R2, #0]
;driverrf4463pro.c, 908 :: 		nSEL = 0;
0x0836	0x4A1F    LDR	R2, [PC, #124]
0x0838	0x6810    LDR	R0, [R2, #0]
0x083A	0x2108    MOVS	R1, #8
0x083C	0x4388    BICS	R0, R1
0x083E	0x6010    STR	R0, [R2, #0]
;driverrf4463pro.c, 909 :: 		ucRf4463SPIByte( WRITE_TX_FIFO );
0x0840	0x2066    MOVS	R0, #102
0x0842	0xB401    PUSH	(R0)
0x0844	0xF7FFFD82  BL	_ucRf4463SPIByte+0
0x0848	0xB001    ADD	SP, SP, #4
;driverrf4463pro.c, 911 :: 		if ( mode == tx_test_mode) {
0x084A	0x481B    LDR	R0, [PC, #108]
0x084C	0x7800    LDRB	R0, [R0, #0]
0x084E	0x2802    CMP	R0, #2
0x0850	0xD114    BNE	L_spi_write_fifo164
;driverrf4463pro.c, 912 :: 		for ( i = 0; i < payload_length; i++ ) {
0x0852	0x2000    MOVS	R0, #0
0x0854	0x9000    STR	R0, [SP, #0]
L_spi_write_fifo165:
0x0856	0x9800    LDR	R0, [SP, #0]
0x0858	0xB2C0    UXTB	R0, R0
0x085A	0x280E    CMP	R0, #14
0x085C	0xD20D    BCS	L_spi_write_fifo166
;driverrf4463pro.c, 913 :: 		ucRf4463SPIByte( tx_test_aa_data[ i ] );   // Send 10 test data
0x085E	0x9900    LDR	R1, [SP, #0]
0x0860	0xB2C9    UXTB	R1, R1
0x0862	0x4816    LDR	R0, [PC, #88]
0x0864	0x1840    ADDS	R0, R0, R1
0x0866	0x7800    LDRB	R0, [R0, #0]
0x0868	0xB401    PUSH	(R0)
0x086A	0xF7FFFD6F  BL	_ucRf4463SPIByte+0
0x086E	0xB001    ADD	SP, SP, #4
;driverrf4463pro.c, 912 :: 		for ( i = 0; i < payload_length; i++ ) {
0x0870	0x9800    LDR	R0, [SP, #0]
0x0872	0xB2C0    UXTB	R0, R0
0x0874	0x3001    ADDS	R0, #1
0x0876	0x9000    STR	R0, [SP, #0]
;driverrf4463pro.c, 914 :: 		}
0x0878	0xE7ED    B	L_spi_write_fifo165
L_spi_write_fifo166:
;driverrf4463pro.c, 915 :: 		}
0x087A	0xE013    B	L_spi_write_fifo168
L_spi_write_fifo164:
;driverrf4463pro.c, 917 :: 		for ( i = 0; i < payload_length; i++ ) {
0x087C	0x2000    MOVS	R0, #0
0x087E	0x9000    STR	R0, [SP, #0]
L_spi_write_fifo169:
0x0880	0x9800    LDR	R0, [SP, #0]
0x0882	0xB2C0    UXTB	R0, R0
0x0884	0x280E    CMP	R0, #14
0x0886	0xD20D    BCS	L_spi_write_fifo170
;driverrf4463pro.c, 918 :: 		ucRf4463SPIByte( tx_ph_data[ i ] );
0x0888	0x9900    LDR	R1, [SP, #0]
0x088A	0xB2C9    UXTB	R1, R1
0x088C	0x480C    LDR	R0, [PC, #48]
0x088E	0x1840    ADDS	R0, R0, R1
0x0890	0x7800    LDRB	R0, [R0, #0]
0x0892	0xB401    PUSH	(R0)
0x0894	0xF7FFFD5A  BL	_ucRf4463SPIByte+0
0x0898	0xB001    ADD	SP, SP, #4
;driverrf4463pro.c, 917 :: 		for ( i = 0; i < payload_length; i++ ) {
0x089A	0x9800    LDR	R0, [SP, #0]
0x089C	0xB2C0    UXTB	R0, R0
0x089E	0x3001    ADDS	R0, #1
0x08A0	0x9000    STR	R0, [SP, #0]
;driverrf4463pro.c, 919 :: 		}
0x08A2	0xE7ED    B	L_spi_write_fifo169
L_spi_write_fifo170:
;driverrf4463pro.c, 920 :: 		}
L_spi_write_fifo168:
;driverrf4463pro.c, 921 :: 		nSEL = 1;
0x08A4	0x4A03    LDR	R2, [PC, #12]
0x08A6	0x6810    LDR	R0, [R2, #0]
0x08A8	0x2108    MOVS	R1, #8
0x08AA	0x4308    ORRS	R0, R1
0x08AC	0x6010    STR	R0, [R2, #0]
;driverrf4463pro.c, 922 :: 		}
L_end_spi_write_fifo:
0x08AE	0xB001    ADD	SP, SP, #4
0x08B0	0xBD00    POP	(R15)
0x08B2	0xBF00    NOP
0x08B4	0x00145000  	GPIOA_ODRbits+0
0x08B8	0x00C82000  	_mode+0
0x08BC	0x34230000  	_tx_test_aa_data+0
0x08C0	0x34310000  	_tx_ph_data+0
; end of _spi_write_fifo
_vRF4463EnableTxInterrupt:
;driverrf4463pro.c, 470 :: 		void vRF4463EnableTxInterrupt( void ) {
0x1034	0xB500    PUSH	(R14)
0x1036	0xB082    SUB	SP, SP, #8
;driverrf4463pro.c, 473 :: 		p[ 0 ] = 0x11;
0x1038	0x4668    MOV	R0, SP
0x103A	0x1C01    ADDS	R1, R0, #0
0x103C	0x2011    MOVS	R0, #17
0x103E	0x7008    STRB	R0, [R1, #0]
;driverrf4463pro.c, 474 :: 		p[ 1 ] = 0x01;            // 0x0100
0x1040	0x4668    MOV	R0, SP
0x1042	0x1C41    ADDS	R1, R0, #1
0x1044	0x2001    MOVS	R0, #1
0x1046	0x7008    STRB	R0, [R1, #0]
;driverrf4463pro.c, 475 :: 		p[ 2 ] = 0x02;            // 2Parameters
0x1048	0x4668    MOV	R0, SP
0x104A	0x1C81    ADDS	R1, R0, #2
0x104C	0x2002    MOVS	R0, #2
0x104E	0x7008    STRB	R0, [R1, #0]
;driverrf4463pro.c, 476 :: 		p[ 3 ] = 0x00;            // 0x0100
0x1050	0x4668    MOV	R0, SP
0x1052	0x1CC1    ADDS	R1, R0, #3
0x1054	0x2000    MOVS	R0, #0
0x1056	0x7008    STRB	R0, [R1, #0]
;driverrf4463pro.c, 477 :: 		p[ 4 ] = 0x01;            // Ph  int
0x1058	0x4668    MOV	R0, SP
0x105A	0x1D01    ADDS	R1, R0, #4
0x105C	0x2001    MOVS	R0, #1
0x105E	0x7008    STRB	R0, [R1, #0]
;driverrf4463pro.c, 478 :: 		p[ 5 ] = 0x20;            //  enable  packet sent interrupt
0x1060	0x4668    MOV	R0, SP
0x1062	0x1D41    ADDS	R1, R0, #5
0x1064	0x2020    MOVS	R0, #32
0x1066	0x7008    STRB	R0, [R1, #0]
;driverrf4463pro.c, 479 :: 		spi_write( 0x06, p );     // enable  packet receive interrupt
0x1068	0x4668    MOV	R0, SP
0x106A	0xB401    PUSH	(R0)
0x106C	0x2006    MOVS	R0, #6
0x106E	0xB401    PUSH	(R0)
0x1070	0xF7FFFDDA  BL	_spi_write+0
0x1074	0xB002    ADD	SP, SP, #8
;driverrf4463pro.c, 480 :: 		}
L_end_vRF4463EnableTxInterrupt:
0x1076	0xB002    ADD	SP, SP, #8
0x1078	0xBD00    POP	(R15)
; end of _vRF4463EnableTxInterrupt
_vRF4463TxStart:
;driverrf4463pro.c, 496 :: 		void vRF4463TxStart( void ) {
0x08C4	0xB500    PUSH	(R14)
0x08C6	0xB082    SUB	SP, SP, #8
;driverrf4463pro.c, 499 :: 		p[ 0 ] = START_TX ;       // start Command
0x08C8	0x4668    MOV	R0, SP
0x08CA	0x1C01    ADDS	R1, R0, #0
0x08CC	0x2031    MOVS	R0, #49
0x08CE	0x7008    STRB	R0, [R1, #0]
;driverrf4463pro.c, 500 :: 		p[ 1 ] = freq_channel;    // channel 0
0x08D0	0x4668    MOV	R0, SP
0x08D2	0x1C41    ADDS	R1, R0, #1
0x08D4	0x2000    MOVS	R0, #0
0x08D6	0x7008    STRB	R0, [R1, #0]
;driverrf4463pro.c, 501 :: 		p[ 2 ] = 0x30;            // Back after launch Readymode, Do not retransmit, launch immediately
0x08D8	0x4668    MOV	R0, SP
0x08DA	0x1C81    ADDS	R1, R0, #2
0x08DC	0x2030    MOVS	R0, #48
0x08DE	0x7008    STRB	R0, [R1, #0]
;driverrf4463pro.c, 502 :: 		p[ 3 ] = 0;
0x08E0	0x4668    MOV	R0, SP
0x08E2	0x1CC1    ADDS	R1, R0, #3
0x08E4	0x2000    MOVS	R0, #0
0x08E6	0x7008    STRB	R0, [R1, #0]
;driverrf4463pro.c, 503 :: 		p[ 4 ] = 0;               //payload_length; // Total to transmit 10 bytes
0x08E8	0x4668    MOV	R0, SP
0x08EA	0x1D01    ADDS	R1, R0, #4
0x08EC	0x2000    MOVS	R0, #0
0x08EE	0x7008    STRB	R0, [R1, #0]
;driverrf4463pro.c, 504 :: 		spi_write( 5, p );
0x08F0	0x4668    MOV	R0, SP
0x08F2	0xB401    PUSH	(R0)
0x08F4	0x2005    MOVS	R0, #5
0x08F6	0xB401    PUSH	(R0)
0x08F8	0xF000F996  BL	_spi_write+0
0x08FC	0xB002    ADD	SP, SP, #8
;driverrf4463pro.c, 505 :: 		}
L_end_vRF4463TxStart:
0x08FE	0xB002    ADD	SP, SP, #8
0x0900	0xBD00    POP	(R15)
; end of _vRF4463TxStart
_vRF4463RxInit:
;driverrf4463pro.c, 551 :: 		void vRF4463RxInit( void ) {
0x107C	0xB500    PUSH	(R14)
;driverrf4463pro.c, 552 :: 		Flag.is_tx = 0;
0x107E	0x4A0A    LDR	R2, [PC, #40]
0x1080	0x7810    LDRB	R0, [R2, #0]
0x1082	0x2102    MOVS	R1, #2
0x1084	0x4388    BICS	R0, R1
0x1086	0x7010    STRB	R0, [R2, #0]
;driverrf4463pro.c, 553 :: 		vRF4463FifoReset();           // fifo_reset();  // Buffer empty
0x1088	0xF000F828  BL	_vRF4463FifoReset+0
;driverrf4463pro.c, 554 :: 		vRF4463EnableRxInterrupt();   // enable_rx_interrupt();
0x108C	0xF7FFFA38  BL	_vRF4463EnableRxInterrupt+0
;driverrf4463pro.c, 555 :: 		vRF4463ClearInterrupts();      // clr_interrupt();  // Clear interrupt factor
0x1090	0xF001FA30  BL	_vRF4463ClearInterrupts+0
;driverrf4463pro.c, 557 :: 		if ( mode == rx_test_mode ) {
0x1094	0x4805    LDR	R0, [PC, #20]
0x1096	0x7800    LDRB	R0, [R0, #0]
0x1098	0x2803    CMP	R0, #3
0x109A	0xD102    BNE	L_vRF4463RxInit123
;driverrf4463pro.c, 558 :: 		vRF4463RxStartTest();      // rx_start_test();
0x109C	0xF7FFFA84  BL	_vRF4463RxStartTest+0
;driverrf4463pro.c, 559 :: 		}
0x10A0	0xE001    B	L_vRF4463RxInit124
L_vRF4463RxInit123:
;driverrf4463pro.c, 561 :: 		vRF4463RxStart();        // rx_start();    // Enter receiving mode, after receiving data, return to Readymode
0x10A2	0xF7FFFA55  BL	_vRF4463RxStart+0
;driverrf4463pro.c, 562 :: 		}
L_vRF4463RxInit124:
;driverrf4463pro.c, 563 :: 		}
L_end_vRF4463RxInit:
0x10A6	0xBD00    POP	(R15)
0x10A8	0x00CC2000  	_Flag+0
0x10AC	0x00C82000  	_mode+0
; end of _vRF4463RxInit
_vRF4463EnableRxInterrupt:
;driverrf4463pro.c, 454 :: 		void vRF4463EnableRxInterrupt( void ) {
0x0500	0xB500    PUSH	(R14)
0x0502	0xB082    SUB	SP, SP, #8
;driverrf4463pro.c, 457 :: 		p[ 0 ] = 0x11;
0x0504	0x4668    MOV	R0, SP
0x0506	0x1C01    ADDS	R1, R0, #0
0x0508	0x2011    MOVS	R0, #17
0x050A	0x7008    STRB	R0, [R1, #0]
;driverrf4463pro.c, 458 :: 		p[ 1 ] = 0x01;            // 0x0100
0x050C	0x4668    MOV	R0, SP
0x050E	0x1C41    ADDS	R1, R0, #1
0x0510	0x2001    MOVS	R0, #1
0x0512	0x7008    STRB	R0, [R1, #0]
;driverrf4463pro.c, 459 :: 		p[ 2 ] = 0x03;            // 3Parameters
0x0514	0x4668    MOV	R0, SP
0x0516	0x1C81    ADDS	R1, R0, #2
0x0518	0x2003    MOVS	R0, #3
0x051A	0x7008    STRB	R0, [R1, #0]
;driverrf4463pro.c, 460 :: 		p[ 3 ] = 0x00;            // 0100
0x051C	0x4668    MOV	R0, SP
0x051E	0x1CC1    ADDS	R1, R0, #3
0x0520	0x2000    MOVS	R0, #0
0x0522	0x7008    STRB	R0, [R1, #0]
;driverrf4463pro.c, 461 :: 		p[ 4 ] = 0x03;            // ph, modem int       0x03;
0x0524	0x4668    MOV	R0, SP
0x0526	0x1D01    ADDS	R1, R0, #4
0x0528	0x2003    MOVS	R0, #3
0x052A	0x7008    STRB	R0, [R1, #0]
;driverrf4463pro.c, 462 :: 		p[ 5 ] = 0x18;            // 0x10;   // Pack received int
0x052C	0x4668    MOV	R0, SP
0x052E	0x1D41    ADDS	R1, R0, #5
0x0530	0x2018    MOVS	R0, #24
0x0532	0x7008    STRB	R0, [R1, #0]
;driverrf4463pro.c, 463 :: 		p[ 6 ] = 0x00;            //preamble int, sync int setting
0x0534	0x4668    MOV	R0, SP
0x0536	0x1D81    ADDS	R1, R0, #6
0x0538	0x2000    MOVS	R0, #0
0x053A	0x7008    STRB	R0, [R1, #0]
;driverrf4463pro.c, 464 :: 		spi_write( 0x07, p );     // enable  packet receive interrupt
0x053C	0x4668    MOV	R0, SP
0x053E	0xB401    PUSH	(R0)
0x0540	0x2007    MOVS	R0, #7
0x0542	0xB401    PUSH	(R0)
0x0544	0xF000FB70  BL	_spi_write+0
0x0548	0xB002    ADD	SP, SP, #8
;driverrf4463pro.c, 465 :: 		}
L_end_vRF4463EnableRxInterrupt:
0x054A	0xB002    ADD	SP, SP, #8
0x054C	0xBD00    POP	(R15)
; end of _vRF4463EnableRxInterrupt
_vRF4463RxStartTest:
;driverrf4463pro.c, 529 :: 		void vRF4463RxStartTest( void ) {
0x05A8	0xB500    PUSH	(R14)
0x05AA	0xB082    SUB	SP, SP, #8
;driverrf4463pro.c, 532 :: 		LED_GREEN = 1;
0x05AC	0x4A16    LDR	R2, [PC, #88]
0x05AE	0x6810    LDR	R0, [R2, #0]
0x05B0	0x2140    MOVS	R1, #64
0x05B2	0x4308    ORRS	R0, R1
0x05B4	0x6010    STR	R0, [R2, #0]
;driverrf4463pro.c, 534 :: 		p[ 0 ] = START_RX;        // start Command
0x05B6	0x4668    MOV	R0, SP
0x05B8	0x1C01    ADDS	R1, R0, #0
0x05BA	0x2032    MOVS	R0, #50
0x05BC	0x7008    STRB	R0, [R1, #0]
;driverrf4463pro.c, 535 :: 		p[ 1 ] = freq_channel;    // channel 0
0x05BE	0x4668    MOV	R0, SP
0x05C0	0x1C41    ADDS	R1, R0, #1
0x05C2	0x2000    MOVS	R0, #0
0x05C4	0x7008    STRB	R0, [R1, #0]
;driverrf4463pro.c, 536 :: 		p[ 2 ] = 0x00;            // Enter receiving mode immediately
0x05C6	0x4668    MOV	R0, SP
0x05C8	0x1C81    ADDS	R1, R0, #2
0x05CA	0x2000    MOVS	R0, #0
0x05CC	0x7008    STRB	R0, [R1, #0]
;driverrf4463pro.c, 537 :: 		p[ 3 ] = 0;
0x05CE	0x4668    MOV	R0, SP
0x05D0	0x1CC1    ADDS	R1, R0, #3
0x05D2	0x2000    MOVS	R0, #0
0x05D4	0x7008    STRB	R0, [R1, #0]
;driverrf4463pro.c, 539 :: 		p[ 4 ] = 0;
0x05D6	0x4668    MOV	R0, SP
0x05D8	0x1D01    ADDS	R1, R0, #4
0x05DA	0x2000    MOVS	R0, #0
0x05DC	0x7008    STRB	R0, [R1, #0]
;driverrf4463pro.c, 540 :: 		p[ 5 ] = 0;               // unchanged after preamble timeout
0x05DE	0x4668    MOV	R0, SP
0x05E0	0x1D41    ADDS	R1, R0, #5
0x05E2	0x2000    MOVS	R0, #0
0x05E4	0x7008    STRB	R0, [R1, #0]
;driverrf4463pro.c, 543 :: 		p[ 6 ] = 0x08;
0x05E6	0x4668    MOV	R0, SP
0x05E8	0x1D81    ADDS	R1, R0, #6
0x05EA	0x2008    MOVS	R0, #8
0x05EC	0x7008    STRB	R0, [R1, #0]
;driverrf4463pro.c, 544 :: 		p[ 7 ] = 0x08;
0x05EE	0x4668    MOV	R0, SP
0x05F0	0x1DC1    ADDS	R1, R0, #7
0x05F2	0x2008    MOVS	R0, #8
0x05F4	0x7008    STRB	R0, [R1, #0]
;driverrf4463pro.c, 545 :: 		spi_write( 8, p );
0x05F6	0x4668    MOV	R0, SP
0x05F8	0xB401    PUSH	(R0)
0x05FA	0x2008    MOVS	R0, #8
0x05FC	0xB401    PUSH	(R0)
0x05FE	0xF000FB13  BL	_spi_write+0
0x0602	0xB002    ADD	SP, SP, #8
;driverrf4463pro.c, 546 :: 		}
L_end_vRF4463RxStartTest:
0x0604	0xB002    ADD	SP, SP, #8
0x0606	0xBD00    POP	(R15)
0x0608	0x08145000  	GPIOC_ODRbits+0
; end of _vRF4463RxStartTest
_vRF4463RxStart:
;driverrf4463pro.c, 510 :: 		void vRF4463RxStart( void ) {
0x0550	0xB500    PUSH	(R14)
0x0552	0xB082    SUB	SP, SP, #8
;driverrf4463pro.c, 513 :: 		p[ 0 ] = START_RX ;       // start Command
0x0554	0x4668    MOV	R0, SP
0x0556	0x1C01    ADDS	R1, R0, #0
0x0558	0x2032    MOVS	R0, #50
0x055A	0x7008    STRB	R0, [R1, #0]
;driverrf4463pro.c, 514 :: 		p[ 1 ] = freq_channel;    // channel 0
0x055C	0x4668    MOV	R0, SP
0x055E	0x1C41    ADDS	R1, R0, #1
0x0560	0x2000    MOVS	R0, #0
0x0562	0x7008    STRB	R0, [R1, #0]
;driverrf4463pro.c, 515 :: 		p[ 2 ] = 0x00;            // Enter receiving mode immediately
0x0564	0x4668    MOV	R0, SP
0x0566	0x1C81    ADDS	R1, R0, #2
0x0568	0x2000    MOVS	R0, #0
0x056A	0x7008    STRB	R0, [R1, #0]
;driverrf4463pro.c, 516 :: 		p[ 3 ] = 0;
0x056C	0x4668    MOV	R0, SP
0x056E	0x1CC1    ADDS	R1, R0, #3
0x0570	0x2000    MOVS	R0, #0
0x0572	0x7008    STRB	R0, [R1, #0]
;driverrf4463pro.c, 517 :: 		p[ 4 ] = 0;               // payload_length; // Total to receive 10 bytes
0x0574	0x4668    MOV	R0, SP
0x0576	0x1D01    ADDS	R1, R0, #4
0x0578	0x2000    MOVS	R0, #0
0x057A	0x7008    STRB	R0, [R1, #0]
;driverrf4463pro.c, 518 :: 		p[ 5 ] = 0;               // unchanged after preamble timeout
0x057C	0x4668    MOV	R0, SP
0x057E	0x1D41    ADDS	R1, R0, #5
0x0580	0x2000    MOVS	R0, #0
0x0582	0x7008    STRB	R0, [R1, #0]
;driverrf4463pro.c, 521 :: 		p[ 6 ] = 0x08;
0x0584	0x4668    MOV	R0, SP
0x0586	0x1D81    ADDS	R1, R0, #6
0x0588	0x2008    MOVS	R0, #8
0x058A	0x7008    STRB	R0, [R1, #0]
;driverrf4463pro.c, 522 :: 		p[ 7 ] = 0x08;
0x058C	0x4668    MOV	R0, SP
0x058E	0x1DC1    ADDS	R1, R0, #7
0x0590	0x2008    MOVS	R0, #8
0x0592	0x7008    STRB	R0, [R1, #0]
;driverrf4463pro.c, 523 :: 		spi_write( 8, p );
0x0594	0x4668    MOV	R0, SP
0x0596	0xB401    PUSH	(R0)
0x0598	0x2008    MOVS	R0, #8
0x059A	0xB401    PUSH	(R0)
0x059C	0xF000FB44  BL	_spi_write+0
0x05A0	0xB002    ADD	SP, SP, #8
;driverrf4463pro.c, 524 :: 		}
L_end_vRF4463RxStart:
0x05A2	0xB002    ADD	SP, SP, #8
0x05A4	0xBD00    POP	(R15)
; end of _vRF4463RxStart
_vRF4463TxCont:
;driverrf4463pro.c, 609 :: 		void vRF4463TxCont( void ) {
0x1224	0xB500    PUSH	(R14)
;driverrf4463pro.c, 612 :: 		LED_RED = 1;
0x1226	0x4A11    LDR	R2, [PC, #68]
0x1228	0x6810    LDR	R0, [R2, #0]
0x122A	0x2140    MOVS	R1, #64
0x122C	0x4308    ORRS	R0, R1
0x122E	0x6010    STR	R0, [R2, #0]
;driverrf4463pro.c, 613 :: 		vRF4463FifoReset();                     //  fifo_reset();  // Buffer empty
0x1230	0xF7FFFF54  BL	_vRF4463FifoReset+0
;driverrf4463pro.c, 614 :: 		spi_write_fifo();                       // Fill the buffer with data
0x1234	0xF7FFFAEE  BL	_spi_write_fifo+0
;driverrf4463pro.c, 615 :: 		vRF4463EnableTxInterrupt();             //  enable_tx_interrupt();
0x1238	0xF7FFFEFC  BL	_vRF4463EnableTxInterrupt+0
;driverrf4463pro.c, 616 :: 		vRF4463ClearInterrupts();               //  clr_interrupt();  // Clear interrupt factor
0x123C	0xF001F95A  BL	_vRF4463ClearInterrupts+0
;driverrf4463pro.c, 617 :: 		vRF4463TxStart();                       //  tx_start();    // Enter launch mode, start launch
0x1240	0xF7FFFB40  BL	_vRF4463TxStart+0
;driverrf4463pro.c, 618 :: 		rf_timeout = 0;
0x1244	0x2100    MOVS	R1, #0
0x1246	0x480A    LDR	R0, [PC, #40]
0x1248	0x8001    STRH	R1, [R0, #0]
;driverrf4463pro.c, 619 :: 		Flag.rf_reach_timeout = 0;
0x124A	0x4A0A    LDR	R2, [PC, #40]
0x124C	0x7810    LDRB	R0, [R2, #0]
0x124E	0x2104    MOVS	R1, #4
0x1250	0x4388    BICS	R0, R1
0x1252	0x7010    STRB	R0, [R2, #0]
;driverrf4463pro.c, 621 :: 		ucRF4463IRQ = 0;
0x1254	0x2100    MOVS	R1, #0
0x1256	0x4808    LDR	R0, [PC, #32]
0x1258	0x7001    STRB	R1, [R0, #0]
;driverrf4463pro.c, 624 :: 		while( nIRQ ) {          //nIRQ ) {
L_vRF4463TxCont131:
0x125A	0x4808    LDR	R0, [PC, #32]
0x125C	0x6801    LDR	R1, [R0, #0]
0x125E	0x2004    MOVS	R0, #4
0x1260	0x4008    ANDS	R0, R1
0x1262	0x0880    LSRS	R0, R0, #2
0x1264	0x2800    CMP	R0, #0
0x1266	0xD000    BEQ	L_vRF4463TxCont132
;driverrf4463pro.c, 632 :: 		}
0x1268	0xE7F7    B	L_vRF4463TxCont131
L_vRF4463TxCont132:
;driverrf4463pro.c, 633 :: 		}
L_end_vRF4463TxCont:
0x126A	0xBD00    POP	(R15)
0x126C	0x08145000  	GPIOC_ODRbits+0
0x1270	0x00CA2000  	_rf_timeout+0
0x1274	0x00CC2000  	_Flag+0
0x1278	0x008D2000  	DriverRF4463PROMain_ucRF4463IRQ+0
0x127C	0x00105000  	GPIOA_IDRbits+0
; end of _vRF4463TxCont
_vUSART1Start_TX:
;uarthandler.c, 348 :: 		unsigned char vUSART1Start_TX ( unsigned long *ucBuffer, unsigned long ulSize ) {
0x121C	0xB081    SUB	SP, SP, #4
;uarthandler.c, 381 :: 		}
L_end_vUSART1Start_TX:
0x121E	0xB001    ADD	SP, SP, #4
0x1220	0x4770    BX	LR
; end of _vUSART1Start_TX
__Lib_System_G0xx_InitialSetUpRCCRCC2:
;__Lib_System_G0xx.c, 416 :: 		
0x2A6C	0xB500    PUSH	(R14)
0x2A6E	0xB082    SUB	SP, SP, #8
;__Lib_System_G0xx.c, 426 :: 		
; ulRCC_CR start address is: 16 (R4)
0x2A70	0x4C18    LDR	R4, [PC, #96]
;__Lib_System_G0xx.c, 427 :: 		
; ulRCC_CFGR start address is: 20 (R5)
0x2A72	0x4D19    LDR	R5, [PC, #100]
;__Lib_System_G0xx.c, 428 :: 		
; ulRCC_PLLSYSCFGR start address is: 24 (R6)
0x2A74	0x4E19    LDR	R6, [PC, #100]
;__Lib_System_G0xx.c, 429 :: 		
; ulRCC_CCIPR start address is: 28 (R7)
0x2A76	0x4F1A    LDR	R7, [PC, #104]
;__Lib_System_G0xx.c, 430 :: 		
; ulRCC_BDCR start address is: 12 (R3)
0x2A78	0x4B1A    LDR	R3, [PC, #104]
;__Lib_System_G0xx.c, 431 :: 		
0x2A7A	0x481B    LDR	R0, [PC, #108]
0x2A7C	0x9001    STR	R0, [SP, #4]
;__Lib_System_G0xx.c, 432 :: 		
; ulPWR_CR1 start address is: 0 (R0)
0x2A7E	0x481B    LDR	R0, [PC, #108]
;__Lib_System_G0xx.c, 434 :: 		
; Fosc_kHz start address is: 4 (R1)
0x2A80	0x491B    LDR	R1, [PC, #108]
;__Lib_System_G0xx.c, 436 :: 		
0x2A82	0x9300    STR	R3, [SP, #0]
; Fosc_kHz end address is: 4 (R1)
; ulPWR_CR1 end address is: 0 (R0)
0x2A84	0xF7FEFBFC  BL	__Lib_System_G0xx_set_core_latency+0
0x2A88	0x9B00    LDR	R3, [SP, #0]
;__Lib_System_G0xx.c, 438 :: 		
0x2A8A	0x4A1A    LDR	R2, [PC, #104]
0x2A8C	0x6810    LDR	R0, [R2, #0]
0x2A8E	0x2101    MOVS	R1, #1
0x2A90	0x0209    LSLS	R1, R1, #8
0x2A92	0x4308    ORRS	R0, R1
0x2A94	0x6010    STR	R0, [R2, #0]
;__Lib_System_G0xx.c, 440 :: 		
0x2A96	0xF7FEFCCF  BL	__Lib_System_G0xx_SystemClockSetDefault+0
;__Lib_System_G0xx.c, 442 :: 		
0x2A9A	0x4817    LDR	R0, [PC, #92]
0x2A9C	0x6006    STR	R6, [R0, #0]
; ulRCC_PLLSYSCFGR end address is: 24 (R6)
;__Lib_System_G0xx.c, 443 :: 		
0x2A9E	0x4817    LDR	R0, [PC, #92]
0x2AA0	0x6004    STR	R4, [R0, #0]
; ulRCC_CR end address is: 16 (R4)
;__Lib_System_G0xx.c, 444 :: 		
0x2AA2	0x4817    LDR	R0, [PC, #92]
0x2AA4	0x6005    STR	R5, [R0, #0]
;__Lib_System_G0xx.c, 445 :: 		
0x2AA6	0x4817    LDR	R0, [PC, #92]
0x2AA8	0x6003    STR	R3, [R0, #0]
; ulRCC_BDCR end address is: 12 (R3)
;__Lib_System_G0xx.c, 446 :: 		
0x2AAA	0x9901    LDR	R1, [SP, #4]
0x2AAC	0x4816    LDR	R0, [PC, #88]
0x2AAE	0x6001    STR	R1, [R0, #0]
;__Lib_System_G0xx.c, 447 :: 		
0x2AB0	0x4816    LDR	R0, [PC, #88]
0x2AB2	0x6007    STR	R7, [R0, #0]
; ulRCC_CCIPR end address is: 28 (R7)
;__Lib_System_G0xx.c, 449 :: 		
0x2AB4	0xF7FEFC6C  BL	_is_clock_stable+0
; ulRCC_CFGR end address is: 20 (R5)
0x2AB8	0x462B    MOV	R3, R5
;__Lib_System_G0xx.c, 451 :: 		
L___Lib_System_G0xx_InitialSetUpRCCRCC259:
; ulRCC_CFGR start address is: 12 (R3)
0x2ABA	0x4811    LDR	R0, [PC, #68]
0x2ABC	0x6801    LDR	R1, [R0, #0]
0x2ABE	0x2038    MOVS	R0, #56
0x2AC0	0x460A    MOV	R2, R1
0x2AC2	0x4002    ANDS	R2, R0
0x2AC4	0x00D9    LSLS	R1, R3, #3
0x2AC6	0x2038    MOVS	R0, #56
0x2AC8	0x4008    ANDS	R0, R1
0x2ACA	0x4282    CMP	R2, R0
0x2ACC	0xD000    BEQ	L___Lib_System_G0xx_InitialSetUpRCCRCC260
;__Lib_System_G0xx.c, 452 :: 		
; ulRCC_CFGR end address is: 12 (R3)
0x2ACE	0xE7F4    B	L___Lib_System_G0xx_InitialSetUpRCCRCC259
L___Lib_System_G0xx_InitialSetUpRCCRCC260:
;__Lib_System_G0xx.c, 453 :: 		
L_end_InitialSetUpRCCRCC2:
0x2AD0	0xB002    ADD	SP, SP, #8
0x2AD2	0xBD00    POP	(R15)
0x2AD4	0x01000000  	#256
0x2AD8	0x00000000  	#0
0x2ADC	0x08022202  	#570558466
0x2AE0	0x00090000  	#9
0x2AE4	0x00000000  	#0
0x2AE8	0x00000000  	#0
0x2AEC	0x02000000  	#512
0x2AF0	0x3E800000  	#16000
0x2AF4	0x20004002  	FLASH_ACR+0
0x2AF8	0x100C4002  	RCC_PLLSYSCFGR+0
0x2AFC	0x10004002  	RCC_CR+0
0x2B00	0x10084002  	RCC_CFGR+0
0x2B04	0x105C4002  	RCC_BDCR+0
0x2B08	0x10604002  	RCC_CSR+0
0x2B0C	0x10544002  	RCC_CCIPR+0
; end of __Lib_System_G0xx_InitialSetUpRCCRCC2
__Lib_System_G0xx_set_core_latency:
;__Lib_System_G0xx.c, 351 :: 		
; hclk_freq start address is: 4 (R1)
; core_voltage_value start address is: 0 (R0)
0x1280	0xB500    PUSH	(R14)
; hclk_freq end address is: 4 (R1)
; core_voltage_value end address is: 0 (R0)
; core_voltage_value start address is: 0 (R0)
; hclk_freq start address is: 4 (R1)
;__Lib_System_G0xx.c, 353 :: 		
0x1282	0x4A3B    LDR	R2, [PC, #236]
0x1284	0x4002    ANDS	R2, R0
0x1286	0x2A00    CMP	R2, #0
0x1288	0xD022    BEQ	L___Lib_System_G0xx_set_core_latency23
; core_voltage_value end address is: 0 (R0)
;__Lib_System_G0xx.c, 354 :: 		
0x128A	0x4A3A    LDR	R2, [PC, #232]
0x128C	0x4291    CMP	R1, R2
0x128E	0xD80B    BHI	L___Lib_System_G0xx_set_core_latency24
; hclk_freq end address is: 4 (R1)
;__Lib_System_G0xx.c, 355 :: 		
0x1290	0x4A39    LDR	R2, [PC, #228]
0x1292	0x6813    LDR	R3, [R2, #0]
0x1294	0x4A38    LDR	R2, [PC, #224]
0x1296	0x6013    STR	R3, [R2, #0]
;__Lib_System_G0xx.c, 356 :: 		
L___Lib_System_G0xx_set_core_latency25:
0x1298	0x4A37    LDR	R2, [PC, #220]
0x129A	0x6813    LDR	R3, [R2, #0]
0x129C	0x2200    MOVS	R2, #0
0x129E	0x401A    ANDS	R2, R3
0x12A0	0x2A00    CMP	R2, #0
0x12A2	0xD000    BEQ	L___Lib_System_G0xx_set_core_latency26
0x12A4	0xE7F8    B	L___Lib_System_G0xx_set_core_latency25
L___Lib_System_G0xx_set_core_latency26:
;__Lib_System_G0xx.c, 357 :: 		
0x12A6	0xE00C    B	L___Lib_System_G0xx_set_core_latency27
L___Lib_System_G0xx_set_core_latency24:
;__Lib_System_G0xx.c, 359 :: 		
0x12A8	0x4A33    LDR	R2, [PC, #204]
0x12AA	0x6813    LDR	R3, [R2, #0]
0x12AC	0x2202    MOVS	R2, #2
0x12AE	0x4313    ORRS	R3, R2
0x12B0	0x4A31    LDR	R2, [PC, #196]
0x12B2	0x6013    STR	R3, [R2, #0]
;__Lib_System_G0xx.c, 360 :: 		
L___Lib_System_G0xx_set_core_latency28:
0x12B4	0x4A30    LDR	R2, [PC, #192]
0x12B6	0x6813    LDR	R3, [R2, #0]
0x12B8	0x2202    MOVS	R2, #2
0x12BA	0x401A    ANDS	R2, R3
0x12BC	0x2A02    CMP	R2, #2
0x12BE	0xD000    BEQ	L___Lib_System_G0xx_set_core_latency29
0x12C0	0xE7F8    B	L___Lib_System_G0xx_set_core_latency28
L___Lib_System_G0xx_set_core_latency29:
;__Lib_System_G0xx.c, 361 :: 		
L___Lib_System_G0xx_set_core_latency27:
;__Lib_System_G0xx.c, 362 :: 		
0x12C2	0x4A2E    LDR	R2, [PC, #184]
0x12C4	0x6813    LDR	R3, [R2, #0]
0x12C6	0x4A2A    LDR	R2, [PC, #168]
0x12C8	0x4313    ORRS	R3, R2
0x12CA	0x4A2C    LDR	R2, [PC, #176]
0x12CC	0x6013    STR	R3, [R2, #0]
;__Lib_System_G0xx.c, 363 :: 		
0x12CE	0xE04D    B	L___Lib_System_G0xx_set_core_latency30
L___Lib_System_G0xx_set_core_latency23:
;__Lib_System_G0xx.c, 364 :: 		
; hclk_freq start address is: 4 (R1)
; core_voltage_value start address is: 0 (R0)
0x12D0	0x4A2B    LDR	R2, [PC, #172]
0x12D2	0x4002    ANDS	R2, R0
; core_voltage_value end address is: 0 (R0)
0x12D4	0x2A00    CMP	R2, #0
0x12D6	0xD100    BNE	#0
0x12D8	0xE048    B	L___Lib_System_G0xx_set_core_latency31
;__Lib_System_G0xx.c, 366 :: 		
0x12DA	0x4A28    LDR	R2, [PC, #160]
0x12DC	0x6813    LDR	R3, [R2, #0]
0x12DE	0x4A28    LDR	R2, [PC, #160]
0x12E0	0x4313    ORRS	R3, R2
0x12E2	0x4A26    LDR	R2, [PC, #152]
0x12E4	0x6013    STR	R3, [R2, #0]
; hclk_freq end address is: 4 (R1)
0x12E6	0x4608    MOV	R0, R1
;__Lib_System_G0xx.c, 368 :: 		
L___Lib_System_G0xx_set_core_latency32:
; hclk_freq start address is: 0 (R0)
0x12E8	0x4A26    LDR	R2, [PC, #152]
0x12EA	0x6813    LDR	R3, [R2, #0]
0x12EC	0x2201    MOVS	R2, #1
0x12EE	0x0292    LSLS	R2, R2, #10
0x12F0	0x401A    ANDS	R2, R3
0x12F2	0x0A92    LSRS	R2, R2, #10
0x12F4	0x2A00    CMP	R2, #0
0x12F6	0xD000    BEQ	L___Lib_System_G0xx_set_core_latency33
0x12F8	0xE7F6    B	L___Lib_System_G0xx_set_core_latency32
L___Lib_System_G0xx_set_core_latency33:
;__Lib_System_G0xx.c, 370 :: 		
0x12FA	0x4A23    LDR	R2, [PC, #140]
0x12FC	0x4290    CMP	R0, R2
0x12FE	0xD80B    BHI	L___Lib_System_G0xx_set_core_latency34
; hclk_freq end address is: 0 (R0)
;__Lib_System_G0xx.c, 371 :: 		
0x1300	0x4A1D    LDR	R2, [PC, #116]
0x1302	0x6813    LDR	R3, [R2, #0]
0x1304	0x4A1C    LDR	R2, [PC, #112]
0x1306	0x6013    STR	R3, [R2, #0]
;__Lib_System_G0xx.c, 372 :: 		
L___Lib_System_G0xx_set_core_latency35:
0x1308	0x4A1B    LDR	R2, [PC, #108]
0x130A	0x6813    LDR	R3, [R2, #0]
0x130C	0x2200    MOVS	R2, #0
0x130E	0x401A    ANDS	R2, R3
0x1310	0x2A00    CMP	R2, #0
0x1312	0xD000    BEQ	L___Lib_System_G0xx_set_core_latency36
0x1314	0xE7F8    B	L___Lib_System_G0xx_set_core_latency35
L___Lib_System_G0xx_set_core_latency36:
;__Lib_System_G0xx.c, 373 :: 		
0x1316	0xE029    B	L___Lib_System_G0xx_set_core_latency37
L___Lib_System_G0xx_set_core_latency34:
;__Lib_System_G0xx.c, 374 :: 		
; hclk_freq start address is: 0 (R0)
0x1318	0x4A1B    LDR	R2, [PC, #108]
0x131A	0x4290    CMP	R0, R2
0x131C	0xD901    BLS	L___Lib_System_G0xx_set_core_latency80
0x131E	0x2301    MOVS	R3, #1
0x1320	0xE000    B	L___Lib_System_G0xx_set_core_latency81
L___Lib_System_G0xx_set_core_latency80:
0x1322	0x2300    MOVS	R3, #0
L___Lib_System_G0xx_set_core_latency81:
0x1324	0x4A19    LDR	R2, [PC, #100]
0x1326	0x4290    CMP	R0, R2
0x1328	0xD801    BHI	L___Lib_System_G0xx_set_core_latency82
0x132A	0x2201    MOVS	R2, #1
0x132C	0xE000    B	L___Lib_System_G0xx_set_core_latency83
L___Lib_System_G0xx_set_core_latency82:
0x132E	0x2200    MOVS	R2, #0
L___Lib_System_G0xx_set_core_latency83:
; hclk_freq end address is: 0 (R0)
0x1330	0x401A    ANDS	R2, R3
0x1332	0x2A00    CMP	R2, #0
0x1334	0xD00D    BEQ	L___Lib_System_G0xx_set_core_latency38
;__Lib_System_G0xx.c, 375 :: 		
0x1336	0x4A10    LDR	R2, [PC, #64]
0x1338	0x6813    LDR	R3, [R2, #0]
0x133A	0x2202    MOVS	R2, #2
0x133C	0x4313    ORRS	R3, R2
0x133E	0x4A0E    LDR	R2, [PC, #56]
0x1340	0x6013    STR	R3, [R2, #0]
;__Lib_System_G0xx.c, 376 :: 		
L___Lib_System_G0xx_set_core_latency39:
0x1342	0x4A0D    LDR	R2, [PC, #52]
0x1344	0x6813    LDR	R3, [R2, #0]
0x1346	0x2202    MOVS	R2, #2
0x1348	0x401A    ANDS	R2, R3
0x134A	0x2A02    CMP	R2, #2
0x134C	0xD000    BEQ	L___Lib_System_G0xx_set_core_latency40
0x134E	0xE7F8    B	L___Lib_System_G0xx_set_core_latency39
L___Lib_System_G0xx_set_core_latency40:
;__Lib_System_G0xx.c, 377 :: 		
0x1350	0xE00C    B	L___Lib_System_G0xx_set_core_latency41
L___Lib_System_G0xx_set_core_latency38:
;__Lib_System_G0xx.c, 379 :: 		
0x1352	0x4A09    LDR	R2, [PC, #36]
0x1354	0x6813    LDR	R3, [R2, #0]
0x1356	0x2204    MOVS	R2, #4
0x1358	0x4313    ORRS	R3, R2
0x135A	0x4A07    LDR	R2, [PC, #28]
0x135C	0x6013    STR	R3, [R2, #0]
;__Lib_System_G0xx.c, 380 :: 		
L___Lib_System_G0xx_set_core_latency42:
0x135E	0x4A06    LDR	R2, [PC, #24]
0x1360	0x6813    LDR	R3, [R2, #0]
0x1362	0x2204    MOVS	R2, #4
0x1364	0x401A    ANDS	R2, R3
0x1366	0x2A04    CMP	R2, #4
0x1368	0xD000    BEQ	L___Lib_System_G0xx_set_core_latency43
0x136A	0xE7F8    B	L___Lib_System_G0xx_set_core_latency42
L___Lib_System_G0xx_set_core_latency43:
;__Lib_System_G0xx.c, 381 :: 		
L___Lib_System_G0xx_set_core_latency41:
L___Lib_System_G0xx_set_core_latency37:
;__Lib_System_G0xx.c, 382 :: 		
L___Lib_System_G0xx_set_core_latency31:
L___Lib_System_G0xx_set_core_latency30:
;__Lib_System_G0xx.c, 383 :: 		
L_end_set_core_latency:
0x136C	0xBD00    POP	(R15)
0x136E	0xBF00    NOP
0x1370	0x04000000  	#1024
0x1374	0x1F400000  	#8000
0x1378	0x20004002  	FLASH_ACR+0
0x137C	0x70004000  	PWR_CR1+0
0x1380	0x02000000  	#512
0x1384	0x70144000  	PWR_SR2+0
0x1388	0x5DC00000  	#24000
0x138C	0xBB800000  	#48000
; end of __Lib_System_G0xx_set_core_latency
__Lib_System_G0xx_SystemClockSetDefault:
;__Lib_System_G0xx.c, 316 :: 		
0x1438	0xB081    SUB	SP, SP, #4
;__Lib_System_G0xx.c, 318 :: 		
0x143A	0x4A16    LDR	R2, [PC, #88]
0x143C	0x6810    LDR	R0, [R2, #0]
0x143E	0x2101    MOVS	R1, #1
0x1440	0x0709    LSLS	R1, R1, #28
0x1442	0x4308    ORRS	R0, R1
0x1444	0x6010    STR	R0, [R2, #0]
;__Lib_System_G0xx.c, 320 :: 		
0x1446	0x4A14    LDR	R2, [PC, #80]
0x1448	0x6810    LDR	R0, [R2, #0]
0x144A	0x2101    MOVS	R1, #1
0x144C	0x4308    ORRS	R0, R1
0x144E	0x6010    STR	R0, [R2, #0]
;__Lib_System_G0xx.c, 322 :: 		
0x1450	0x4812    LDR	R0, [PC, #72]
0x1452	0x6801    LDR	R1, [R0, #0]
0x1454	0x2003    MOVS	R0, #3
0x1456	0x4001    ANDS	R1, R0
0x1458	0x4810    LDR	R0, [PC, #64]
0x145A	0x6001    STR	R1, [R0, #0]
;__Lib_System_G0xx.c, 324 :: 		
0x145C	0x4810    LDR	R0, [PC, #64]
0x145E	0x6801    LDR	R1, [R0, #0]
0x1460	0x20FF    MOVS	R0, #255
0x1462	0x3001    ADDS	R0, #1
0x1464	0x4301    ORRS	R1, R0
0x1466	0x480E    LDR	R0, [PC, #56]
0x1468	0x6001    STR	R1, [R0, #0]
;__Lib_System_G0xx.c, 326 :: 		
0x146A	0x480E    LDR	R0, [PC, #56]
0x146C	0x6801    LDR	R1, [R0, #0]
0x146E	0x480E    LDR	R0, [PC, #56]
0x1470	0x4301    ORRS	R1, R0
0x1472	0x480C    LDR	R0, [PC, #48]
0x1474	0x6001    STR	R1, [R0, #0]
;__Lib_System_G0xx.c, 328 :: 		
0x1476	0x480D    LDR	R0, [PC, #52]
0x1478	0x6801    LDR	R1, [R0, #0]
0x147A	0x2038    MOVS	R0, #56
0x147C	0x4001    ANDS	R1, R0
0x147E	0x480B    LDR	R0, [PC, #44]
0x1480	0x6001    STR	R1, [R0, #0]
;__Lib_System_G0xx.c, 330 :: 		
0x1482	0x4807    LDR	R0, [PC, #28]
0x1484	0x6801    LDR	R1, [R0, #0]
0x1486	0x480A    LDR	R0, [PC, #40]
0x1488	0x4001    ANDS	R1, R0
0x148A	0x4805    LDR	R0, [PC, #20]
0x148C	0x6001    STR	R1, [R0, #0]
;__Lib_System_G0xx.c, 331 :: 		
L_end_SystemClockSetDefault:
0x148E	0xB001    ADD	SP, SP, #4
0x1490	0x4770    BX	LR
0x1492	0xBF00    NOP
0x1494	0x103C4002  	RCC_APBENR1+0
0x1498	0x10404002  	RCC_APBENR2+0
0x149C	0x100C4002  	RCC_PLLSYSCFGR+0
0x14A0	0x10004002  	RCC_CR+0
0x14A4	0x70004000  	PWR_CR1+0
0x14A8	0x04000000  	#1024
0x14AC	0x10084002  	RCC_CFGR+0
0x14B0	0xFFFFFEF2  	#-17629185
; end of __Lib_System_G0xx_SystemClockSetDefault
_is_clock_stable:
;__Lib_System_G0xx.c, 389 :: 		
0x1390	0xB500    PUSH	(R14)
;__Lib_System_G0xx.c, 390 :: 		
0x1392	0x4821    LDR	R0, [PC, #132]
0x1394	0x6801    LDR	R1, [R0, #0]
0x1396	0x20FF    MOVS	R0, #255
0x1398	0x3001    ADDS	R0, #1
0x139A	0x4008    ANDS	R0, R1
0x139C	0x2800    CMP	R0, #0
0x139E	0xD006    BEQ	L_is_clock_stable44
;__Lib_System_G0xx.c, 391 :: 		
L_is_clock_stable45:
0x13A0	0x481D    LDR	R0, [PC, #116]
0x13A2	0x6801    LDR	R1, [R0, #0]
0x13A4	0x481D    LDR	R0, [PC, #116]
0x13A6	0x4008    ANDS	R0, R1
0x13A8	0x2800    CMP	R0, #0
0x13AA	0xD100    BNE	L_is_clock_stable46
;__Lib_System_G0xx.c, 392 :: 		
0x13AC	0xE7F8    B	L_is_clock_stable45
L_is_clock_stable46:
;__Lib_System_G0xx.c, 393 :: 		
L_is_clock_stable44:
;__Lib_System_G0xx.c, 394 :: 		
0x13AE	0x481A    LDR	R0, [PC, #104]
0x13B0	0x6801    LDR	R1, [R0, #0]
0x13B2	0x481B    LDR	R0, [PC, #108]
0x13B4	0x4008    ANDS	R0, R1
0x13B6	0x2800    CMP	R0, #0
0x13B8	0xD006    BEQ	L_is_clock_stable47
;__Lib_System_G0xx.c, 395 :: 		
L_is_clock_stable48:
0x13BA	0x4817    LDR	R0, [PC, #92]
0x13BC	0x6801    LDR	R1, [R0, #0]
0x13BE	0x4819    LDR	R0, [PC, #100]
0x13C0	0x4008    ANDS	R0, R1
0x13C2	0x2800    CMP	R0, #0
0x13C4	0xD100    BNE	L_is_clock_stable49
;__Lib_System_G0xx.c, 396 :: 		
0x13C6	0xE7F8    B	L_is_clock_stable48
L_is_clock_stable49:
;__Lib_System_G0xx.c, 397 :: 		
L_is_clock_stable47:
;__Lib_System_G0xx.c, 398 :: 		
0x13C8	0x4813    LDR	R0, [PC, #76]
0x13CA	0x6801    LDR	R1, [R0, #0]
0x13CC	0x4816    LDR	R0, [PC, #88]
0x13CE	0x4008    ANDS	R0, R1
0x13D0	0x2800    CMP	R0, #0
0x13D2	0xD006    BEQ	L_is_clock_stable50
;__Lib_System_G0xx.c, 399 :: 		
L_is_clock_stable51:
0x13D4	0x4810    LDR	R0, [PC, #64]
0x13D6	0x6801    LDR	R1, [R0, #0]
0x13D8	0x4814    LDR	R0, [PC, #80]
0x13DA	0x4008    ANDS	R0, R1
0x13DC	0x2800    CMP	R0, #0
0x13DE	0xD100    BNE	L_is_clock_stable52
;__Lib_System_G0xx.c, 400 :: 		
0x13E0	0xE7F8    B	L_is_clock_stable51
L_is_clock_stable52:
;__Lib_System_G0xx.c, 401 :: 		
L_is_clock_stable50:
;__Lib_System_G0xx.c, 402 :: 		
0x13E2	0x4813    LDR	R0, [PC, #76]
0x13E4	0x6801    LDR	R1, [R0, #0]
0x13E6	0x2001    MOVS	R0, #1
0x13E8	0x4008    ANDS	R0, R1
0x13EA	0x2800    CMP	R0, #0
0x13EC	0xD006    BEQ	L_is_clock_stable53
;__Lib_System_G0xx.c, 403 :: 		
L_is_clock_stable54:
0x13EE	0x4810    LDR	R0, [PC, #64]
0x13F0	0x6801    LDR	R1, [R0, #0]
0x13F2	0x2002    MOVS	R0, #2
0x13F4	0x4008    ANDS	R0, R1
0x13F6	0x2800    CMP	R0, #0
0x13F8	0xD100    BNE	L_is_clock_stable55
;__Lib_System_G0xx.c, 404 :: 		
0x13FA	0xE7F8    B	L_is_clock_stable54
L_is_clock_stable55:
;__Lib_System_G0xx.c, 405 :: 		
L_is_clock_stable53:
;__Lib_System_G0xx.c, 406 :: 		
0x13FC	0x480D    LDR	R0, [PC, #52]
0x13FE	0x6801    LDR	R1, [R0, #0]
0x1400	0x2001    MOVS	R0, #1
0x1402	0x4008    ANDS	R0, R1
0x1404	0x2800    CMP	R0, #0
0x1406	0xD006    BEQ	L_is_clock_stable56
;__Lib_System_G0xx.c, 407 :: 		
L_is_clock_stable57:
0x1408	0x480A    LDR	R0, [PC, #40]
0x140A	0x6801    LDR	R1, [R0, #0]
0x140C	0x2002    MOVS	R0, #2
0x140E	0x4008    ANDS	R0, R1
0x1410	0x2800    CMP	R0, #0
0x1412	0xD100    BNE	L_is_clock_stable58
;__Lib_System_G0xx.c, 408 :: 		
0x1414	0xE7F8    B	L_is_clock_stable57
L_is_clock_stable58:
;__Lib_System_G0xx.c, 409 :: 		
L_is_clock_stable56:
;__Lib_System_G0xx.c, 410 :: 		
L_end_is_clock_stable:
0x1416	0xBD00    POP	(R15)
0x1418	0x10004002  	RCC_CR+0
0x141C	0x04000000  	#1024
0x1420	0x00000001  	#65536
0x1424	0x00000002  	#131072
0x1428	0x00000100  	#16777216
0x142C	0x00000200  	#33554432
0x1430	0x10604002  	RCC_CSR+0
0x1434	0x105C4002  	RCC_BDCR+0
; end of _is_clock_stable
__Lib_System_G0xx_InitialSetUpFosc:
;__Lib_System_G0xx.c, 459 :: 		
0x2B18	0xB081    SUB	SP, SP, #4
;__Lib_System_G0xx.c, 460 :: 		
0x2B1A	0x4902    LDR	R1, [PC, #8]
0x2B1C	0x4802    LDR	R0, [PC, #8]
0x2B1E	0x6001    STR	R1, [R0, #0]
;__Lib_System_G0xx.c, 461 :: 		
L_end_InitialSetUpFosc:
0x2B20	0xB001    ADD	SP, SP, #4
0x2B22	0x4770    BX	LR
0x2B24	0x3E800000  	#16000
0x2B28	0x00D42000  	___System_CLOCK_IN_KHZ+0
; end of __Lib_System_G0xx_InitialSetUpFosc
___GenExcept:
;__Lib_System_G0xx.c, 267 :: 		
0x2B10	0xB500    PUSH	(R14)
;__Lib_System_G0xx.c, 268 :: 		
L___GenExcept19:
0x2B12	0xE7FE    B	L___GenExcept19
;__Lib_System_G0xx.c, 269 :: 		
L_end___GenExcept:
0x2B14	0xBD00    POP	(R15)
; end of ___GenExcept
0x3468	0xB500    PUSH	(R14)
0x346A	0x4E06    LDR	R6, [PC, #24]
0x346C	0x4D06    LDR	R5, [PC, #24]
0x346E	0x4F07    LDR	R7, [PC, #28]
0x3470	0xF7FEF87C  BL	5484
0x3474	0x4E06    LDR	R6, [PC, #24]
0x3476	0x4D07    LDR	R5, [PC, #28]
0x3478	0x4F07    LDR	R7, [PC, #28]
0x347A	0xF7FEF877  BL	5484
0x347E	0xBD00    POP	(R15)
0x3480	0x4770    BX	LR
0x3482	0xBF00    NOP
0x3484	0x00002000  	#536870912
0x3488	0x008F2000  	#536871055
0x348C	0x2B2C0000  	#11052
0x3490	0x00902000  	#536871056
0x3494	0x00982000  	#536871064
0x3498	0x34480000  	#13384
0x3504	0xB500    PUSH	(R14)
0x3506	0x4E03    LDR	R6, [PC, #12]
0x3508	0x4D03    LDR	R5, [PC, #12]
0x350A	0xF7FEF839  BL	5504
0x350E	0xBD00    POP	(R15)
0x3510	0x4770    BX	LR
0x3512	0xBF00    NOP
0x3514	0x00002000  	#536870912
0x3518	0x00E82000  	#536871144
_vUARTISR:
;uarthandler.c, 146 :: 		void vUARTISR() iv IVT_INT_USART1 ics ICS_AUTO{
0x26BC	0xB081    SUB	SP, SP, #4
;uarthandler.c, 147 :: 		LED_BLUE =~ LED_BLUE;
0x26BE	0x480C    LDR	R0, [PC, #48]
0x26C0	0x6800    LDR	R0, [R0, #0]
0x26C2	0x2101    MOVS	R1, #1
0x26C4	0x0209    LSLS	R1, R1, #8
0x26C6	0x4001    ANDS	R1, R0
0x26C8	0x0A09    LSRS	R1, R1, #8
0x26CA	0x2001    MOVS	R0, #1
0x26CC	0x4048    EORS	R0, R1
0x26CE	0xB2C3    UXTB	R3, R0
0x26D0	0x4A07    LDR	R2, [PC, #28]
0x26D2	0x6810    LDR	R0, [R2, #0]
0x26D4	0x2101    MOVS	R1, #1
0x26D6	0x4019    ANDS	R1, R3
0x26D8	0xD003    BEQ	L__vUARTISR299
0x26DA	0x2101    MOVS	R1, #1
0x26DC	0x0209    LSLS	R1, R1, #8
0x26DE	0x4308    ORRS	R0, R1
0x26E0	0xE002    B	L__vUARTISR298
L__vUARTISR299:
0x26E2	0x2101    MOVS	R1, #1
0x26E4	0x0209    LSLS	R1, R1, #8
0x26E6	0x4388    BICS	R0, R1
L__vUARTISR298:
0x26E8	0x6010    STR	R0, [R2, #0]
;uarthandler.c, 156 :: 		}
L_end_vUARTISR:
0x26EA	0xB001    ADD	SP, SP, #4
0x26EC	0x4770    BX	LR
0x26EE	0xBF00    NOP
0x26F0	0x08145000  	GPIOC_ODRbits+0
; end of _vUARTISR
_Timer2_interrupt:
;DriverRF4463PROMain.c, 59 :: 		void Timer2_interrupt() iv IVT_INT_TIM2 {
0x2568	0xB081    SUB	SP, SP, #4
;DriverRF4463PROMain.c, 60 :: 		TIM2_SR.UIF = 0;
0x256A	0x4A08    LDR	R2, [PC, #32]
0x256C	0x6810    LDR	R0, [R2, #0]
0x256E	0x2101    MOVS	R1, #1
0x2570	0x4388    BICS	R0, R1
0x2572	0x6010    STR	R0, [R2, #0]
;DriverRF4463PROMain.c, 61 :: 		Flag.rf_reach_timeout = 1; //Enter your code here
0x2574	0x4A06    LDR	R2, [PC, #24]
0x2576	0x7810    LDRB	R0, [R2, #0]
0x2578	0x2104    MOVS	R1, #4
0x257A	0x4308    ORRS	R0, R1
0x257C	0x7010    STRB	R0, [R2, #0]
;DriverRF4463PROMain.c, 62 :: 		Flag.reach_1s = 1;
0x257E	0x4A04    LDR	R2, [PC, #16]
0x2580	0x7810    LDRB	R0, [R2, #0]
0x2582	0x2101    MOVS	R1, #1
0x2584	0x4308    ORRS	R0, R1
0x2586	0x7010    STRB	R0, [R2, #0]
;DriverRF4463PROMain.c, 63 :: 		}
L_end_Timer2_interrupt:
0x2588	0xB001    ADD	SP, SP, #4
0x258A	0x4770    BX	LR
0x258C	0x00104000  	TIM2_SR+0
0x2590	0x00CC2000  	_Flag+0
; end of _Timer2_interrupt
_vRF4463ISR:
;driverrf4463pro.c, 39 :: 		void vRF4463ISR() iv IVT_INT_EXTI2_3 ics ICS_AUTO{
0x2538	0xB500    PUSH	(R14)
;driverrf4463pro.c, 40 :: 		if ( EXTI_FPR1bits.FPIF2 ){
0x253A	0x4809    LDR	R0, [PC, #36]
0x253C	0x6801    LDR	R1, [R0, #0]
0x253E	0x2004    MOVS	R0, #4
0x2540	0x4008    ANDS	R0, R1
0x2542	0x0880    LSRS	R0, R0, #2
0x2544	0x2800    CMP	R0, #0
0x2546	0xD009    BEQ	L_vRF4463ISR35
;driverrf4463pro.c, 41 :: 		EXTI_FPR1bits.FPIF2 = 1;
0x2548	0x4A05    LDR	R2, [PC, #20]
0x254A	0x6810    LDR	R0, [R2, #0]
0x254C	0x2104    MOVS	R1, #4
0x254E	0x4308    ORRS	R0, R1
0x2550	0x6010    STR	R0, [R2, #0]
;driverrf4463pro.c, 44 :: 		vRF4463ClearInterrupts();
0x2552	0xF7FFFFCF  BL	_vRF4463ClearInterrupts+0
;driverrf4463pro.c, 45 :: 		ucRF4463IRQ = 1;
0x2556	0x2101    MOVS	R1, #1
0x2558	0x4802    LDR	R0, [PC, #8]
0x255A	0x7001    STRB	R1, [R0, #0]
;driverrf4463pro.c, 46 :: 		}
L_vRF4463ISR35:
;driverrf4463pro.c, 47 :: 		}
L_end_vRF4463ISR:
0x255C	0xBD00    POP	(R15)
0x255E	0xBF00    NOP
0x2560	0x18104002  	EXTI_FPR1bits+0
0x2564	0x008D2000  	DriverRF4463PROMain_ucRF4463IRQ+0
; end of _vRF4463ISR
_Int_SPI1:
;driverspi.c, 49 :: 		void Int_SPI1() iv IVT_INT_SPI1 ics ICS_AUTO {
0x266C	0xB500    PUSH	(R14)
;driverspi.c, 51 :: 		if ( SPI1_SRbits.RXNE ) {
0x266E	0x480F    LDR	R0, [PC, #60]
0x2670	0x6801    LDR	R1, [R0, #0]
0x2672	0x2001    MOVS	R0, #1
0x2674	0x4008    ANDS	R0, R1
0x2676	0x2800    CMP	R0, #0
0x2678	0xD016    BEQ	L_Int_SPI10
;driverspi.c, 52 :: 		ucSPI1ByteReceived = ( unsigned char )SPI1_DR;      // lee el Byte recibido
0x267A	0x480D    LDR	R0, [PC, #52]
0x267C	0x6801    LDR	R1, [R0, #0]
0x267E	0x480D    LDR	R0, [PC, #52]
0x2680	0x7001    STRB	R1, [R0, #0]
;driverspi.c, 54 :: 		LED_GREEN = ~LED_GREEN;
0x2682	0x480D    LDR	R0, [PC, #52]
0x2684	0x6800    LDR	R0, [R0, #0]
0x2686	0x2140    MOVS	R1, #64
0x2688	0x4001    ANDS	R1, R0
0x268A	0x0989    LSRS	R1, R1, #6
0x268C	0x2001    MOVS	R0, #1
0x268E	0x4048    EORS	R0, R1
0x2690	0xB2C3    UXTB	R3, R0
0x2692	0x4A09    LDR	R2, [PC, #36]
0x2694	0x6810    LDR	R0, [R2, #0]
0x2696	0x2101    MOVS	R1, #1
0x2698	0x4019    ANDS	R1, R3
0x269A	0xD002    BEQ	L__Int_SPI1256
0x269C	0x2140    MOVS	R1, #64
0x269E	0x4308    ORRS	R0, R1
0x26A0	0xE001    B	L__Int_SPI1255
L__Int_SPI1256:
0x26A2	0x2140    MOVS	R1, #64
0x26A4	0x4388    BICS	R0, R1
L__Int_SPI1255:
0x26A6	0x6010    STR	R0, [R2, #0]
;driverspi.c, 55 :: 		}
L_Int_SPI10:
;driverspi.c, 56 :: 		}
L_end_Int_SPI1:
0x26A8	0xBD00    POP	(R15)
0x26AA	0xBF00    NOP
0x26AC	0x30084001  	SPI1_SRbits+0
0x26B0	0x300C4001  	SPI1_DR+0
0x26B4	0x008E2000  	_ucSPI1ByteReceived+0
0x26B8	0x08145000  	GPIOC_ODRbits+0
; end of _Int_SPI1
_DMACh1_interrupt:
;driverspi.c, 63 :: 		void DMACh1_interrupt() iv IVT_INT_DMA_Channel1 ics ICS_AUTO {
0x2594	0xB500    PUSH	(R14)
;driverspi.c, 65 :: 		if ( DMA_ISRbits.TEIF3 ) {
0x2596	0x4831    LDR	R0, [PC, #196]
0x2598	0x6801    LDR	R1, [R0, #0]
0x259A	0x2008    MOVS	R0, #8
0x259C	0x4008    ANDS	R0, R1
0x259E	0x08C0    LSRS	R0, R0, #3
0x25A0	0x2800    CMP	R0, #0
0x25A2	0xD019    BEQ	L_DMACh1_interrupt1
;driverspi.c, 66 :: 		DMA_IFCRbits.CTEIF3 = 1;
0x25A4	0x4A2E    LDR	R2, [PC, #184]
0x25A6	0x6810    LDR	R0, [R2, #0]
0x25A8	0x2108    MOVS	R1, #8
0x25AA	0x4308    ORRS	R0, R1
0x25AC	0x6010    STR	R0, [R2, #0]
;driverspi.c, 67 :: 		while ( SPI1_SRbits.BSY );
L_DMACh1_interrupt2:
0x25AE	0x482D    LDR	R0, [PC, #180]
0x25B0	0x6801    LDR	R1, [R0, #0]
0x25B2	0x2080    MOVS	R0, #128
0x25B4	0x4008    ANDS	R0, R1
0x25B6	0x09C0    LSRS	R0, R0, #7
0x25B8	0x2800    CMP	R0, #0
0x25BA	0xD000    BEQ	L_DMACh1_interrupt3
0x25BC	0xE7F7    B	L_DMACh1_interrupt2
L_DMACh1_interrupt3:
;driverspi.c, 68 :: 		while ( !SPI1_SRbits.TXE );
L_DMACh1_interrupt4:
0x25BE	0x4829    LDR	R0, [PC, #164]
0x25C0	0x6801    LDR	R1, [R0, #0]
0x25C2	0x2002    MOVS	R0, #2
0x25C4	0x4008    ANDS	R0, R1
0x25C6	0x0840    LSRS	R0, R0, #1
0x25C8	0x2800    CMP	R0, #0
0x25CA	0xD100    BNE	L_DMACh1_interrupt5
0x25CC	0xE7F7    B	L_DMACh1_interrupt4
L_DMACh1_interrupt5:
;driverspi.c, 69 :: 		DMA_CCR1bits.EN = 0;
0x25CE	0x4A26    LDR	R2, [PC, #152]
0x25D0	0x6810    LDR	R0, [R2, #0]
0x25D2	0x2101    MOVS	R1, #1
0x25D4	0x4388    BICS	R0, R1
0x25D6	0x6010    STR	R0, [R2, #0]
;driverspi.c, 70 :: 		}
L_DMACh1_interrupt1:
;driverspi.c, 72 :: 		if ( DMA_ISRbits.TCIF1 ) {     // TRANSFER COMPLETE INTERRUPT FLAG = envio el frame completo
0x25D8	0x4820    LDR	R0, [PC, #128]
0x25DA	0x6801    LDR	R1, [R0, #0]
0x25DC	0x2002    MOVS	R0, #2
0x25DE	0x4008    ANDS	R0, R1
0x25E0	0x0840    LSRS	R0, R0, #1
0x25E2	0x2800    CMP	R0, #0
0x25E4	0xD019    BEQ	L_DMACh1_interrupt6
;driverspi.c, 73 :: 		DMA_IFCRbits.CGIF0 = 1;        // limpia TODOS LOS FLAGS DE DMA
0x25E6	0x4A1E    LDR	R2, [PC, #120]
0x25E8	0x6810    LDR	R0, [R2, #0]
0x25EA	0x2101    MOVS	R1, #1
0x25EC	0x4308    ORRS	R0, R1
0x25EE	0x6010    STR	R0, [R2, #0]
;driverspi.c, 74 :: 		while ( SPI1_SRbits.BSY );
L_DMACh1_interrupt7:
0x25F0	0x481C    LDR	R0, [PC, #112]
0x25F2	0x6801    LDR	R1, [R0, #0]
0x25F4	0x2080    MOVS	R0, #128
0x25F6	0x4008    ANDS	R0, R1
0x25F8	0x09C0    LSRS	R0, R0, #7
0x25FA	0x2800    CMP	R0, #0
0x25FC	0xD000    BEQ	L_DMACh1_interrupt8
0x25FE	0xE7F7    B	L_DMACh1_interrupt7
L_DMACh1_interrupt8:
;driverspi.c, 75 :: 		while ( !SPI1_SRbits.TXE );
L_DMACh1_interrupt9:
0x2600	0x4818    LDR	R0, [PC, #96]
0x2602	0x6801    LDR	R1, [R0, #0]
0x2604	0x2002    MOVS	R0, #2
0x2606	0x4008    ANDS	R0, R1
0x2608	0x0840    LSRS	R0, R0, #1
0x260A	0x2800    CMP	R0, #0
0x260C	0xD100    BNE	L_DMACh1_interrupt10
0x260E	0xE7F7    B	L_DMACh1_interrupt9
L_DMACh1_interrupt10:
;driverspi.c, 76 :: 		DMA_CCR1bits.EN = 0;
0x2610	0x4A15    LDR	R2, [PC, #84]
0x2612	0x6810    LDR	R0, [R2, #0]
0x2614	0x2101    MOVS	R1, #1
0x2616	0x4388    BICS	R0, R1
0x2618	0x6010    STR	R0, [R2, #0]
;driverspi.c, 77 :: 		}
L_DMACh1_interrupt6:
;driverspi.c, 79 :: 		if ( DMA_ISRbits.GIF0 ) {
0x261A	0x4810    LDR	R0, [PC, #64]
0x261C	0x6801    LDR	R1, [R0, #0]
0x261E	0x2001    MOVS	R0, #1
0x2620	0x4008    ANDS	R0, R1
0x2622	0x2800    CMP	R0, #0
0x2624	0xD019    BEQ	L_DMACh1_interrupt11
;driverspi.c, 80 :: 		DMA_IFCRbits.CGIF0 = 1;
0x2626	0x4A0E    LDR	R2, [PC, #56]
0x2628	0x6810    LDR	R0, [R2, #0]
0x262A	0x2101    MOVS	R1, #1
0x262C	0x4308    ORRS	R0, R1
0x262E	0x6010    STR	R0, [R2, #0]
;driverspi.c, 81 :: 		while ( SPI1_SRbits.BSY );
L_DMACh1_interrupt12:
0x2630	0x480C    LDR	R0, [PC, #48]
0x2632	0x6801    LDR	R1, [R0, #0]
0x2634	0x2080    MOVS	R0, #128
0x2636	0x4008    ANDS	R0, R1
0x2638	0x09C0    LSRS	R0, R0, #7
0x263A	0x2800    CMP	R0, #0
0x263C	0xD000    BEQ	L_DMACh1_interrupt13
0x263E	0xE7F7    B	L_DMACh1_interrupt12
L_DMACh1_interrupt13:
;driverspi.c, 82 :: 		while ( !SPI1_SRbits.TXE );
L_DMACh1_interrupt14:
0x2640	0x4808    LDR	R0, [PC, #32]
0x2642	0x6801    LDR	R1, [R0, #0]
0x2644	0x2002    MOVS	R0, #2
0x2646	0x4008    ANDS	R0, R1
0x2648	0x0840    LSRS	R0, R0, #1
0x264A	0x2800    CMP	R0, #0
0x264C	0xD100    BNE	L_DMACh1_interrupt15
0x264E	0xE7F7    B	L_DMACh1_interrupt14
L_DMACh1_interrupt15:
;driverspi.c, 83 :: 		DMA_CCR1bits.EN = 0;
0x2650	0x4A05    LDR	R2, [PC, #20]
0x2652	0x6810    LDR	R0, [R2, #0]
0x2654	0x2101    MOVS	R1, #1
0x2656	0x4388    BICS	R0, R1
0x2658	0x6010    STR	R0, [R2, #0]
;driverspi.c, 84 :: 		}
L_DMACh1_interrupt11:
;driverspi.c, 85 :: 		}
L_end_DMACh1_interrupt:
0x265A	0xBD00    POP	(R15)
0x265C	0x00004002  	DMA_ISRbits+0
0x2660	0x00044002  	DMA_IFCRbits+0
0x2664	0x30084001  	SPI1_SRbits+0
0x2668	0x00084002  	DMA_CCR1bits+0
; end of _DMACh1_interrupt
;DriverRF4463PROMain.c,0 :: ?ICS_RF_MODEM_MOD_TYPE_12_data [16]
0x2B2C	0x000C2011 ;?ICS_RF_MODEM_MOD_TYPE_12_data+0
0x2B30	0x00000000 ;?ICS_RF_MODEM_MOD_TYPE_12_data+4
0x2B34	0x00000000 ;?ICS_RF_MODEM_MOD_TYPE_12_data+8
0x2B38	0x00000000 ;?ICS_RF_MODEM_MOD_TYPE_12_data+12
; end of ?ICS_RF_MODEM_MOD_TYPE_12_data
;DriverRF4463PROMain.c,0 :: ?ICS_RF_MODEM_TX_RAMP_DELAY_8_data [12]
0x2B3C	0x18082011 ;?ICS_RF_MODEM_TX_RAMP_DELAY_8_data+0
0x2B40	0x00000000 ;?ICS_RF_MODEM_TX_RAMP_DELAY_8_data+4
0x2B44	0x00000000 ;?ICS_RF_MODEM_TX_RAMP_DELAY_8_data+8
; end of ?ICS_RF_MODEM_TX_RAMP_DELAY_8_data
;,0 :: _initBlock_2 [28]
; Containing: ?ICS_RF_MODEM_AFC_GEAR_7_data [13]
;             ?ICS_RF_MODEM_OOK_CNT1_11_data [15]
0x2B48	0x2C072011 ;_initBlock_2+0 : ?ICS_RF_MODEM_AFC_GEAR_7_data at 0x2B48
0x2B4C	0x00000000 ;_initBlock_2+4
0x2B50	0x00000000 ;_initBlock_2+8
0x2B54	0x0B201100 ;_initBlock_2+12 : ?ICS_RF_MODEM_OOK_CNT1_11_data at 0x2B55
0x2B58	0x00000042 ;_initBlock_2+16
0x2B5C	0x00000000 ;_initBlock_2+20
0x2B60	0x00000000 ;_initBlock_2+24
; end of _initBlock_2
;DriverRF4463PROMain.c,0 :: ?ICS_RF_MODEM_CHFLT_RX1_CHFLT_COE13_7_0_12_data [16]
0x2B64	0x000C2111 ;?ICS_RF_MODEM_CHFLT_RX1_CHFLT_COE13_7_0_12_data+0
0x2B68	0x00000000 ;?ICS_RF_MODEM_CHFLT_RX1_CHFLT_COE13_7_0_12_data+4
0x2B6C	0x00000000 ;?ICS_RF_MODEM_CHFLT_RX1_CHFLT_COE13_7_0_12_data+8
0x2B70	0x00000000 ;?ICS_RF_MODEM_CHFLT_RX1_CHFLT_COE13_7_0_12_data+12
; end of ?ICS_RF_MODEM_CHFLT_RX1_CHFLT_COE13_7_0_12_data
;DriverRF4463PROMain.c,0 :: ?ICS_RF_MODEM_CHFLT_RX1_CHFLT_COE1_7_0_12_data [16]
0x2B74	0x0C0C2111 ;?ICS_RF_MODEM_CHFLT_RX1_CHFLT_COE1_7_0_12_data+0
0x2B78	0x00000000 ;?ICS_RF_MODEM_CHFLT_RX1_CHFLT_COE1_7_0_12_data+4
0x2B7C	0x00000000 ;?ICS_RF_MODEM_CHFLT_RX1_CHFLT_COE1_7_0_12_data+8
0x2B80	0x00000000 ;?ICS_RF_MODEM_CHFLT_RX1_CHFLT_COE1_7_0_12_data+12
; end of ?ICS_RF_MODEM_CHFLT_RX1_CHFLT_COE1_7_0_12_data
;DriverRF4463PROMain.c,0 :: ?ICS_RF_MODEM_CHFLT_RX2_CHFLT_COE7_7_0_12_data [16]
0x2B84	0x180C2111 ;?ICS_RF_MODEM_CHFLT_RX2_CHFLT_COE7_7_0_12_data+0
0x2B88	0x00000000 ;?ICS_RF_MODEM_CHFLT_RX2_CHFLT_COE7_7_0_12_data+4
0x2B8C	0x00000000 ;?ICS_RF_MODEM_CHFLT_RX2_CHFLT_COE7_7_0_12_data+8
0x2B90	0x00000000 ;?ICS_RF_MODEM_CHFLT_RX2_CHFLT_COE7_7_0_12_data+12
; end of ?ICS_RF_MODEM_CHFLT_RX2_CHFLT_COE7_7_0_12_data
;,0 :: _initBlock_6 [26]
; Containing: ?ICS_RF_MODEM_AGC_WINDOW_SIZE_9_data [13]
;             ?ICS_RF_MODEM_BCR_OSR_1_9_data [13]
0x2B94	0x38092011 ;_initBlock_6+0 : ?ICS_RF_MODEM_AGC_WINDOW_SIZE_9_data at 0x2B94
0x2B98	0x00000000 ;_initBlock_6+4
0x2B9C	0x00000000 ;_initBlock_6+8
0x2BA0	0x09201100 ;_initBlock_6+12 : ?ICS_RF_MODEM_BCR_OSR_1_9_data at 0x2BA1
0x2BA4	0x00000022 ;_initBlock_6+16
0x2BA8	0x00000000 ;_initBlock_6+20
0x2BAC	0x0000 ;_initBlock_6+24
; end of _initBlock_6
;,0 :: _initBlock_7 [12]
; Containing: ?ICS_RF_SYNTH_PFDCP_CPFF_7_data [11]
;             ?ICSDriverRF4463PROMain_ucRF4463IRQ [1]
0x2BAE	0x00072311 ;_initBlock_7+0 : ?ICS_RF_SYNTH_PFDCP_CPFF_7_data at 0x2BAE
0x2BB2	0x00000000 ;_initBlock_7+4
0x2BB6	0x00000000 ;_initBlock_7+8 : ?ICSDriverRF4463PROMain_ucRF4463IRQ at 0x2BB9
; end of _initBlock_7
;,0 :: _initBlock_8 [1046]
; Containing: ?ICS_ucSPI1ByteReceived [1]
;             RF_MODEM_CHFLT_RX1_CHFLT_COE13_7_0_12_850 [132]
;             RF_MODEM_CHFLT_RX2_CHFLT_COE7_7_0_12_433 [132]
;             RF_MODEM_CHFLT_RX2_CHFLT_COE7_7_0_12_850 [132]
;             RF_MODEM_CHFLT_RX1_CHFLT_COE1_7_0_12_850 [132]
;             RF_MODEM_CHFLT_RX1_CHFLT_COE1_7_0_12_433 [132]
;             RF_MODEM_MOD_TYPE_12 [132]
;             RF_MODEM_CHFLT_RX1_CHFLT_COE13_7_0_12_433 [132]
;             RF_MODEM_OOK_CNT1_11_850 [121]
0x2BBA	0x30C4FF00 ;_initBlock_8+0 : ?ICS_ucSPI1ByteReceived at 0x2BBA : RF_MODEM_CHFLT_RX1_CHFLT_COE13_7_0_12_850 at 0x2BBB
0x2BBE	0xB8B5F57F ;_initBlock_8+4
0x2BC2	0x161705DE ;_initBlock_8+8
0x2BC6	0x30C4FF0C ;_initBlock_8+12
0x2BCA	0xB8B5F57F ;_initBlock_8+16
0x2BCE	0x161705DE ;_initBlock_8+20
0x2BD2	0x0FBAFF0C ;_initBlock_8+24
0x2BD6	0xC9A9CF51 ;_initBlock_8+28
0x2BDA	0x0F1E1BFC ;_initBlock_8+32
0x2BDE	0x30C4FF01 ;_initBlock_8+36
0x2BE2	0xB8B5F57F ;_initBlock_8+40
0x2BE6	0x161705DE ;_initBlock_8+44
0x2BEA	0x0FBAFF0C ;_initBlock_8+48
0x2BEE	0xC9A9CF51 ;_initBlock_8+52
0x2BF2	0x0F1E1BFC ;_initBlock_8+56
0x2BF6	0x30C4FF01 ;_initBlock_8+60
0x2BFA	0xB8B5F57F ;_initBlock_8+64
0x2BFE	0x161705DE ;_initBlock_8+68
0x2C02	0x1B647E0C ;_initBlock_8+72
0x2C06	0xDD0B58BA ;_initBlock_8+76
0x2C0A	0xF6E6D6CE ;_initBlock_8+80
0x2C0E	0x1B647E00 ;_initBlock_8+84
0x2C12	0xDD0B58BA ;_initBlock_8+88
0x2C16	0xF6E6D6CE ;_initBlock_8+92
0x2C1A	0x002B3900 ;_initBlock_8+96
0x2C1E	0x0C3F7FC3 ;_initBlock_8+100
0x2C22	0xE3DCDCEC ;_initBlock_8+104
0x2C26	0x2681A2ED ;_initBlock_8+108
0x2C2A	0xC8EE3FAF ;_initBlock_8+112
0x2C2E	0x02F2DBC7 ;_initBlock_8+116
0x2C32	0x30A1CC08 ;_initBlock_8+120
0x2C36	0xB9D121A0 ;_initBlock_8+124
0x2C3A	0x1205EAC9 ;_initBlock_8+128
0x2C3E	0x05DEB811 ;_initBlock_8+132 : RF_MODEM_CHFLT_RX2_CHFLT_COE7_7_0_12_433 at 0x2C3F
0x2C42	0x030C1617 ;_initBlock_8+136
0x2C46	0x00FF1500 ;_initBlock_8+140
0x2C4A	0x05DEB800 ;_initBlock_8+144
0x2C4E	0x030C1617 ;_initBlock_8+148
0x2C52	0x00FF1500 ;_initBlock_8+152
0x2C56	0xEAC9B900 ;_initBlock_8+156
0x2C5A	0x0A111205 ;_initBlock_8+160
0x2C5E	0x03FC1504 ;_initBlock_8+164
0x2C62	0x05DEB800 ;_initBlock_8+168
0x2C66	0x030C1617 ;_initBlock_8+172
0x2C6A	0x00FF1500 ;_initBlock_8+176
0x2C6E	0xEAC9B900 ;_initBlock_8+180
0x2C72	0x0A111205 ;_initBlock_8+184
0x2C76	0x03FC1504 ;_initBlock_8+188
0x2C7A	0xD6CEDD00 ;_initBlock_8+192
0x2C7E	0x0300F6E6 ;_initBlock_8+196
0x2C82	0x3FF01503 ;_initBlock_8+200
0x2C86	0xD6DBF400 ;_initBlock_8+204
0x2C8A	0xFEF7ECDF ;_initBlock_8+208
0x2C8E	0xFFF01501 ;_initBlock_8+212
0x2C92	0xD6DBF403 ;_initBlock_8+216
0x2C96	0xFEF7ECDF ;_initBlock_8+220
0x2C9A	0xFFF01501 ;_initBlock_8+224
0x2C9E	0xDCEC0C03 ;_initBlock_8+228
0x2CA2	0xF6EDE3DC ;_initBlock_8+232
0x2CA6	0xFFC015FD ;_initBlock_8+236
0x2CAA	0xDBC7C80F ;_initBlock_8+240
0x2CAE	0x070802F2 ;_initBlock_8+244
0x2CB2	0x0FFC1503 ;_initBlock_8+248
0x2CB6	0xEAC9B900 ;_initBlock_8+252
0x2CBA	0x0A111205 ;_initBlock_8+256
0x2CBE	0x03FC1504 ;_initBlock_8+260
0x2CC2	0x05DEB800 ;_initBlock_8+264 : RF_MODEM_CHFLT_RX2_CHFLT_COE7_7_0_12_850 at 0x2CC3
0x2CC6	0x030C1617 ;_initBlock_8+268
0x2CCA	0x00FF1500 ;_initBlock_8+272
0x2CCE	0x05DEB800 ;_initBlock_8+276
0x2CD2	0x030C1617 ;_initBlock_8+280
0x2CD6	0x00FF1500 ;_initBlock_8+284
0x2CDA	0x1BFCC900 ;_initBlock_8+288
0x2CDE	0xFC010F1E ;_initBlock_8+292
0x2CE2	0x00FF15FD ;_initBlock_8+296
0x2CE6	0x05DEB80F ;_initBlock_8+300
0x2CEA	0x030C1617 ;_initBlock_8+304
0x2CEE	0x00FF1500 ;_initBlock_8+308
0x2CF2	0x1BFCC900 ;_initBlock_8+312
0x2CF6	0xFC010F1E ;_initBlock_8+316
0x2CFA	0x00FF15FD ;_initBlock_8+320
0x2CFE	0x05DEB80F ;_initBlock_8+324
0x2D02	0x030C1617 ;_initBlock_8+328
0x2D06	0x00FF1500 ;_initBlock_8+332
0x2D0A	0xD6CEDD00 ;_initBlock_8+336
0x2D0E	0x0300F6E6 ;_initBlock_8+340
0x2D12	0x3FF01503 ;_initBlock_8+344
0x2D16	0x15030300 ;_initBlock_8+348
0x2D1A	0x7E003FF0 ;_initBlock_8+352
0x2D1E	0x58BA1B64 ;_initBlock_8+356
0x2D22	0xDCEC0C0B ;_initBlock_8+360
0x2D26	0xF6EDE3DC ;_initBlock_8+364
0x2D2A	0xFFC015FD ;_initBlock_8+368
0x2D2E	0xDBC7C80F ;_initBlock_8+372
0x2D32	0x070802F2 ;_initBlock_8+376
0x2D36	0x0FFC1503 ;_initBlock_8+380
0x2D3A	0xEAC9B900 ;_initBlock_8+384
0x2D3E	0x0A111205 ;_initBlock_8+388
0x2D42	0x03FC1504 ;_initBlock_8+392
0x2D46	0x15000300 ;_initBlock_8+396 : RF_MODEM_CHFLT_RX1_CHFLT_COE1_7_0_12_850 at 0x2D47
0x2D4A	0xFF0000FF ;_initBlock_8+400
0x2D4E	0xF57F30C4 ;_initBlock_8+404
0x2D52	0x150003B5 ;_initBlock_8+408
0x2D56	0xFF0000FF ;_initBlock_8+412
0x2D5A	0xF57F30C4 ;_initBlock_8+416
0x2D5E	0x15FDFCB5 ;_initBlock_8+420
0x2D62	0xFF0F00FF ;_initBlock_8+424
0x2D66	0xCF510FBA ;_initBlock_8+428
0x2D6A	0x150003A9 ;_initBlock_8+432
0x2D6E	0xFF0000FF ;_initBlock_8+436
0x2D72	0xF57F30C4 ;_initBlock_8+440
0x2D76	0x15FDFCB5 ;_initBlock_8+444
0x2D7A	0xFF0F00FF ;_initBlock_8+448
0x2D7E	0xCF510FBA ;_initBlock_8+452
0x2D82	0x150003A9 ;_initBlock_8+456
0x2D86	0xFF0000FF ;_initBlock_8+460
0x2D8A	0xF57F30C4 ;_initBlock_8+464
0x2D8E	0x150303B5 ;_initBlock_8+468
0x2D92	0x7E003FF0 ;_initBlock_8+472
0x2D96	0x58BA1B64 ;_initBlock_8+476
0x2D9A	0x15FDF60B ;_initBlock_8+480
0x2D9E	0x390FFFC0 ;_initBlock_8+484
0x2DA2	0x7FC3002B ;_initBlock_8+488
0x2DA6	0x1503073F ;_initBlock_8+492
0x2DAA	0xA2000FFC ;_initBlock_8+496
0x2DAE	0x3FAF2681 ;_initBlock_8+500
0x2DB2	0x15040AEE ;_initBlock_8+504
0x2DB6	0xCC0003FC ;_initBlock_8+508
0x2DBA	0x21A030A1 ;_initBlock_8+512
0x2DBE	0x000000D1 ;_initBlock_8+516
0x2DC2	0x00000000 ;_initBlock_8+520
0x2DC6	0x00000000 ;_initBlock_8+524
0x2DCA	0x15000300 ;_initBlock_8+528 : RF_MODEM_CHFLT_RX1_CHFLT_COE1_7_0_12_433 at 0x2DCB
0x2DCE	0xFF0000FF ;_initBlock_8+532
0x2DD2	0xF57F30C4 ;_initBlock_8+536
0x2DD6	0x150003B5 ;_initBlock_8+540
0x2DDA	0xFF0000FF ;_initBlock_8+544
0x2DDE	0xF57F30C4 ;_initBlock_8+548
0x2DE2	0x15040AB5 ;_initBlock_8+552
0x2DE6	0xCC0003FC ;_initBlock_8+556
0x2DEA	0x21A030A1 ;_initBlock_8+560
0x2DEE	0x150003D1 ;_initBlock_8+564
0x2DF2	0xFF0000FF ;_initBlock_8+568
0x2DF6	0xF57F30C4 ;_initBlock_8+572
0x2DFA	0x15040AB5 ;_initBlock_8+576
0x2DFE	0xCC0003FC ;_initBlock_8+580
0x2E02	0x21A030A1 ;_initBlock_8+584
0x2E06	0x150303D1 ;_initBlock_8+588
0x2E0A	0x7E003FF0 ;_initBlock_8+592
0x2E0E	0x58BA1B64 ;_initBlock_8+596
0x2E12	0x1501FE0B ;_initBlock_8+600
0x2E16	0x5B03FFF0 ;_initBlock_8+604
0x2E1A	0x6DC00F47 ;_initBlock_8+608
0x2E1E	0x1501FE25 ;_initBlock_8+612
0x2E22	0x5B03FFF0 ;_initBlock_8+616
0x2E26	0x6DC00F47 ;_initBlock_8+620
0x2E2A	0x15FDF625 ;_initBlock_8+624
0x2E2E	0x390FFFC0 ;_initBlock_8+628
0x2E32	0x7FC3002B ;_initBlock_8+632
0x2E36	0x1503073F ;_initBlock_8+636
0x2E3A	0xA2000FFC ;_initBlock_8+640
0x2E3E	0x3FAF2681 ;_initBlock_8+644
0x2E42	0x15040AEE ;_initBlock_8+648
0x2E46	0xCC0003FC ;_initBlock_8+652
0x2E4A	0x21A030A1 ;_initBlock_8+656
0x2E4E	0x070003D1 ;_initBlock_8+660 : RF_MODEM_MOD_TYPE_12 at 0x2E4F
0x2E52	0x04C01200 ;_initBlock_8+664
0x2E56	0x00C0C62D ;_initBlock_8+668
0x2E5A	0x07000300 ;_initBlock_8+672
0x2E5E	0x04802500 ;_initBlock_8+676
0x2E62	0x00C0C62D ;_initBlock_8+680
0x2E66	0x07000300 ;_initBlock_8+684
0x2E6A	0x04004B00 ;_initBlock_8+688
0x2E6E	0x00C0C62D ;_initBlock_8+692
0x2E72	0x07000300 ;_initBlock_8+696
0x2E76	0x04009600 ;_initBlock_8+700
0x2E7A	0x00C0C62D ;_initBlock_8+704
0x2E7E	0x07000300 ;_initBlock_8+708
0x2E82	0x04002C01 ;_initBlock_8+712
0x2E86	0x00C0C62D ;_initBlock_8+716
0x2E8A	0x07000301 ;_initBlock_8+720
0x2E8E	0x08002C01 ;_initBlock_8+724
0x2E92	0x00C0C62D ;_initBlock_8+728
0x2E96	0x07000301 ;_initBlock_8+732
0x2E9A	0x08005802 ;_initBlock_8+736
0x2E9E	0x00C0C62D ;_initBlock_8+740
0x2EA2	0x07000301 ;_initBlock_8+744
0x2EA6	0x08008403 ;_initBlock_8+748
0x2EAA	0x00C0C62D ;_initBlock_8+752
0x2EAE	0x07000301 ;_initBlock_8+756
0x2EB2	0x01001027 ;_initBlock_8+760
0x2EB6	0x0080C3C9 ;_initBlock_8+764
0x2EBA	0x07000301 ;_initBlock_8+768
0x2EBE	0x01404B4C ;_initBlock_8+772
0x2EC2	0x0080C3C9 ;_initBlock_8+776
0x2EC6	0x0700031B ;_initBlock_8+780
0x2ECA	0x04D00700 ;_initBlock_8+784
0x2ECE	0x00C0C62D ;_initBlock_8+788
0x2ED2	0x30C4FF00 ;_initBlock_8+792 : RF_MODEM_CHFLT_RX1_CHFLT_COE13_7_0_12_433 at 0x2ED3
0x2ED6	0xB8B5F57F ;_initBlock_8+796
0x2EDA	0x161705DE ;_initBlock_8+800
0x2EDE	0x30C4FF0C ;_initBlock_8+804
0x2EE2	0xB8B5F57F ;_initBlock_8+808
0x2EE6	0x161705DE ;_initBlock_8+812
0x2EEA	0x30A1CC0C ;_initBlock_8+816
0x2EEE	0xB9D121A0 ;_initBlock_8+820
0x2EF2	0x1205EAC9 ;_initBlock_8+824
0x2EF6	0x30C4FF11 ;_initBlock_8+828
0x2EFA	0xB8B5F57F ;_initBlock_8+832
0x2EFE	0x161705DE ;_initBlock_8+836
0x2F02	0x30A1CC0C ;_initBlock_8+840
0x2F06	0xB9D121A0 ;_initBlock_8+844
0x2F0A	0x1205EAC9 ;_initBlock_8+848
0x2F0E	0x1B647E11 ;_initBlock_8+852
0x2F12	0xDD0B58BA ;_initBlock_8+856
0x2F16	0xF6E6D6CE ;_initBlock_8+860
0x2F1A	0x0F475B00 ;_initBlock_8+864
0x2F1E	0xF4256DC0 ;_initBlock_8+868
0x2F22	0xECDFD6DB ;_initBlock_8+872
0x2F26	0x0F475BF7 ;_initBlock_8+876
0x2F2A	0xF4256DC0 ;_initBlock_8+880
0x2F2E	0xECDFD6DB ;_initBlock_8+884
0x2F32	0x002B39F7 ;_initBlock_8+888
0x2F36	0x0C3F7FC3 ;_initBlock_8+892
0x2F3A	0xE3DCDCEC ;_initBlock_8+896
0x2F3E	0x2681A2ED ;_initBlock_8+900
0x2F42	0xC8EE3FAF ;_initBlock_8+904
0x2F46	0x02F2DBC7 ;_initBlock_8+908
0x2F4A	0x30A1CC08 ;_initBlock_8+912
0x2F4E	0xB9D121A0 ;_initBlock_8+916
0x2F52	0x1205EAC9 ;_initBlock_8+920
0x2F56	0xD602A411 ;_initBlock_8+924 : RF_MODEM_OOK_CNT1_11_850 at 0x2F57
0x2F5A	0x019B0381 ;_initBlock_8+928
0x2F5E	0x020CFF80 ;_initBlock_8+932
0x2F62	0x83D602A4 ;_initBlock_8+936
0x2F66	0x8001E700 ;_initBlock_8+940
0x2F6A	0xA4020CFF ;_initBlock_8+944
0x2F6E	0x0083D602 ;_initBlock_8+948
0x2F72	0xFF8001E7 ;_initBlock_8+952
0x2F76	0x03A4020C ;_initBlock_8+956
0x2F7A	0x110103D6 ;_initBlock_8+960
0x2F7E	0x0CFF8001 ;_initBlock_8+964
0x2F82	0xD603A402 ;_initBlock_8+968
0x2F86	0x01550103 ;_initBlock_8+972
0x2F8A	0x020CFF80 ;_initBlock_8+976
0x2F8E	0x03D603A4 ;_initBlock_8+980
0x2F92	0x80010001 ;_initBlock_8+984
0x2F96	0xA4020CFF ;_initBlock_8+988
0x2F9A	0x0003D603 ;_initBlock_8+992
0x2F9E	0xFF800180 ;_initBlock_8+996
0x2FA2	0x03A4020C ;_initBlock_8+1000
0x2FA6	0x800003D6 ;_initBlock_8+1004
0x2FAA	0x0CFF8001 ;_initBlock_8+1008
0x2FAE	0xD603A402 ;_initBlock_8+1012
0x2FB2	0x01D50003 ;_initBlock_8+1016
0x2FB6	0x020CFF80 ;_initBlock_8+1020
0x2FBA	0x03D603A4 ;_initBlock_8+1024
0x2FBE	0x8001D500 ;_initBlock_8+1028
0x2FC2	0xA4020CFF ;_initBlock_8+1032
0x2FC6	0x0281D602 ;_initBlock_8+1036
0x2FCA	0xFF8001B4 ;_initBlock_8+1040
0x2FCE	0x020C ;_initBlock_8+1044
; end of _initBlock_8
;DriverRF4463PROMain.c,207 :: _RF_MODEM_OOK_CNT1_11_433 [121]
0x2FD0	0x83D602A4 ;_RF_MODEM_OOK_CNT1_11_433+0
0x2FD4	0x8001AD00 ;_RF_MODEM_OOK_CNT1_11_433+4
0x2FD8	0xA4000CFF ;_RF_MODEM_OOK_CNT1_11_433+8
0x2FDC	0x0083D602 ;_RF_MODEM_OOK_CNT1_11_433+12
0x2FE0	0xFF8001AD ;_RF_MODEM_OOK_CNT1_11_433+16
0x2FE4	0x03A4000C ;_RF_MODEM_OOK_CNT1_11_433+20
0x2FE8	0xCC0003D6 ;_RF_MODEM_OOK_CNT1_11_433+24
0x2FEC	0x0CFF8001 ;_RF_MODEM_OOK_CNT1_11_433+28
0x2FF0	0xD603A400 ;_RF_MODEM_OOK_CNT1_11_433+32
0x2FF4	0x01CC0003 ;_RF_MODEM_OOK_CNT1_11_433+36
0x2FF8	0x000CFF80 ;_RF_MODEM_OOK_CNT1_11_433+40
0x2FFC	0x03D603A4 ;_RF_MODEM_OOK_CNT1_11_433+44
0x3000	0x80010001 ;_RF_MODEM_OOK_CNT1_11_433+48
0x3004	0xA4000CFF ;_RF_MODEM_OOK_CNT1_11_433+52
0x3008	0x0003D603 ;_RF_MODEM_OOK_CNT1_11_433+56
0x300C	0xFF800180 ;_RF_MODEM_OOK_CNT1_11_433+60
0x3010	0x03A4000C ;_RF_MODEM_OOK_CNT1_11_433+64
0x3014	0x400003D6 ;_RF_MODEM_OOK_CNT1_11_433+68
0x3018	0x0CFF8001 ;_RF_MODEM_OOK_CNT1_11_433+72
0x301C	0xD603A400 ;_RF_MODEM_OOK_CNT1_11_433+76
0x3020	0x012B0003 ;_RF_MODEM_OOK_CNT1_11_433+80
0x3024	0x000CFF80 ;_RF_MODEM_OOK_CNT1_11_433+84
0x3028	0x03D603A4 ;_RF_MODEM_OOK_CNT1_11_433+88
0x302C	0x8001D500 ;_RF_MODEM_OOK_CNT1_11_433+92
0x3030	0xA4000CFF ;_RF_MODEM_OOK_CNT1_11_433+96
0x3034	0x0003D603 ;_RF_MODEM_OOK_CNT1_11_433+100
0x3038	0xFF8001D5 ;_RF_MODEM_OOK_CNT1_11_433+104
0x303C	0x02A4000C ;_RF_MODEM_OOK_CNT1_11_433+108
0x3040	0xB40281D6 ;_RF_MODEM_OOK_CNT1_11_433+112
0x3044	0x0CFF8001 ;_RF_MODEM_OOK_CNT1_11_433+116
0x3048	0x00 ;_RF_MODEM_OOK_CNT1_11_433+120
; end of _RF_MODEM_OOK_CNT1_11_433
;__Lib_GPIO_G0xx_Defs.c,417 :: __GPIO_MODULE_USART1_PA9_10 [108]
0x304C	0x00000109 ;__GPIO_MODULE_USART1_PA9_10+0
0x3050	0x0000010A ;__GPIO_MODULE_USART1_PA9_10+4
0x3054	0xFFFFFFFF ;__GPIO_MODULE_USART1_PA9_10+8
0x3058	0x00000000 ;__GPIO_MODULE_USART1_PA9_10+12
0x305C	0x00000000 ;__GPIO_MODULE_USART1_PA9_10+16
0x3060	0x00000000 ;__GPIO_MODULE_USART1_PA9_10+20
0x3064	0x00000000 ;__GPIO_MODULE_USART1_PA9_10+24
0x3068	0x00000000 ;__GPIO_MODULE_USART1_PA9_10+28
0x306C	0x00000000 ;__GPIO_MODULE_USART1_PA9_10+32
0x3070	0x00000000 ;__GPIO_MODULE_USART1_PA9_10+36
0x3074	0x00000000 ;__GPIO_MODULE_USART1_PA9_10+40
0x3078	0x00000000 ;__GPIO_MODULE_USART1_PA9_10+44
0x307C	0x00000000 ;__GPIO_MODULE_USART1_PA9_10+48
0x3080	0x00000818 ;__GPIO_MODULE_USART1_PA9_10+52
0x3084	0x00000818 ;__GPIO_MODULE_USART1_PA9_10+56
0x3088	0x00000000 ;__GPIO_MODULE_USART1_PA9_10+60
0x308C	0x00000000 ;__GPIO_MODULE_USART1_PA9_10+64
0x3090	0x00000000 ;__GPIO_MODULE_USART1_PA9_10+68
0x3094	0x00000000 ;__GPIO_MODULE_USART1_PA9_10+72
0x3098	0x00000000 ;__GPIO_MODULE_USART1_PA9_10+76
0x309C	0x00000000 ;__GPIO_MODULE_USART1_PA9_10+80
0x30A0	0x00000000 ;__GPIO_MODULE_USART1_PA9_10+84
0x30A4	0x00000000 ;__GPIO_MODULE_USART1_PA9_10+88
0x30A8	0x00000000 ;__GPIO_MODULE_USART1_PA9_10+92
0x30AC	0x00000000 ;__GPIO_MODULE_USART1_PA9_10+96
0x30B0	0x00000000 ;__GPIO_MODULE_USART1_PA9_10+100
0x30B4	0x00000000 ;__GPIO_MODULE_USART1_PA9_10+104
; end of __GPIO_MODULE_USART1_PA9_10
;,0 :: _initBlock_11 [198]
; Containing: RF_MODEM_BCR_OSR_1_9_850 [99]
;             RF_MODEM_AGC_WINDOW_SIZE_9_850 [99]
0x30B8	0xA7000D03 ;_initBlock_11+0 : RF_MODEM_BCR_OSR_1_9_850 at 0x30B8
0x30BC	0x025400C6 ;_initBlock_11+4
0x30C0	0x000D03C2 ;_initBlock_11+8
0x30C4	0x5400C6A7 ;_initBlock_11+12
0x30C8	0x8701C202 ;_initBlock_11+16
0x30CC	0x008B4F01 ;_initBlock_11+20
0x30D0	0x00C202A8 ;_initBlock_11+24
0x30D4	0x179F02C3 ;_initBlock_11+28
0x30D8	0x00029301 ;_initBlock_11+32
0x30DC	0x3E056200 ;_initBlock_11+36
0x30E0	0x0204052D ;_initBlock_11+40
0x30E4	0x07410000 ;_initBlock_11+44
0x30E8	0xFF0744DD ;_initBlock_11+48
0x30EC	0x41000002 ;_initBlock_11+52
0x30F0	0x0744DD07 ;_initBlock_11+56
0x30F4	0x000002FF ;_initBlock_11+60
0x30F8	0x44DD0741 ;_initBlock_11+64
0x30FC	0x0002FF07 ;_initBlock_11+68
0x3100	0x5E047500 ;_initBlock_11+72
0x3104	0x029A057B ;_initBlock_11+76
0x3108	0x083C0000 ;_initBlock_11+80
0x310C	0xFF078988 ;_initBlock_11+84
0x3110	0xAA030002 ;_initBlock_11+88
0x3114	0x00CF8B00 ;_initBlock_11+92
0x3118	0x11C20246 ;_initBlock_11+96 : RF_MODEM_AGC_WINDOW_SIZE_9_850 at 0x311B
0x311C	0x0200ABAB ;_initBlock_11+100
0x3120	0x2B00FFFF ;_initBlock_11+104
0x3124	0x00ABAB11 ;_initBlock_11+108
0x3128	0x00FFFF02 ;_initBlock_11+112
0x312C	0x5656112B ;_initBlock_11+116
0x3130	0x55D50200 ;_initBlock_11+120
0x3134	0x2B112A00 ;_initBlock_11+124
0x3138	0x6A02002B ;_initBlock_11+128
0x313C	0x112900AB ;_initBlock_11+132
0x3140	0x02001515 ;_initBlock_11+136
0x3144	0x2800AB42 ;_initBlock_11+140
0x3148	0x000E0E11 ;_initBlock_11+144
0x314C	0x00552102 ;_initBlock_11+148
0x3150	0x0E0E1128 ;_initBlock_11+152
0x3154	0xAB100200 ;_initBlock_11+156
0x3158	0x0E112800 ;_initBlock_11+160
0x315C	0x1002000E ;_initBlock_11+164
0x3160	0x222800AB ;_initBlock_11+168
0x3164	0x1A000D0D ;_initBlock_11+172
0x3168	0x28000032 ;_initBlock_11+176
0x316C	0x00070722 ;_initBlock_11+180
0x3170	0x009A191A ;_initBlock_11+184
0x3174	0xCDCD1127 ;_initBlock_11+188
0x3178	0x00301A00 ;_initBlock_11+192
0x317C	0x2B00 ;_initBlock_11+196
; end of _initBlock_11
;,0 :: _initBlock_12 [198]
; Containing: RF_MODEM_BCR_OSR_1_9_433 [99]
;             RF_MODEM_AGC_WINDOW_SIZE_9_433 [99]
0x317E	0xA7000D03 ;_initBlock_12+0 : RF_MODEM_BCR_OSR_1_9_433 at 0x317E
0x3182	0x025400C6 ;_initBlock_12+4
0x3186	0x018701C2 ;_initBlock_12+8
0x318A	0xA8008B4F ;_initBlock_12+12
0x318E	0xC300C202 ;_initBlock_12+16
0x3192	0x02179F02 ;_initBlock_12+20
0x3196	0x0000021A ;_initBlock_12+24
0x319A	0x2D3E0562 ;_initBlock_12+28
0x319E	0x0002FF07 ;_initBlock_12+32
0x31A2	0xDD074100 ;_initBlock_12+36
0x31A6	0x02FF0744 ;_initBlock_12+40
0x31AA	0x07410000 ;_initBlock_12+44
0x31AE	0xFF0744DD ;_initBlock_12+48
0x31B2	0x41000002 ;_initBlock_12+52
0x31B6	0x0744DD07 ;_initBlock_12+56
0x31BA	0x000002FF ;_initBlock_12+60
0x31BE	0x44DD0741 ;_initBlock_12+64
0x31C2	0x0002FF07 ;_initBlock_12+68
0x31C6	0x5E047500 ;_initBlock_12+72
0x31CA	0x029A057B ;_initBlock_12+76
0x31CE	0x083C0000 ;_initBlock_12+80
0x31D2	0xFF078988 ;_initBlock_12+84
0x31D6	0xAA030002 ;_initBlock_12+88
0x31DA	0x00CF8B00 ;_initBlock_12+92
0x31DE	0x11C20246 ;_initBlock_12+96 : RF_MODEM_AGC_WINDOW_SIZE_9_433 at 0x31E1
0x31E2	0x1A00ABAB ;_initBlock_12+100
0x31E6	0x2B000014 ;_initBlock_12+104
0x31EA	0x00565611 ;_initBlock_12+108
0x31EE	0x0000A01A ;_initBlock_12+112
0x31F2	0x2B2B112A ;_initBlock_12+116
0x31F6	0x00501A00 ;_initBlock_12+120
0x31FA	0x15112900 ;_initBlock_12+124
0x31FE	0x281A0015 ;_initBlock_12+128
0x3202	0x11280000 ;_initBlock_12+132
0x3206	0x1A000E0E ;_initBlock_12+136
0x320A	0x28005521 ;_initBlock_12+140
0x320E	0x000E0E11 ;_initBlock_12+144
0x3212	0x00AB101A ;_initBlock_12+148
0x3216	0x0E0E1128 ;_initBlock_12+152
0x321A	0x55081A00 ;_initBlock_12+156
0x321E	0x0E112800 ;_initBlock_12+160
0x3222	0x051A000E ;_initBlock_12+164
0x3226	0x2228008E ;_initBlock_12+168
0x322A	0x1A000D0D ;_initBlock_12+172
0x322E	0x28000032 ;_initBlock_12+176
0x3232	0x00070722 ;_initBlock_12+180
0x3236	0x009A191A ;_initBlock_12+184
0x323A	0xCDCD1127 ;_initBlock_12+188
0x323E	0x00301A00 ;_initBlock_12+192
0x3242	0x2B00 ;_initBlock_12+196
; end of _initBlock_12
;DriverRF4463PROMain.c,80 :: _RF_MODEM_TX_RAMP_DELAY_8_850 [88]
0x3244	0x03088001 ;_RF_MODEM_TX_RAMP_DELAY_8_850+0
0x3248	0x203200C0 ;_RF_MODEM_TX_RAMP_DELAY_8_850+4
0x324C	0x03088001 ;_RF_MODEM_TX_RAMP_DELAY_8_850+8
0x3250	0x203000C0 ;_RF_MODEM_TX_RAMP_DELAY_8_850+12
0x3254	0x03088001 ;_RF_MODEM_TX_RAMP_DELAY_8_850+16
0x3258	0x203000C0 ;_RF_MODEM_TX_RAMP_DELAY_8_850+20
0x325C	0x03080001 ;_RF_MODEM_TX_RAMP_DELAY_8_850+24
0x3260	0x203000C0 ;_RF_MODEM_TX_RAMP_DELAY_8_850+28
0x3264	0x03080001 ;_RF_MODEM_TX_RAMP_DELAY_8_850+32
0x3268	0x203000C0 ;_RF_MODEM_TX_RAMP_DELAY_8_850+36
0x326C	0x03080001 ;_RF_MODEM_TX_RAMP_DELAY_8_850+40
0x3270	0x102000C0 ;_RF_MODEM_TX_RAMP_DELAY_8_850+44
0x3274	0x03080001 ;_RF_MODEM_TX_RAMP_DELAY_8_850+48
0x3278	0x101000C0 ;_RF_MODEM_TX_RAMP_DELAY_8_850+52
0x327C	0x03080001 ;_RF_MODEM_TX_RAMP_DELAY_8_850+56
0x3280	0x201000C0 ;_RF_MODEM_TX_RAMP_DELAY_8_850+60
0x3284	0x03080001 ;_RF_MODEM_TX_RAMP_DELAY_8_850+64
0x3288	0x30000080 ;_RF_MODEM_TX_RAMP_DELAY_8_850+68
0x328C	0x03080001 ;_RF_MODEM_TX_RAMP_DELAY_8_850+72
0x3290	0x30000080 ;_RF_MODEM_TX_RAMP_DELAY_8_850+76
0x3294	0x03088001 ;_RF_MODEM_TX_RAMP_DELAY_8_850+80
0x3298	0x21720080 ;_RF_MODEM_TX_RAMP_DELAY_8_850+84
; end of _RF_MODEM_TX_RAMP_DELAY_8_850
;DriverRF4463PROMain.c,66 :: _RF_MODEM_TX_RAMP_DELAY_8_433 [88]
0x329C	0x03088001 ;_RF_MODEM_TX_RAMP_DELAY_8_433+0
0x32A0	0x20700080 ;_RF_MODEM_TX_RAMP_DELAY_8_433+4
0x32A4	0x03088001 ;_RF_MODEM_TX_RAMP_DELAY_8_433+8
0x32A8	0x20700080 ;_RF_MODEM_TX_RAMP_DELAY_8_433+12
0x32AC	0x03080001 ;_RF_MODEM_TX_RAMP_DELAY_8_433+16
0x32B0	0x20700080 ;_RF_MODEM_TX_RAMP_DELAY_8_433+20
0x32B4	0x03080001 ;_RF_MODEM_TX_RAMP_DELAY_8_433+24
0x32B8	0x20700080 ;_RF_MODEM_TX_RAMP_DELAY_8_433+28
0x32BC	0x03080001 ;_RF_MODEM_TX_RAMP_DELAY_8_433+32
0x32C0	0x10300080 ;_RF_MODEM_TX_RAMP_DELAY_8_433+36
0x32C4	0x03080001 ;_RF_MODEM_TX_RAMP_DELAY_8_433+40
0x32C8	0x10200080 ;_RF_MODEM_TX_RAMP_DELAY_8_433+44
0x32CC	0x03080001 ;_RF_MODEM_TX_RAMP_DELAY_8_433+48
0x32D0	0x10100080 ;_RF_MODEM_TX_RAMP_DELAY_8_433+52
0x32D4	0x03080001 ;_RF_MODEM_TX_RAMP_DELAY_8_433+56
0x32D8	0x20100080 ;_RF_MODEM_TX_RAMP_DELAY_8_433+60
0x32DC	0x03080001 ;_RF_MODEM_TX_RAMP_DELAY_8_433+64
0x32E0	0x30000080 ;_RF_MODEM_TX_RAMP_DELAY_8_433+68
0x32E4	0x03080001 ;_RF_MODEM_TX_RAMP_DELAY_8_433+72
0x32E8	0x30000080 ;_RF_MODEM_TX_RAMP_DELAY_8_433+76
0x32EC	0x03088001 ;_RF_MODEM_TX_RAMP_DELAY_8_433+80
0x32F0	0x21720080 ;_RF_MODEM_TX_RAMP_DELAY_8_433+84
; end of _RF_MODEM_TX_RAMP_DELAY_8_433
;,0 :: _initBlock_15 [154]
; Containing: RF_SYNTH_PFDCP_CPFF_7 [77]
;             RF_MODEM_AFC_GEAR_7_433 [77]
0x32F4	0x040B0E2C ;_initBlock_15+0 : RF_SYNTH_PFDCP_CPFF_7 at 0x32F4
0x32F8	0x2C03730C ;_initBlock_15+4
0x32FC	0x0C040B0E ;_initBlock_15+8
0x3300	0x0E2C0373 ;_initBlock_15+12
0x3304	0x730C040B ;_initBlock_15+16
0x3308	0x0B0E2C03 ;_initBlock_15+20
0x330C	0x03730C04 ;_initBlock_15+24
0x3310	0x040B0E2C ;_initBlock_15+28
0x3314	0x2C03730C ;_initBlock_15+32
0x3318	0x0C040B0E ;_initBlock_15+36
0x331C	0x04340373 ;_initBlock_15+40
0x3320	0x7007040B ;_initBlock_15+44
0x3324	0x0B043403 ;_initBlock_15+48
0x3328	0x03700704 ;_initBlock_15+52
0x332C	0x050B0501 ;_initBlock_15+56
0x3330	0x01030002 ;_initBlock_15+60
0x3334	0x02050B05 ;_initBlock_15+64
0x3338	0x0E2C0300 ;_initBlock_15+68
0x333C	0x730C040B ;_initBlock_15+72
0x3340	0x80360403 ;_initBlock_15+76 : RF_MODEM_AFC_GEAR_7_433 at 0x3341
0x3344	0x80AF3003 ;_initBlock_15+80
0x3348	0x07803604 ;_initBlock_15+84
0x334C	0x0080DD14 ;_initBlock_15+88
0x3350	0x042A8012 ;_initBlock_15+92
0x3354	0x1200A03A ;_initBlock_15+96
0x3358	0x5A025480 ;_initBlock_15+100
0x335C	0x801200A0 ;_initBlock_15+104
0x3360	0xE06801A8 ;_initBlock_15+108
0x3364	0x50811200 ;_initBlock_15+112
0x3368	0x00E02001 ;_initBlock_15+116
0x336C	0x019F8212 ;_initBlock_15+120
0x3370	0x2300E003 ;_initBlock_15+124
0x3374	0x7700DD87 ;_initBlock_15+128
0x3378	0x8F2300E0 ;_initBlock_15+132
0x337C	0xE0C900FF ;_initBlock_15+136
0x3380	0xFF8F2300 ;_initBlock_15+140
0x3384	0x04E02301 ;_initBlock_15+144
0x3388	0x50018036 ;_initBlock_15+148
0x338C	0x8069 ;_initBlock_15+152
; end of _initBlock_15
;DriverRF4463PROMain.c,149 :: _RF_MODEM_AFC_GEAR_7_850 [77]
0x338E	0x01803604 ;_RF_MODEM_AFC_GEAR_7_850+0
0x3392	0x04803052 ;_RF_MODEM_AFC_GEAR_7_850+4
0x3396	0x30038036 ;_RF_MODEM_AFC_GEAR_7_850+8
0x339A	0x3604807F ;_RF_MODEM_AFC_GEAR_7_850+12
0x339E	0x10170780 ;_RF_MODEM_AFC_GEAR_7_850+16
0x33A2	0x80120080 ;_RF_MODEM_AFC_GEAR_7_850+20
0x33A6	0xA0B1042A ;_RF_MODEM_AFC_GEAR_7_850+24
0x33AA	0x54801200 ;_RF_MODEM_AFC_GEAR_7_850+28
0x33AE	0x00A09A02 ;_RF_MODEM_AFC_GEAR_7_850+32
0x33B2	0x01A88012 ;_RF_MODEM_AFC_GEAR_7_850+36
0x33B6	0x1200A08F ;_RF_MODEM_AFC_GEAR_7_850+40
0x33BA	0x1F015081 ;_RF_MODEM_AFC_GEAR_7_850+44
0x33BE	0x832300A0 ;_RF_MODEM_AFC_GEAR_7_850+48
0x33C2	0xA08400EF ;_RF_MODEM_AFC_GEAR_7_850+52
0x33C6	0xFF8F2300 ;_RF_MODEM_AFC_GEAR_7_850+56
0x33CA	0x00E0C900 ;_RF_MODEM_AFC_GEAR_7_850+60
0x33CE	0x01FF8F23 ;_RF_MODEM_AFC_GEAR_7_850+64
0x33D2	0x3604E023 ;_RF_MODEM_AFC_GEAR_7_850+68
0x33D6	0x69500180 ;_RF_MODEM_AFC_GEAR_7_850+72
0x33DA	0x80 ;_RF_MODEM_AFC_GEAR_7_850+76
; end of _RF_MODEM_AFC_GEAR_7_850
;DriverRF4463PROMain.c,0 :: ?ICS?lstr3_DriverRF4463PROMain [31]
0x33DC	0x5953205B ;?ICS?lstr3_DriverRF4463PROMain+0
0x33E0	0x54532053 ;?ICS?lstr3_DriverRF4463PROMain+4
0x33E4	0x4732334D ;?ICS?lstr3_DriverRF4463PROMain+8
0x33E8	0x46525D20 ;?ICS?lstr3_DriverRF4463PROMain+12
0x33EC	0x64615220 ;?ICS?lstr3_DriverRF4463PROMain+16
0x33F0	0x72206F69 ;?ICS?lstr3_DriverRF4463PROMain+20
0x33F4	0x79646165 ;?ICS?lstr3_DriverRF4463PROMain+24
0x33F8	0x000A0D ;?ICS?lstr3_DriverRF4463PROMain+28
; end of ?ICS?lstr3_DriverRF4463PROMain
;DriverRF4463PROMain.c,0 :: ?ICS?lstr4_DriverRF4463PROMain [3]
0x33FC	0x000A0D ;?ICS?lstr4_DriverRF4463PROMain+0
; end of ?ICS?lstr4_DriverRF4463PROMain
;DriverRF4463PROMain.c,0 :: ?ICS?lstr5_DriverRF4463PROMain [15]
0x3400	0x5243205B ;?ICS?lstr5_DriverRF4463PROMain+0
0x3404	0x205D2043 ;?ICS?lstr5_DriverRF4463PROMain+4
0x3408	0x6C696146 ;?ICS?lstr5_DriverRF4463PROMain+8
0x340C	0x000A0D ;?ICS?lstr5_DriverRF4463PROMain+12
; end of ?ICS?lstr5_DriverRF4463PROMain
;,0 :: _initBlock_20 [55]
; Containing: ?ICS?lstr1_DriverRF4463PROMain [19]
;             tx_test_aa_data [14]
;             tx_ph_data [14]
;             RF_FRR_CTL_A_MODE_4_data [8]
0x3410	0x4155205B ;_initBlock_20+0 : ?ICS?lstr1_DriverRF4463PROMain at 0x3410
0x3414	0x20315452 ;_initBlock_20+4
0x3418	0x5854205D ;_initBlock_20+8
0x341C	0x544E4920 ;_initBlock_20+12
0x3420	0xAA000A0D ;_initBlock_20+16 : tx_test_aa_data at 0x3423
0x3424	0xAAAAAAAA ;_initBlock_20+20
0x3428	0xAAAAAAAA ;_initBlock_20+24
0x342C	0xAAAAAAAA ;_initBlock_20+28
0x3430	0x777773AA ;_initBlock_20+32 : tx_ph_data at 0x3431
0x3434	0x43424178 ;_initBlock_20+36
0x3438	0x47464544 ;_initBlock_20+40
0x343C	0x116D4948 ;_initBlock_20+44 : RF_FRR_CTL_A_MODE_4_data at 0x343F
0x3440	0x00000402 ;_initBlock_20+48
0x3444	0x000000 ;_initBlock_20+52
; end of _initBlock_20
;DriverRF4463PROMain.c,0 :: ?ICS_tx_cnt [4]
0x3448	0x00000000 ;?ICS_tx_cnt+0
; end of ?ICS_tx_cnt
;DriverRF4463PROMain.c,0 :: ?ICS_rx_cnt [4]
0x344C	0x00000000 ;?ICS_rx_cnt+0
; end of ?ICS_rx_cnt
;__Lib_System_G0xx.c,467 :: __Lib_System_G0xx_AHBPrescTable [8]
0x3450	0x08040201 ;__Lib_System_G0xx_AHBPrescTable+0
0x3454	0x00804020 ;__Lib_System_G0xx_AHBPrescTable+4
; end of __Lib_System_G0xx_AHBPrescTable
;,0 :: _initBlock_24 [12]
; Containing: RF_POWER_UP_data [7]
;             RF_MODEM_AGC_CONTROL_1_data [5]
0x3458	0x01000102 ;_initBlock_24+0 : RF_POWER_UP_data at 0x3458
0x345C	0x1180C3C9 ;_initBlock_24+4 : RF_MODEM_AGC_CONTROL_1_data at 0x345F
0x3460	0xE2350120 ;_initBlock_24+8
; end of _initBlock_24
;__Lib_System_G0xx.c,468 :: __Lib_System_G0xx_APBPrescTable [4]
0x3464	0x10080402 ;__Lib_System_G0xx_APBPrescTable+0
; end of __Lib_System_G0xx_APBPrescTable
Symbol List:
//** Routines locations **
//ADDRESS    SIZE    PROCEDURE
//----------------------------------------------
0x00C0      [12]    _Get_Fosc_kHz
0x00CC      [68]    __Div_32x32_U
0x0110     [172]    __Lib_GPIO_G0xx_GPIO_Config_Pin_Alternate_Function
0x01BC     [232]    _vRF4463SpiBufferTX
0x02A4     [168]    _RCC_GetClocksFrequency
0x034C      [52]    _ucRf4463SPIByte
0x0380      [68]    _GPIO_Alternate_Function_Enable
0x03C4     [100]    __Lib_UART_G0xx_1234_get_usart_clock
0x0428      [40]    __Lib_UART_G0xx_1234_UARTx_Write
0x0450     [108]    _GPIO_Clk_Enable
0x04BC      [68]    _check_cts
0x0500      [78]    _vRF4463EnableRxInterrupt
0x0550      [86]    _vRF4463RxStart
0x05A8     [100]    _vRF4463RxStartTest
0x060C     [520]    __Lib_UART_G0xx_1234_UARTx_Init_Advanced
0x0814     [176]    _spi_write_fifo
0x08C4      [62]    _vRF4463TxStart
0x0904     [176]    _vRF4463GPIO_SET
0x09B4     [568]    _rf_init_freq
0x0BEC      [60]    _NVIC_IntEnable
0x0C28     [104]    _spi_write
0x0C90      [32]    _UART1_Init_Advanced
0x0CB0     [724]    _GPIO_Config
0x0F84     [176]    _spi_read
0x1034      [70]    _vRF4463EnableTxInterrupt
0x107C      [52]    _vRF4463RxInit
0x10B0      [42]    __Lib_UART_G0xx_1234_UARTx_Write_Text
0x10DC      [38]    _vRF4463FifoReset
0x1104     [280]    _vRF4463TxData
0x121C       [6]    _vUSART1Start_TX
0x1224      [92]    _vRF4463TxCont
0x1280     [272]    __Lib_System_G0xx_set_core_latency
0x1390     [168]    _is_clock_stable
0x1438     [124]    __Lib_System_G0xx_SystemClockSetDefault
0x14B4      [12]    _GPIO_Digital_Input
0x14C0      [88]    _InitTimer2
0x1518      [84]    _vUSARTConfigUSART1
0x156C      [18]    ___CC2DW
0x1580      [42]    ___FillZeros
0x15AC      [16]    _GPIO_Digital_Output
0x15BC     [728]    _vSPI1Init
0x1894      [44]    _vRF4463PartInfo
0x18C0      [16]    _UART1_Write_Text
0x18D0     [124]    _spi_read_fifo
0x194C    [2824]    _vRF4463Init
0x2454     [160]    _VRF4463SDNReset
0x24F4      [68]    _vRF4463ClearInterrupts
0x2538      [48]    _vRF4463ISR
0x2568      [44]    _Timer2_interrupt
0x2594     [216]    _DMACh1_interrupt
0x266C      [80]    _Int_SPI1
0x26BC      [56]    _vUARTISR
0x26F4     [888]    _main
0x2A6C     [164]    __Lib_System_G0xx_InitialSetUpRCCRCC2
0x2B10       [6]    ___GenExcept
0x2B18      [20]    __Lib_System_G0xx_InitialSetUpFosc
//** Variables locations ** 
//ADDRESS    SIZE    VARIABLE
//----------------------------------------------
0x20000000      [16]    _RF_MODEM_MOD_TYPE_12_data
0x20000010      [12]    _RF_MODEM_TX_RAMP_DELAY_8_data
0x2000001C      [13]    _RF_MODEM_AFC_GEAR_7_data
0x20000029      [15]    _RF_MODEM_OOK_CNT1_11_data
0x20000038      [16]    _RF_MODEM_CHFLT_RX1_CHFLT_COE13_7_0_12_data
0x20000048      [16]    _RF_MODEM_CHFLT_RX1_CHFLT_COE1_7_0_12_data
0x20000058      [16]    _RF_MODEM_CHFLT_RX2_CHFLT_COE7_7_0_12_data
0x20000068      [13]    _RF_MODEM_AGC_WINDOW_SIZE_9_data
0x20000075      [13]    _RF_MODEM_BCR_OSR_1_9_data
0x20000082      [11]    _RF_SYNTH_PFDCP_CPFF_7_data
0x2000008D       [1]    DriverRF4463PROMain_ucRF4463IRQ
0x2000008E       [1]    _ucSPI1ByteReceived
0x2000008F       [1]    _freq3
0x20000090       [4]    _tx_cnt
0x20000094       [4]    _rx_cnt
0x20000098       [1]    _freq2
0x20000099       [1]    _freq1
0x2000009A      [20]    _spi_read_buf
0x200000AE      [25]    _rx_buf
0x200000C7       [1]    _rate
0x200000C8       [1]    _mode
0x200000C9       [1]    _power
0x200000CA       [2]    _rf_timeout
0x200000CC       [1]    _Flag
0x200000CD       [1]    _reset_mode
0x200000D0       [4]    _ulClk
0x200000D4       [4]    ___System_CLOCK_IN_KHZ
0x200000D8       [4]    _UART_Wr_Ptr
0x200000DC       [4]    _UART_Rd_Ptr
0x200000E0       [4]    _UART_Rdy_Ptr
0x200000E4       [4]    _UART_Tx_Idle_Ptr
//** Constants locations ** 
//ADDRESS    SIZE    CONSTANT
//----------------------------------------------
0x2B2C      [16]    ?ICS_RF_MODEM_MOD_TYPE_12_data
0x2B3C      [12]    ?ICS_RF_MODEM_TX_RAMP_DELAY_8_data
0x2B48      [13]    ?ICS_RF_MODEM_AFC_GEAR_7_data
0x2B55      [15]    ?ICS_RF_MODEM_OOK_CNT1_11_data
0x2B64      [16]    ?ICS_RF_MODEM_CHFLT_RX1_CHFLT_COE13_7_0_12_data
0x2B74      [16]    ?ICS_RF_MODEM_CHFLT_RX1_CHFLT_COE1_7_0_12_data
0x2B84      [16]    ?ICS_RF_MODEM_CHFLT_RX2_CHFLT_COE7_7_0_12_data
0x2B94      [13]    ?ICS_RF_MODEM_AGC_WINDOW_SIZE_9_data
0x2BA1      [13]    ?ICS_RF_MODEM_BCR_OSR_1_9_data
0x2BAE      [11]    ?ICS_RF_SYNTH_PFDCP_CPFF_7_data
0x2BB9       [1]    ?ICSDriverRF4463PROMain_ucRF4463IRQ
0x2BBA       [1]    ?ICS_ucSPI1ByteReceived
0x2BBB     [132]    _RF_MODEM_CHFLT_RX1_CHFLT_COE13_7_0_12_850
0x2C3F     [132]    _RF_MODEM_CHFLT_RX2_CHFLT_COE7_7_0_12_433
0x2CC3     [132]    _RF_MODEM_CHFLT_RX2_CHFLT_COE7_7_0_12_850
0x2D47     [132]    _RF_MODEM_CHFLT_RX1_CHFLT_COE1_7_0_12_850
0x2DCB     [132]    _RF_MODEM_CHFLT_RX1_CHFLT_COE1_7_0_12_433
0x2E4F     [132]    _RF_MODEM_MOD_TYPE_12
0x2ED3     [132]    _RF_MODEM_CHFLT_RX1_CHFLT_COE13_7_0_12_433
0x2F57     [121]    _RF_MODEM_OOK_CNT1_11_850
0x2FD0     [121]    _RF_MODEM_OOK_CNT1_11_433
0x304C     [108]    __GPIO_MODULE_USART1_PA9_10
0x30B8      [99]    _RF_MODEM_BCR_OSR_1_9_850
0x311B      [99]    _RF_MODEM_AGC_WINDOW_SIZE_9_850
0x317E      [99]    _RF_MODEM_BCR_OSR_1_9_433
0x31E1      [99]    _RF_MODEM_AGC_WINDOW_SIZE_9_433
0x3244      [88]    _RF_MODEM_TX_RAMP_DELAY_8_850
0x329C      [88]    _RF_MODEM_TX_RAMP_DELAY_8_433
0x32F4      [77]    _RF_SYNTH_PFDCP_CPFF_7
0x3341      [77]    _RF_MODEM_AFC_GEAR_7_433
0x338E      [77]    _RF_MODEM_AFC_GEAR_7_850
0x33DC      [31]    ?ICS?lstr3_DriverRF4463PROMain
0x33FC       [3]    ?ICS?lstr4_DriverRF4463PROMain
0x3400      [15]    ?ICS?lstr5_DriverRF4463PROMain
0x3410      [19]    ?ICS?lstr1_DriverRF4463PROMain
0x3423      [14]    _tx_test_aa_data
0x3431      [14]    _tx_ph_data
0x343F       [8]    _RF_FRR_CTL_A_MODE_4_data
0x3448       [4]    ?ICS_tx_cnt
0x344C       [4]    ?ICS_rx_cnt
0x3450       [8]    __Lib_System_G0xx_AHBPrescTable
0x3458       [7]    _RF_POWER_UP_data
0x345F       [5]    _RF_MODEM_AGC_CONTROL_1_data
0x3464       [4]    __Lib_System_G0xx_APBPrescTable
