#line 1 "C:/Users/Crow/Desktop/Lab-01/RF4463PRO.c"
#line 1 "c:/users/public/documents/mikroelektronika/mikroc pro for arm/include/built_in.h"
#line 1 "c:/users/public/documents/mikroelektronika/mikroc pro for arm/include/stdint.h"





typedef signed char int8_t;
typedef signed int int16_t;
typedef signed long int int32_t;
typedef signed long long int64_t;


typedef unsigned char uint8_t;
typedef unsigned int uint16_t;
typedef unsigned long int uint32_t;
typedef unsigned long long uint64_t;


typedef signed char int_least8_t;
typedef signed int int_least16_t;
typedef signed long int int_least32_t;
typedef signed long long int_least64_t;


typedef unsigned char uint_least8_t;
typedef unsigned int uint_least16_t;
typedef unsigned long int uint_least32_t;
typedef unsigned long long uint_least64_t;



typedef signed long int int_fast8_t;
typedef signed long int int_fast16_t;
typedef signed long int int_fast32_t;
typedef signed long long int_fast64_t;


typedef unsigned long int uint_fast8_t;
typedef unsigned long int uint_fast16_t;
typedef unsigned long int uint_fast32_t;
typedef unsigned long long uint_fast64_t;


typedef signed long int intptr_t;
typedef unsigned long int uintptr_t;


typedef signed long long intmax_t;
typedef unsigned long long uintmax_t;
#line 1 "c:/users/public/documents/mikroelektronika/mikroc pro for arm/include/string.h"





void * memchr(void *p, char n, unsigned int v);
int memcmp(void *s1, void *s2, int n);
void * memcpy(void * d1, void * s1, int n);
void * memmove(void * to, void * from, int n);
void * memset(void * p1, char character, int n);
char * strcat(char * to, char * from);
char * strchr(char * ptr, char chr);
int strcmp(char * s1, char * s2);
char * strcpy(char * to, char * from);
int strlen(char * s);
char * strncat(char * to, char * from, int size);
char * strncpy(char * to, char * from, int size);
int strspn(char * str1, char * str2);
char strcspn(char * s1, char * s2);
int strncmp(char * s1, char * s2, char len);
char * strpbrk(char * s1, char * s2);
char * strrchr(char *ptr, char chr);
char * strstr(char * s1, char * s2);
char * strtok(char * s1, char * s2);
#line 1 "c:/users/public/documents/mikroelektronika/mikroc pro for arm/include/stdlib.h"







 typedef struct divstruct {
 int quot;
 int rem;
 } div_t;

 typedef struct ldivstruct {
 long quot;
 long rem;
 } ldiv_t;

 typedef struct uldivstruct {
 unsigned long quot;
 unsigned long rem;
 } uldiv_t;

int abs(int a);
float atof(char * s);
int atoi(char * s);
long atol(char * s);
div_t div(int number, int denom);
ldiv_t ldiv(long number, long denom);
uldiv_t uldiv(unsigned long number, unsigned long denom);
long labs(long x);
long int max(long int a, long int b);
long int min(long int a, long int b);
void srand(unsigned x);
int rand();
int xtoi(char * s);
#line 1 "c:/users/public/documents/mikroelektronika/mikroc pro for arm/include/stdio.h"
#line 1 "c:/users/public/documents/mikroelektronika/mikroc pro for arm/include/stdbool.h"



 typedef char _Bool;
#line 1 "c:/users/crow/desktop/lab-01/radio_config_si4463.h"
#line 12 "C:/Users/Crow/Desktop/Lab-01/RF4463PRO.c"
typedef unsigned char U8;
typedef unsigned int U16;
typedef unsigned long U32;
typedef char S8;
typedef int S16;
typedef long S32;
#line 122 "C:/Users/Crow/Desktop/Lab-01/RF4463PRO.c"
 float vMin [7][6] = {
 3.00, 3.00, 3.00, 0.00, 0.00, 0.00,
 3.50, 3.00, 11.00, 0.00, 0.00, 0.00,
 3.00, 3.00, 4.00, 0.00, 0.00, 0.00,
 3.40, 3.10, 17.00, 4.80, 0.00, 0.00,
 3.00, 3.00, 4.00, 0.00, 0.00, 0.00,
 3.40, 9.00, 3.00, 0.00, 0.00, 0.00,
 4.00, 3.00, 3.00, 3.00, 3.00, 3.00

 };

const unsigned char RF_MODEM_MOD_TYPE_12[11][12] = {
 0x03, 0x00, 0x07, 0x00, 0x12, 0xC0, 0x04, 0x2D, 0xC6, 0xC0, 0x00, 0x00,
 0x03, 0x00, 0x07, 0x00, 0x25, 0x80, 0x04, 0x2D, 0xC6, 0xC0, 0x00, 0x00,
 0x03, 0x00, 0x07, 0x00, 0x4B, 0x00, 0x04, 0x2D, 0xC6, 0xC0, 0x00, 0x00,
 0x03, 0x00, 0x07, 0x00, 0x96, 0x00, 0x04, 0x2D, 0xC6, 0xC0, 0x00, 0x00,
 0x03, 0x00, 0x07, 0x01, 0x2C, 0x00, 0x04, 0x2D, 0xC6, 0xC0, 0x00, 0x01,
 0x03, 0x00, 0x07, 0x01, 0x2C, 0x00, 0x08, 0x2D, 0xC6, 0xC0, 0x00, 0x01,
 0x03, 0x00, 0x07, 0x02, 0x58, 0x00, 0x08, 0x2D, 0xC6, 0xC0, 0x00, 0x01,
 0x03, 0x00, 0x07, 0x03, 0x84, 0x00, 0x08, 0x2D, 0xC6, 0xC0, 0x00, 0x01,
 0x03, 0x00, 0x07, 0x27, 0x10, 0x00, 0x01, 0xC9, 0xC3, 0x80, 0x00, 0x01,
 0x03, 0x00, 0x07, 0x4C, 0x4B, 0x40, 0x01, 0xC9, 0xC3, 0x80, 0x00, 0x1b,
 0x03, 0x00, 0x07, 0x00, 0x07, 0xD0, 0x04, 0x2D, 0xC6, 0xC0, 0x00, 0x00
};

const unsigned char RF_MODEM_TX_RAMP_DELAY_8_433[11][8]=
{
 0x01, 0x80, 0x08, 0x03, 0x80, 0x00, 0x70, 0x20,
 0x01, 0x80, 0x08, 0x03, 0x80, 0x00, 0x70, 0x20,
 0x01, 0x00, 0x08, 0x03, 0x80, 0x00, 0x70, 0x20,
 0x01, 0x00, 0x08, 0x03, 0x80, 0x00, 0x70, 0x20,
 0x01, 0x00, 0x08, 0x03, 0x80, 0x00, 0x30, 0x10,
 0x01, 0x00, 0x08, 0x03, 0x80, 0x00, 0x20, 0x10,
 0x01, 0x00, 0x08, 0x03, 0x80, 0x00, 0x10, 0x10,
 0x01, 0x00, 0x08, 0x03, 0x80, 0x00, 0x10, 0x20,
 0x01, 0x00, 0x08, 0x03, 0x80, 0x00, 0x00, 0x30,
 0x01, 0x00, 0x08, 0x03, 0x80, 0x00, 0x00, 0x30,
 0x01, 0x80, 0x08, 0x03, 0x80, 0x00, 0x72, 0x21
};

const unsigned char RF_MODEM_TX_RAMP_DELAY_8_850[11][8]=
{

 0x01, 0x80, 0x08, 0x03, 0xC0, 0x00, 0x32, 0x20,

 0x01, 0x80, 0x08, 0x03, 0xC0, 0x00, 0x30, 0x20,

 0x01, 0x80, 0x08, 0x03, 0xC0, 0x00, 0x30, 0x20,

 0x01, 0x00, 0x08, 0x03, 0xC0, 0x00, 0x30, 0x20,

 0x01, 0x00, 0x08, 0x03, 0xC0, 0x00, 0x30, 0x20,

 0x01, 0x00, 0x08, 0x03, 0xC0, 0x00, 0x20, 0x10,

 0x01, 0x00, 0x08, 0x03, 0xC0, 0x00, 0x10, 0x10,

 0x01, 0x00, 0x08, 0x03, 0xC0, 0x00, 0x10, 0x20,
 0x01, 0x00, 0x08, 0x03, 0x80, 0x00, 0x00, 0x30,
 0x01, 0x00, 0x08, 0x03, 0x80, 0x00, 0x00, 0x30,
 0x01, 0x80, 0x08, 0x03, 0x80, 0x00, 0x72, 0x21
};
const unsigned char RF_MODEM_BCR_OSR_1_9_433[11][9]=
{
 0x03, 0x0D, 0x00, 0xA7, 0xC6, 0x00, 0x54, 0x02, 0xC2,
 0x01, 0x87, 0x01, 0x4F, 0x8B, 0x00, 0xA8, 0x02, 0xC2,
 0x00, 0xC3, 0x02, 0x9F, 0x17, 0x02, 0x1A, 0x02, 0x00,
 0x00, 0x62, 0x05, 0x3E, 0x2D, 0x07, 0xFF, 0x02, 0x00,
 0x00, 0x41, 0x07, 0xDD, 0x44, 0x07, 0xFF, 0x02, 0x00,
 0x00, 0x41, 0x07, 0xDD, 0x44, 0x07, 0xFF, 0x02, 0x00,
 0x00, 0x41, 0x07, 0xDD, 0x44, 0x07, 0xFF, 0x02, 0x00,
 0x00, 0x41, 0x07, 0xDD, 0x44, 0x07, 0xFF, 0x02, 0x00,
 0x00, 0x75, 0x04, 0x5E, 0x7B, 0x05, 0x9a, 0x02, 0x00,
 0x00, 0x3C, 0x08, 0x88, 0x89, 0x07, 0xFF, 0x02, 0x00,
 0x03, 0xAA, 0x00, 0x8B, 0xCF, 0x00, 0x46, 0x02, 0xC2
};

const unsigned char RF_MODEM_BCR_OSR_1_9_850[11][9]=
{

 0x03, 0x0D, 0x00, 0xA7, 0xC6, 0x00, 0x54, 0x02, 0xC2,

 0x03, 0x0D, 0x00, 0xA7, 0xC6, 0x00, 0x54, 0x02, 0xC2,

 0x01, 0x87, 0x01, 0x4F, 0x8B, 0x00, 0xA8, 0x02, 0xC2,

 0x00, 0xC3, 0x02, 0x9F, 0x17, 0x01, 0x93, 0x02, 0x00,

 0x00, 0x62, 0x05, 0x3E, 0x2D, 0x05, 0x04, 0x02, 0x00,

 0x00, 0x41, 0x07, 0xDD, 0x44, 0x07, 0xFF, 0x02, 0x00,

 0x00, 0x41, 0x07, 0xDD, 0x44, 0x07, 0xFF, 0x02, 0x00,

 0x00, 0x41, 0x07, 0xDD, 0x44, 0x07, 0xFF, 0x02, 0x00,
 0x00, 0x75, 0x04, 0x5E, 0x7B, 0x05, 0x9a, 0x02, 0x00,
 0x00, 0x3C, 0x08, 0x88, 0x89, 0x07, 0xFF, 0x02, 0x00,
 0x03, 0xAA, 0x00, 0x8B, 0xCF, 0x00, 0x46, 0x02, 0xC2
};
const unsigned char RF_MODEM_AFC_GEAR_7_433[11][7]=
{
 0x04, 0x36, 0x80, 0x03, 0x30, 0xAF, 0x80,
 0x04, 0x36, 0x80, 0x07, 0x14, 0xDD, 0x80,
 0x00, 0x12, 0x80, 0x2A, 0x04, 0x3A, 0xA0,
 0x00, 0x12, 0x80, 0x54, 0x02, 0x5A, 0xA0,
 0x00, 0x12, 0x80, 0xA8, 0x01, 0x68, 0xE0,
 0x00, 0x12, 0x81, 0x50, 0x01, 0x20, 0xE0,
 0x00, 0x12, 0x82, 0x9F, 0x01, 0x03, 0xE0,
 0x00, 0x23, 0x87, 0xDD, 0x00, 0x77, 0xE0,
 0x00, 0x23, 0x8F, 0xFF, 0x00, 0xc9, 0xE0,
 0x00, 0x23, 0x8F, 0xFF, 0x01, 0x23, 0xE0,
 0x04, 0x36, 0x80, 0x01, 0x50, 0x69, 0x80
};

const unsigned char RF_MODEM_AFC_GEAR_7_850[11][7]=
{

 0x04, 0x36, 0x80, 0x01, 0x52, 0x30, 0x80,

 0x04, 0x36, 0x80, 0x03, 0x30, 0x7F, 0x80,

 0x04, 0x36, 0x80, 0x07, 0x17, 0x10, 0x80,

 0x00, 0x12, 0x80, 0x2A, 0x04, 0xB1, 0xA0,

 0x00, 0x12, 0x80, 0x54, 0x02, 0x9A, 0xA0,

 0x00, 0x12, 0x80, 0xA8, 0x01, 0x8F, 0xA0,

 0x00, 0x12, 0x81, 0x50, 0x01, 0x1F, 0xA0,

 0x00, 0x23, 0x83, 0xEF, 0x00, 0x84, 0xA0,
 0x00, 0x23, 0x8F, 0xFF, 0x00, 0xc9, 0xE0,
 0x00, 0x23, 0x8F, 0xFF, 0x01, 0x23, 0xE0,
 0x04, 0x36, 0x80, 0x01, 0x50, 0x69, 0x80
};

const unsigned char RF_MODEM_AGC_WINDOW_SIZE_9_433[11][9]=
{
 0x11, 0xAB, 0xAB, 0x00, 0x1A, 0x14, 0x00, 0x00, 0x2B,
 0x11, 0x56, 0x56, 0x00, 0x1A, 0xA0, 0x00, 0x00, 0x2A,
 0x11, 0x2B, 0x2B, 0x00, 0x1A, 0x50, 0x00, 0x00, 0x29,
 0x11, 0x15, 0x15, 0x00, 0x1A, 0x28, 0x00, 0x00, 0x28,
 0x11, 0x0E, 0x0E, 0x00, 0x1A, 0x21, 0x55, 0x00, 0x28,
 0x11, 0x0E, 0x0E, 0x00, 0x1A, 0x10, 0xAB, 0x00, 0x28,
 0x11, 0x0E, 0x0E, 0x00, 0x1A, 0x08, 0x55, 0x00, 0x28,
 0x11, 0x0E, 0x0E, 0x00, 0x1A, 0x05, 0x8E, 0x00, 0x28,
 0x22, 0x0D, 0x0D, 0x00, 0x1A, 0x32, 0x00, 0x00, 0x28,
 0x22, 0x07, 0x07, 0x00, 0x1A, 0x19, 0x9a, 0x00, 0x27,
 0x11, 0xCD, 0xCD, 0x00, 0x1A, 0x30, 0x00, 0x00, 0x2B
};

const unsigned char RF_MODEM_AGC_WINDOW_SIZE_9_850[11][9]=
{

 0x11, 0xAB, 0xAB, 0x00, 0x02, 0xFF, 0xFF, 0x00, 0x2B,

 0x11, 0xAB, 0xAB, 0x00, 0x02, 0xFF, 0xFF, 0x00, 0x2B,

 0x11, 0x56, 0x56, 0x00, 0x02, 0xD5, 0x55, 0x00, 0x2A,

 0x11, 0x2B, 0x2B, 0x00, 0x02, 0x6A, 0xAB, 0x00, 0x29,

 0x11, 0x15, 0x15, 0x00, 0x02, 0x42, 0xAB, 0x00, 0x28,

 0x11, 0x0E, 0x0E, 0x00, 0x02, 0x21, 0x55, 0x00, 0x28,

 0x11, 0x0E, 0x0E, 0x00, 0x02, 0x10, 0xAB, 0x00, 0x28,

 0x11, 0x0E, 0x0E, 0x00, 0x02, 0x10, 0xAB, 0x00, 0x28,
 0x22, 0x0D, 0x0D, 0x00, 0x1A, 0x32, 0x00, 0x00, 0x28,
 0x22, 0x07, 0x07, 0x00, 0x1A, 0x19, 0x9a, 0x00, 0x27,
 0x11, 0xCD, 0xCD, 0x00, 0x1A, 0x30, 0x00, 0x00, 0x2B
};

const unsigned char RF_MODEM_OOK_CNT1_11_433[11][11]=
{
 0xA4, 0x02, 0xD6, 0x83, 0x00, 0xAD, 0x01, 0x80, 0xFF, 0x0C, 0x00,
 0xA4, 0x02, 0xD6, 0x83, 0x00, 0xAD, 0x01, 0x80, 0xFF, 0x0C, 0x00,
 0xA4, 0x03, 0xD6, 0x03, 0x00, 0xCC, 0x01, 0x80, 0xFF, 0x0C, 0x00,
 0xA4, 0x03, 0xD6, 0x03, 0x00, 0xCC, 0x01, 0x80, 0xFF, 0x0C, 0x00,
 0xA4, 0x03, 0xD6, 0x03, 0x01, 0x00, 0x01, 0x80, 0xFF, 0x0C, 0x00,
 0xA4, 0x03, 0xD6, 0x03, 0x00, 0x80, 0x01, 0x80, 0xFF, 0x0C, 0x00,
 0xA4, 0x03, 0xD6, 0x03, 0x00, 0x40, 0x01, 0x80, 0xFF, 0x0C, 0x00,
 0xA4, 0x03, 0xD6, 0x03, 0x00, 0x2B, 0x01, 0x80, 0xFF, 0x0C, 0x00,
 0xA4, 0x03, 0xD6, 0x03, 0x00, 0xd5, 0x01, 0x80, 0xFF, 0x0C, 0x00,
 0xA4, 0x03, 0xD6, 0x03, 0x00, 0xd5, 0x01, 0x80, 0xFF, 0x0C, 0x00,
 0xA4, 0x02, 0xD6, 0x81, 0x02, 0xB4, 0x01, 0x80, 0xFF, 0x0C, 0x00
};

const unsigned char RF_MODEM_OOK_CNT1_11_850[11][11]=
{

 0xA4, 0x02, 0xD6, 0x81, 0x03, 0x9B, 0x01, 0x80, 0xFF, 0x0C, 0x02,

 0xA4, 0x02, 0xD6, 0x83, 0x00, 0xE7, 0x01, 0x80, 0xFF, 0x0C, 0x02,

 0xA4, 0x02, 0xD6, 0x83, 0x00, 0xE7, 0x01, 0x80, 0xFF, 0x0C, 0x02,

 0xA4, 0x03, 0xD6, 0x03, 0x01, 0x11, 0x01, 0x80, 0xFF, 0x0C, 0x02,

 0xA4, 0x03, 0xD6, 0x03, 0x01, 0x55, 0x01, 0x80, 0xFF, 0x0C, 0x02,

 0xA4, 0x03, 0xD6, 0x03, 0x01, 0x00, 0x01, 0x80, 0xFF, 0x0C, 0x02,

 0xA4, 0x03, 0xD6, 0x03, 0x00, 0x80, 0x01, 0x80, 0xFF, 0x0C, 0x02,

 0xA4, 0x03, 0xD6, 0x03, 0x00, 0x80, 0x01, 0x80, 0xFF, 0x0C, 0x02,
 0xA4, 0x03, 0xD6, 0x03, 0x00, 0xd5, 0x01, 0x80, 0xFF, 0x0C, 0x02,
 0xA4, 0x03, 0xD6, 0x03, 0x00, 0xd5, 0x01, 0x80, 0xFF, 0x0C, 0x02,
 0xA4, 0x02, 0xD6, 0x81, 0x02, 0xB4, 0x01, 0x80, 0xFF, 0x0C, 0x02
};

const unsigned char RF_MODEM_CHFLT_RX1_CHFLT_COE13_7_0_12_433[11][12]=
{
 0xFF, 0xC4, 0x30, 0x7F, 0xF5, 0xB5, 0xB8, 0xDE, 0x05, 0x17, 0x16, 0x0C,
 0xFF, 0xC4, 0x30, 0x7F, 0xF5, 0xB5, 0xB8, 0xDE, 0x05, 0x17, 0x16, 0x0C,
 0xCC, 0xA1, 0x30, 0xA0, 0x21, 0xD1, 0xB9, 0xC9, 0xEA, 0x05, 0x12, 0x11,
 0xFF, 0xC4, 0x30, 0x7F, 0xF5, 0xB5, 0xB8, 0xDE, 0x05, 0x17, 0x16, 0x0C,
 0xCC, 0xA1, 0x30, 0xA0, 0x21, 0xD1, 0xB9, 0xC9, 0xEA, 0x05, 0x12, 0x11,
 0x7E, 0x64, 0x1B, 0xBA, 0x58, 0x0B, 0xDD, 0xCE, 0xD6, 0xE6, 0xF6, 0x00,
 0x5B, 0x47, 0x0F, 0xC0, 0x6D, 0x25, 0xF4, 0xDB, 0xD6, 0xDF, 0xEC, 0xF7,
 0x5B, 0x47, 0x0F, 0xC0, 0x6D, 0x25, 0xF4, 0xDB, 0xD6, 0xDF, 0xEC, 0xF7,
 0x39, 0x2B, 0x00, 0xC3, 0x7F, 0x3F, 0x0C, 0xEC, 0xDC, 0xDC, 0xE3, 0xED,
 0xA2, 0x81, 0x26, 0xAF, 0x3F, 0xEE, 0xC8, 0xC7, 0xDB, 0xF2, 0x02, 0x08,
 0xCC, 0xA1, 0x30, 0xA0, 0x21, 0xD1, 0xB9, 0xC9, 0xEA, 0x05, 0x12, 0x11
};

const unsigned char RF_MODEM_CHFLT_RX1_CHFLT_COE13_7_0_12_850[11][12]=
{

 0xFF, 0xC4, 0x30, 0x7F, 0xF5, 0xB5, 0xB8, 0xDE, 0x05, 0x17, 0x16, 0x0C,

 0xFF, 0xC4, 0x30, 0x7F, 0xF5, 0xB5, 0xB8, 0xDE, 0x05, 0x17, 0x16, 0x0C,

 0xFF, 0xBA, 0x0F, 0x51, 0xCF, 0xA9, 0xC9, 0xFC, 0x1B, 0x1E, 0x0F, 0x01,

 0xFF, 0xC4, 0x30, 0x7F, 0xF5, 0xB5, 0xB8, 0xDE, 0x05, 0x17, 0x16, 0x0C,

 0xFF, 0xBA, 0x0F, 0x51, 0xCF, 0xA9, 0xC9, 0xFC, 0x1B, 0x1E, 0x0F, 0x01,

 0xFF, 0xC4, 0x30, 0x7F, 0xF5, 0xB5, 0xB8, 0xDE, 0x05, 0x17, 0x16, 0x0C,

 0x7E, 0x64, 0x1B, 0xBA, 0x58, 0x0B, 0xDD, 0xCE, 0xD6, 0xE6, 0xF6, 0x00,

 0x7E, 0x64, 0x1B, 0xBA, 0x58, 0x0B, 0xDD, 0xCE, 0xD6, 0xE6, 0xF6, 0x00,
 0x39, 0x2B, 0x00, 0xC3, 0x7F, 0x3F, 0x0C, 0xEC, 0xDC, 0xDC, 0xE3, 0xED,
 0xA2, 0x81, 0x26, 0xAF, 0x3F, 0xEE, 0xC8, 0xC7, 0xDB, 0xF2, 0x02, 0x08,
 0xCC, 0xA1, 0x30, 0xA0, 0x21, 0xD1, 0xB9, 0xC9, 0xEA, 0x05, 0x12, 0x11
};

const unsigned char RF_MODEM_CHFLT_RX1_CHFLT_COE1_7_0_12_433[11][12]=
{
 0x03, 0x00, 0x15, 0xFF, 0x00, 0x00, 0xFF, 0xC4, 0x30, 0x7F, 0xF5, 0xB5,
 0x03, 0x00, 0x15, 0xFF, 0x00, 0x00, 0xFF, 0xC4, 0x30, 0x7F, 0xF5, 0xB5,
 0x0A, 0x04, 0x15, 0xFC, 0x03, 0x00, 0xCC, 0xA1, 0x30, 0xA0, 0x21, 0xD1,
 0x03, 0x00, 0x15, 0xFF, 0x00, 0x00, 0xFF, 0xC4, 0x30, 0x7F, 0xF5, 0xB5,
 0x0A, 0x04, 0x15, 0xFC, 0x03, 0x00, 0xCC, 0xA1, 0x30, 0xA0, 0x21, 0xD1,
 0x03, 0x03, 0x15, 0xF0, 0x3F, 0x00, 0x7E, 0x64, 0x1B, 0xBA, 0x58, 0x0B,
 0xFE, 0x01, 0x15, 0xF0, 0xFF, 0x03, 0x5B, 0x47, 0x0F, 0xC0, 0x6D, 0x25,
 0xFE, 0x01, 0x15, 0xF0, 0xFF, 0x03, 0x5B, 0x47, 0x0F, 0xC0, 0x6D, 0x25,
 0xF6, 0xFD, 0x15, 0xC0, 0xFF, 0x0F, 0x39, 0x2B, 0x00, 0xC3, 0x7F, 0x3F,
 0x07, 0x03, 0x15, 0xFC, 0x0F, 0x00, 0xA2, 0x81, 0x26, 0xAF, 0x3F, 0xEE,
 0x0A, 0x04, 0x15, 0xFC, 0x03, 0x00, 0xCC, 0xA1, 0x30, 0xA0, 0x21, 0xD1
};

const unsigned char RF_MODEM_CHFLT_RX1_CHFLT_COE1_7_0_12_850[11][12]=
{

 0x03, 0x00, 0x15, 0xFF, 0x00, 0x00, 0xFF, 0xC4, 0x30, 0x7F, 0xF5, 0xB5,

 0x03, 0x00, 0x15, 0xFF, 0x00, 0x00, 0xFF, 0xC4, 0x30, 0x7F, 0xF5, 0xB5,

 0xFC, 0xFD, 0x15, 0xFF, 0x00, 0x0F, 0xFF, 0xBA, 0x0F, 0x51, 0xCF, 0xA9,

 0x03, 0x00, 0x15, 0xFF, 0x00, 0x00, 0xFF, 0xC4, 0x30, 0x7F, 0xF5, 0xB5,

 0xFC, 0xFD, 0x15, 0xFF, 0x00, 0x0F, 0xFF, 0xBA, 0x0F, 0x51, 0xCF, 0xA9,

 0x03, 0x00, 0x15, 0xFF, 0x00, 0x00, 0xFF, 0xC4, 0x30, 0x7F, 0xF5, 0xB5,

 0x03, 0x03, 0x15, 0xF0, 0x3F, 0x00, 0x7E, 0x64, 0x1B, 0xBA, 0x58, 0x0B,

 0xF6, 0xFD, 0x15, 0xC0, 0xFF, 0x0F, 0x39, 0x2B, 0x00, 0xC3, 0x7F, 0x3F,
 0x07, 0x03, 0x15, 0xFC, 0x0F, 0x00, 0xA2, 0x81, 0x26, 0xAF, 0x3F, 0xEE,
 0x0A, 0x04, 0x15, 0xFC, 0x03, 0x00, 0xCC, 0xA1, 0x30, 0xA0, 0x21, 0xD1
};
const unsigned char RF_MODEM_CHFLT_RX2_CHFLT_COE7_7_0_12_433[11][12]=
{
 0xB8, 0xDE, 0x05, 0x17, 0x16, 0x0C, 0x03, 0x00, 0x15, 0xFF, 0x00, 0x00,
 0xB8, 0xDE, 0x05, 0x17, 0x16, 0x0C, 0x03, 0x00, 0x15, 0xFF, 0x00, 0x00,
 0xB9, 0xC9, 0xEA, 0x05, 0x12, 0x11, 0x0A, 0x04, 0x15, 0xFC, 0x03, 0x00,
 0xB8, 0xDE, 0x05, 0x17, 0x16, 0x0C, 0x03, 0x00, 0x15, 0xFF, 0x00, 0x00,
 0xB9, 0xC9, 0xEA, 0x05, 0x12, 0x11, 0x0A, 0x04, 0x15, 0xFC, 0x03, 0x00,
 0xDD, 0xCE, 0xD6, 0xE6, 0xF6, 0x00, 0x03, 0x03, 0x15, 0xF0, 0x3F, 0x00,
 0xF4, 0xDB, 0xD6, 0xDF, 0xEC, 0xF7, 0xFE, 0x01, 0x15, 0xF0, 0xFF, 0x03,
 0xF4, 0xDB, 0xD6, 0xDF, 0xEC, 0xF7, 0xFE, 0x01, 0x15, 0xF0, 0xFF, 0x03,
 0x0C, 0xEC, 0xDC, 0xDC, 0xE3, 0xED, 0xF6, 0xFD, 0x15, 0xC0, 0xFF, 0x0F,
 0xC8, 0xC7, 0xDB, 0xF2, 0x02, 0x08, 0x07, 0x03, 0x15, 0xFC, 0x0F, 0x00,
 0xB9, 0xC9, 0xEA, 0x05, 0x12, 0x11, 0x0A, 0x04, 0x15, 0xFC, 0x03, 0x00
};

const unsigned char RF_MODEM_CHFLT_RX2_CHFLT_COE7_7_0_12_850[11][12]=
{

 0xB8, 0xDE, 0x05, 0x17, 0x16, 0x0C, 0x03, 0x00, 0x15, 0xFF, 0x00, 0x00,

 0xB8, 0xDE, 0x05, 0x17, 0x16, 0x0C, 0x03, 0x00, 0x15, 0xFF, 0x00, 0x00,

 0xC9, 0xFC, 0x1B, 0x1E, 0x0F, 0x01, 0xFC, 0xFD, 0x15, 0xFF, 0x00, 0x0F,

 0xB8, 0xDE, 0x05, 0x17, 0x16, 0x0C, 0x03, 0x00, 0x15, 0xFF, 0x00, 0x00,

 0xC9, 0xFC, 0x1B, 0x1E, 0x0F, 0x01, 0xFC, 0xFD, 0x15, 0xFF, 0x00, 0x0F,

 0xB8, 0xDE, 0x05, 0x17, 0x16, 0x0C, 0x03, 0x00, 0x15, 0xFF, 0x00, 0x00,

 0xDD, 0xCE, 0xD6, 0xE6, 0xF6, 0x00, 0x03, 0x03, 0x15, 0xF0, 0x3F, 0x00,

 0x03, 0x03, 0x15, 0xF0, 0x3F, 0x00, 0x7E, 0x64, 0x1B, 0xBA, 0x58, 0x0B,
 0x0C, 0xEC, 0xDC, 0xDC, 0xE3, 0xED, 0xF6, 0xFD, 0x15, 0xC0, 0xFF, 0x0F,
 0xC8, 0xC7, 0xDB, 0xF2, 0x02, 0x08, 0x07, 0x03, 0x15, 0xFC, 0x0F, 0x00,
 0xB9, 0xC9, 0xEA, 0x05, 0x12, 0x11, 0x0A, 0x04, 0x15, 0xFC, 0x03, 0x00
};

const unsigned char RF_SYNTH_PFDCP_CPFF_7[11][7]=
{
 0x2C, 0x0E, 0x0B, 0x04, 0x0C, 0x73, 0x03,
 0x2C, 0x0E, 0x0B, 0x04, 0x0C, 0x73, 0x03,
 0x2C, 0x0E, 0x0B, 0x04, 0x0C, 0x73, 0x03,
 0x2C, 0x0E, 0x0B, 0x04, 0x0C, 0x73, 0x03,
 0x2C, 0x0E, 0x0B, 0x04, 0x0C, 0x73, 0x03,
 0x2C, 0x0E, 0x0B, 0x04, 0x0C, 0x73, 0x03,
 0x34, 0x04, 0x0B, 0x04, 0x07, 0x70, 0x03,
 0x34, 0x04, 0x0B, 0x04, 0x07, 0x70, 0x03,
 0x01, 0x05, 0x0B, 0x05, 0x02, 0x00, 0x03,
 0x01, 0x05, 0x0B, 0x05, 0x02, 0x00, 0x03,
 0x2C, 0x0E, 0x0B, 0x04, 0x0C, 0x73, 0x03
};

const unsigned char RF_POWER_UP_data[] = {  0x02, 0x01, 0x00, 0x01, 0xC9, 0xC3, 0x80 };
const unsigned char RF_FRR_CTL_A_MODE_4_data[] = {  0x11, 0x02, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00 };
const unsigned char RF_MODEM_AGC_CONTROL_1_data[] = {  0x11, 0x20, 0x01, 0x35, 0xE2 };

unsigned char RF_MODEM_MOD_TYPE_12_data[16]={0x11, 0x20, 0x0C, 0x00};
unsigned char RF_MODEM_TX_RAMP_DELAY_8_data[12]={0x11, 0x20, 0x08, 0x18};
unsigned char RF_MODEM_BCR_OSR_1_9_data[13]={0x11, 0x20, 0x09, 0x22};
unsigned char RF_MODEM_AFC_GEAR_7_data[13]={0x11, 0x20, 0x07, 0x2C};
unsigned char RF_MODEM_AGC_WINDOW_SIZE_9_data[13]={0x11, 0x20, 0x09, 0x38};
unsigned char RF_MODEM_OOK_CNT1_11_data[15]={0x11, 0x20, 0x0B, 0x42};
unsigned char RF_MODEM_CHFLT_RX1_CHFLT_COE13_7_0_12_data[16]={0x11, 0x21, 0x0C, 0x00};
unsigned char RF_MODEM_CHFLT_RX1_CHFLT_COE1_7_0_12_data[16]={0x11, 0x21, 0x0C, 0x0C};
unsigned char RF_MODEM_CHFLT_RX2_CHFLT_COE7_7_0_12_data[16]={0x11, 0x21, 0x0C, 0x18};
unsigned char RF_SYNTH_PFDCP_CPFF_7_data[11]={0x11, 0x23, 0x07, 0x00};

const unsigned char tx_test_aa_data[14] = {0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa};
const unsigned char tx_ph_data[14] = {'s','w','w','x',0x41,0x42,0x43,0x44,0x45,0x46,0x47,0x48,0x49,0x6d};

const unsigned char Tab_DispCode[17]={0x77,0x24,0x6b,0x6d,0x3c,0x5d,0x5f,0x64,0x7f,0x7d,0x7e,0x1f,0x53,0x2f,0x5b,0x5a,0x00};

typedef struct
{
 unsigned char reach_1s : 1;
 unsigned char is_tx : 1;
 unsigned char rf_reach_timeout : 1;


 unsigned char flash : 1;
 unsigned char key_valid : 1;

}FlagType;

FlagType Flag;

U16 count_1hz, rf_timeout;
U8 spi_read_buf[20];
U8 rx_buf[25];

unsigned char key_value;
unsigned char have_set;
unsigned char set;
unsigned char old_mode;
unsigned char mode;
unsigned char freq3;
unsigned char freq2;
unsigned char freq1;
unsigned char power;
unsigned char rssi;
unsigned char rate;

unsigned char cnt_10s;

unsigned long tx_cnt = 0,rx_cnt = 0;
unsigned char reset_mode;

unsigned char reach_15hz = 0,reach_flash = 0,reach_1s = 0;
unsigned char count_15hz,count_flash = 0,count_1s = 0,nirq_cnt = 0;

void sdn_reset(void);
void SI4463_init(void);
void rf_init_freq(void);
void vRf4463SPIWriteBuffer( uint16_t usWriteLength, uint8_t * pcWriteBuffer );
void vRf4463SPIReadBuffer( uint16_t usReadLength, uint8_t * pcReadBuffer );
uint8_t ucRf4463SPIByte( uint8_t pcWriteData );
uint8_t ucRf4463CheckCTS();
unsigned long hex2int(char *a, unsigned int len);
void vRf4463SPIWriteBuffer( uint16_t usWriteLength, uint8_t * pcWriteBuffer );
uint8_t ucRf4463GetProperty( uint16_t usStartProperty, uint8_t ucLength, uint8_t * pcParametersBuffer );
uint8_t ucRf4463SetCommand( uint8_t ucLength, uint8_t ucCommand, uint8_t * pcParametersBuffer );
uint8_t ucRf4463GetCommand( uint8_t ucLength, uint8_t ucCommand, uint8_t * pcParametersBuffer );

unsigned char SPIReadByte(unsigned long WrPara);
void SPIWriteByte(unsigned int WrPara);

void vBufferSetToZero( uint8_t * pcBufferToClean, uint16_t uslength );

void GPIO_SET(unsigned char mydata);

void main() {

SPI2_Init_Advanced( _SPI_FPCLK_DIV8, _SPI_MASTER | _SPI_8_BIT | _SPI_CLK_IDLE_LOW | _SPI_FIRST_CLK_EDGE_TRANSITION | _SPI_MSB_FIRST |
 _SPI_SS_DISABLE | _SPI_SSM_ENABLE | _SPI_SSI_1, &_GPIO_MODULE_SPI2_PB13_14_15 );

UART1_Init_Advanced( 115200, _UART_8_BIT_DATA, _UART_NOPARITY, _UART_ONE_STOPBIT, &_GPIO_MODULE_USART1_PA9_10 );
#line 552 "C:/Users/Crow/Desktop/Lab-01/RF4463PRO.c"
GPIO_Digital_Output( &GPIOB_BASE, _GPIO_PINMASK_12 );
GPIO_Digital_Input( &GPIOC_BASE, _GPIO_PINMASK_12 );
GPIO_Digital_Output( &GPIOB_BASE, _GPIO_PINMASK_11 );

GPIO_Digital_Input( &GPIOC_BASE, _GPIO_PINMASK_11 );
GPIO_Digital_Output( &GPIOC_BASE, _GPIO_PINMASK_10 );

GPIO_Digital_Output( &GPIOB_BASE, _GPIO_PINMASK_7 );
GPIO_Digital_Input( &GPIOB_BASE, _GPIO_PINMASK_8 );

GPIO_Digital_Output( &GPIOC_BASE, _GPIO_PINMASK_6 );
GPIO_Digital_Output( &GPIOC_BASE, _GPIO_PINMASK_7 );
GPIO_Digital_Output( &GPIOC_BASE, _GPIO_PINMASK_8 );
#line 569 "C:/Users/Crow/Desktop/Lab-01/RF4463PRO.c"
mode =  0 ;


Sound_Init(&GPIOB_ODR, 7);
 GPIOC_ODR._GPIO_PIN_7  = 1;
Sound_Play(3000, 100);
Delay_ms(100);
Sound_Play(4000, 100);
 GPIOC_ODR._GPIO_PIN_7  =0;


sdn_reset();

SI4463_init();






}


void sdn_reset(void)
{
#line 620 "C:/Users/Crow/Desktop/Lab-01/RF4463PRO.c"
 uint8_t pcBuffer[ 7 ] = {  0x02, 0x01, 0x00, 0x01, 0xC9, 0xC3, 0x80  };
 uint8_t *charBuffer;
#line 634 "C:/Users/Crow/Desktop/Lab-01/RF4463PRO.c"
  GPIOB_ODR._GPIO_PIN_11  = 0x01;
 Delay_us( 16 );
  GPIOB_ODR._GPIO_PIN_11  = 0x00 ;

 Delay_ms( 6 );

  GPIOB_ODR._GPIO_PIN_12  = 0x00 ;
 vRf4463SPIWriteBuffer( sizeof( pcBuffer ), pcBuffer );
  GPIOB_ODR._GPIO_PIN_12 = 0x01 ;



}


void SI4463_init(void)
{
 U8 app_command_buf[20];
 U8 i;



 for(i=4;i<16;i++)
 RF_MODEM_MOD_TYPE_12_data[i] = RF_MODEM_MOD_TYPE_12[rate][i-4];
 if(freq3<8)
 {
 for(i=4;i<12;i++)
 RF_MODEM_TX_RAMP_DELAY_8_data[i] = RF_MODEM_TX_RAMP_DELAY_8_433[rate][i-4];
 for(i=4;i<11;i++)
 RF_MODEM_AFC_GEAR_7_data[i] = RF_MODEM_AFC_GEAR_7_433[rate][i-4];
 for(i=4;i<15;i++)
 RF_MODEM_OOK_CNT1_11_data[i] =RF_MODEM_OOK_CNT1_11_433[rate][i-4];
 for(i=4;i<16;i++)
 RF_MODEM_CHFLT_RX1_CHFLT_COE13_7_0_12_data[i] =RF_MODEM_CHFLT_RX1_CHFLT_COE13_7_0_12_433[rate][i-4];
 for(i=4;i<16;i++)
 RF_MODEM_CHFLT_RX1_CHFLT_COE1_7_0_12_data[i] = RF_MODEM_CHFLT_RX1_CHFLT_COE1_7_0_12_433[rate][i-4];
 for(i=4;i<16;i++)
 RF_MODEM_CHFLT_RX2_CHFLT_COE7_7_0_12_data[i] = RF_MODEM_CHFLT_RX2_CHFLT_COE7_7_0_12_433[rate][i-4];
 for(i=4;i<13;i++)
 RF_MODEM_AGC_WINDOW_SIZE_9_data[i] = RF_MODEM_AGC_WINDOW_SIZE_9_433[rate][i-4];
 for(i=4;i<13;i++)
 RF_MODEM_BCR_OSR_1_9_data[i] = RF_MODEM_BCR_OSR_1_9_433[rate][i-4];
 }
 else
 {
 for(i=4;i<12;i++)
 RF_MODEM_TX_RAMP_DELAY_8_data[i] = RF_MODEM_TX_RAMP_DELAY_8_850[rate][i-4];
 for(i=4;i<11;i++)
 RF_MODEM_AFC_GEAR_7_data[i] = RF_MODEM_AFC_GEAR_7_850[rate][i-4];
 for(i=4;i<15;i++)
 RF_MODEM_OOK_CNT1_11_data[i] =RF_MODEM_OOK_CNT1_11_850[rate][i-4];
 for(i=4;i<16;i++)
 RF_MODEM_CHFLT_RX1_CHFLT_COE13_7_0_12_data[i] =RF_MODEM_CHFLT_RX1_CHFLT_COE13_7_0_12_850[rate][i-4];
 for(i=4;i<16;i++)
 RF_MODEM_CHFLT_RX1_CHFLT_COE1_7_0_12_data[i] = RF_MODEM_CHFLT_RX1_CHFLT_COE1_7_0_12_850[rate][i-4];
 for(i=4;i<16;i++)
 RF_MODEM_CHFLT_RX2_CHFLT_COE7_7_0_12_data[i] = RF_MODEM_CHFLT_RX2_CHFLT_COE7_7_0_12_850[rate][i-4];
 for(i=4;i<13;i++)
 RF_MODEM_AGC_WINDOW_SIZE_9_data[i] = RF_MODEM_AGC_WINDOW_SIZE_9_850[rate][i-4];
 for(i=4;i<13;i++)
 RF_MODEM_BCR_OSR_1_9_data[i] = RF_MODEM_BCR_OSR_1_9_850[rate][i-4];
 }
 for(i=4;i<11;i++)
 RF_SYNTH_PFDCP_CPFF_7_data[i] = RF_SYNTH_PFDCP_CPFF_7[rate][i-4];

 GPIO_SET(mode);


 app_command_buf[0] = 0x11;
 app_command_buf[1] = 0x00;
 app_command_buf[2] = 0x01;
 app_command_buf[3] = 0x00;
 app_command_buf[4] = 98;
 vRf4463SPIWriteBuffer(5, app_command_buf);
 vBufferSetToZero( app_command_buf, 20 );

 UART1_Write_Text("Paret Info : ");
 ucRf4463GetCommand( 8, 0x01, app_command_buf );
 UART1_Write_Text("\n\r");


 app_command_buf[0] = 0x11;
 app_command_buf[1] = 0x00;
 app_command_buf[2] = 0x01;
 app_command_buf[3] = 0x03;
 app_command_buf[4] = 0x40;
 vRf4463SPIWriteBuffer(5, app_command_buf);
 vBufferSetToZero( app_command_buf, 20 );


 vRf4463SPIWriteBuffer(0x08, RF_FRR_CTL_A_MODE_4_data);


 app_command_buf[0] = 0x11;
 app_command_buf[1] = 0x10;
 app_command_buf[2] = 0x09;
 app_command_buf[3] = 0x00;

 if(mode ==  2 )
 {
 app_command_buf[4] = 0xff;
 }
 else
 {
 app_command_buf[4] = 0x08;
 }


 app_command_buf[5] = 0x14;
 app_command_buf[6] = 0x00;
 app_command_buf[7] = 0x0f;
 app_command_buf[8] = 0x31;
 app_command_buf[9] = 0x0;
 app_command_buf[10] = 0x00;
 app_command_buf[11] = 0x00;
 app_command_buf[12] = 0x00;
 vRf4463SPIWriteBuffer(13, app_command_buf);
 vBufferSetToZero( app_command_buf, 20 );


 app_command_buf[0] = 0x11;
 app_command_buf[1] = 0x11;
 app_command_buf[2] = 0x05;
 app_command_buf[3] = 0x00;
 app_command_buf[4] = 0x01;

 if(mode ==  2 )
 {
 app_command_buf[5] = 0x55;
 app_command_buf[6] = 0x55;
 }
 else
 {
 app_command_buf[5] = 0x2d;
 app_command_buf[6] = 0xd4;
 }

 app_command_buf[7] = 0x00;
 app_command_buf[8] = 0x00;
 vRf4463SPIWriteBuffer(9, app_command_buf);
 vBufferSetToZero( app_command_buf, 20 );


 app_command_buf[0] = 0x11;
 app_command_buf[1] = 0x12;
 app_command_buf[2] = 0x01;
 app_command_buf[3] = 0x00;
 app_command_buf[4] = 0x81;
 vRf4463SPIWriteBuffer(5, app_command_buf);
 vBufferSetToZero( app_command_buf, 20 );


 app_command_buf[0] = 0x11;
 app_command_buf[1] = 0x12;
 app_command_buf[2] = 0x01;
 app_command_buf[3] = 0x06;
 app_command_buf[4] = 0x02;
 vRf4463SPIWriteBuffer(5, app_command_buf);
 vBufferSetToZero( app_command_buf, 20 );


 app_command_buf[0] = 0x11;
 app_command_buf[1] = 0x12;
 app_command_buf[2] = 0x03;
 app_command_buf[3] = 0x08;
 app_command_buf[4] = 0x00;
 app_command_buf[5] = 0x00;
 app_command_buf[6] = 0x00;
 vRf4463SPIWriteBuffer(7, app_command_buf);
 vBufferSetToZero( app_command_buf, 20 );


 app_command_buf[0] = 0x11;
 app_command_buf[1] = 0x12;
 app_command_buf[2] = 0x0c;
 app_command_buf[3] = 0x0d;
 app_command_buf[4] = 0x00;
 app_command_buf[5] =  14 ;
 app_command_buf[6] = 0x04;
 app_command_buf[7] = 0xaa;
 app_command_buf[8] = 0x00;
 app_command_buf[9] = 0x00;
 app_command_buf[10] = 0x00;
 app_command_buf[11] = 0x00;
 app_command_buf[12] = 0x00;
 app_command_buf[13] = 0x00;
 app_command_buf[14] = 0x00;
 app_command_buf[15] = 0x00;
 vRf4463SPIWriteBuffer(16, app_command_buf);
 vBufferSetToZero( app_command_buf, 20 );


 app_command_buf[0] = 0x11;
 app_command_buf[1] = 0x12;
 app_command_buf[2] = 0x08;
 app_command_buf[3] = 0x19;
 app_command_buf[4] = 0x00;
 app_command_buf[5] = 0x00;
 app_command_buf[6] = 0x00;
 app_command_buf[7] = 0x00;
 app_command_buf[8] = 0x00;
 app_command_buf[9] = 0x00;
 app_command_buf[10] = 0x00;
 app_command_buf[11] = 0x00;
 vRf4463SPIWriteBuffer(12, app_command_buf);
 vBufferSetToZero( app_command_buf, 20 );


 vRf4463SPIWriteBuffer(0x10, RF_MODEM_MOD_TYPE_12_data);


 app_command_buf[0] = 0x11;
 app_command_buf[1] = 0x20;
 app_command_buf[2] = 0x01;
 app_command_buf[3] = 0x0c;

 if(freq3<8)
 {
 if(rate>= 8 )
 app_command_buf[4] = 0x4f;
 else if(rate>= 4 )
 app_command_buf[4] = 0x5e;
 else
 app_command_buf[4] = 0xd2;
 }
 else
 {
 if(rate>= 7 )
 app_command_buf[4] = 0x69;
 else if(rate>= 4 )
 app_command_buf[4] = 0x5e;
 else
 app_command_buf[4] = 0x18;
 }
 vRf4463SPIWriteBuffer(5, app_command_buf);
 vBufferSetToZero( app_command_buf, 20 );


 vRf4463SPIWriteBuffer(0x0C, RF_MODEM_TX_RAMP_DELAY_8_data);
 vRf4463SPIWriteBuffer(0x0D, RF_MODEM_BCR_OSR_1_9_data);
 vRf4463SPIWriteBuffer(0x0B, RF_MODEM_AFC_GEAR_7_data);
 vRf4463SPIWriteBuffer(0x05, RF_MODEM_AGC_CONTROL_1_data);
 vRf4463SPIWriteBuffer(0x0D, RF_MODEM_AGC_WINDOW_SIZE_9_data);
 vRf4463SPIWriteBuffer(0x0F, RF_MODEM_OOK_CNT1_11_data);


 app_command_buf[0] = 0x11;
 app_command_buf[1] = 0x20;
 app_command_buf[2] = 0x01;
 app_command_buf[3] = 0x4e;
 if(rate== 10 )
 app_command_buf[4] = 0x3a;
 else
 app_command_buf[4] = 0x40;
 vRf4463SPIWriteBuffer(5, app_command_buf);
 vBufferSetToZero( app_command_buf, 20 );


 vRf4463SPIWriteBuffer(0x10, RF_MODEM_CHFLT_RX1_CHFLT_COE13_7_0_12_data);
 vRf4463SPIWriteBuffer(0x10, RF_MODEM_CHFLT_RX1_CHFLT_COE1_7_0_12_data);
 vRf4463SPIWriteBuffer(0x10, RF_MODEM_CHFLT_RX2_CHFLT_COE7_7_0_12_data);


 app_command_buf[0] = 0x11;
 app_command_buf[1] = 0x22;
 app_command_buf[2] = 0x04;
 app_command_buf[3] = 0x00;
 app_command_buf[4] = 0x08;
 if(power==7)
 app_command_buf[5] = 127;
 else if(power==6)
 app_command_buf[5] = 50;
 else if(power==5)
 app_command_buf[5] = 30;
 else if(power==4)
 app_command_buf[5] = 20;
 else if(power==3)
 app_command_buf[5] = 15;
 else if(power==2)
 app_command_buf[5] = 10;
 else if(power==1)
 app_command_buf[5] = 7;
 else
 app_command_buf[5] = 4;
 app_command_buf[6] =0x00;
 if((rate<= 7 )||(rate== 10 ))
 app_command_buf[7] = 0x3d;
 else
 app_command_buf[7] = 0x5d;
 vRf4463SPIWriteBuffer(8, app_command_buf);
 vBufferSetToZero( app_command_buf, 20 );


 vRf4463SPIWriteBuffer(0x0B, RF_SYNTH_PFDCP_CPFF_7_data);


 app_command_buf[0] = 0x11;
 app_command_buf[1] = 0x30;
 app_command_buf[2] = 0x0c;
 app_command_buf[3] = 0x00;
 app_command_buf[4] = 's';
 app_command_buf[5] = 0xff;
 app_command_buf[6] = 0x40;
 app_command_buf[7] = 'w';
 app_command_buf[8] = 0xff;
 app_command_buf[9] = 0x01;
 app_command_buf[10] = 'w';
 app_command_buf[11] = 0xff;
 app_command_buf[12] = 0x02;
 app_command_buf[13] = 'x';
 app_command_buf[14] = 0xff;
 app_command_buf[15] = 0x03;
 vRf4463SPIWriteBuffer(16, app_command_buf);
 vBufferSetToZero( app_command_buf, 20 );

 rf_init_freq();


}

void rf_init_freq(void)
{
 unsigned char OUTDIV,DIV,VCO,INTE,BAND;
 unsigned char FD_2,FD_1,FD_0,FRAC_2,FRAC_1,FRAC_0;
 unsigned long FRAC,mydata,frequency;
 U8 app_command_buf[20];



 frequency = (freq3 * 100) + (freq2 * 10) + freq1;
 frequency = (frequency * 10000) + 5000;

 if(frequency>=7600000)
 {
 OUTDIV = 4;
 BAND = 0;
 VCO = 0xff;
 }
 else if(frequency>=5460000)
 {
 OUTDIV = 6;
 BAND = 1;
 VCO = 0xfe;
 }
 else if(frequency>=3850000)
 {
 OUTDIV = 8;
 BAND = 2;
 VCO = 0xfe;
 }
 else if(frequency>=2730000)
 {
 OUTDIV = 12;
 BAND = 3;
 VCO = 0xfd;
 }
 else if(frequency>=1940000)
 {
 OUTDIV = 16;
 BAND = 4;
 VCO = 0xfc;
 }
 else
 {
 OUTDIV = 24;
 BAND = 5;
 VCO = 0xfa;
 }

 DIV = OUTDIV/2;

 mydata = (frequency*DIV)/3;
 INTE = (mydata/100000)-1;
 FRAC = (mydata-(INTE+1)*100000)*16384/3125;
 FRAC = FRAC+0x80000;

 FRAC_0 = FRAC;
 FRAC>>=8;
 FRAC_1 = FRAC;
 FRAC>>=8;
 FRAC_2 = FRAC;



 app_command_buf[0] = 0x11;
 app_command_buf[1] = 0x20;
 app_command_buf[2] = 0x01;
 app_command_buf[3] = 0x51;
 app_command_buf[4] = 0x08|BAND;
 vRf4463SPIWriteBuffer(5, app_command_buf);
 vBufferSetToZero( app_command_buf, 20 );








 app_command_buf[0] = 0x11;
 app_command_buf[1] = 0x40;
 app_command_buf[2] = 0x08;
 app_command_buf[3] = 0x00;
 app_command_buf[4] = INTE;
 app_command_buf[5] = FRAC_2;
 app_command_buf[6] = FRAC_1;
 app_command_buf[7] = FRAC_0;
 app_command_buf[8] =  0x88 ;
 app_command_buf[9] =  0x89 ;
 app_command_buf[10] = 0x20;
 app_command_buf[11] = VCO;
 vRf4463SPIWriteBuffer(12, app_command_buf);
 vBufferSetToZero( app_command_buf, 20 );
}

void vRf4463SPIWriteBuffer( uint16_t usWriteLength, uint8_t * pcWriteBuffer ){
#line 1053 "C:/Users/Crow/Desktop/Lab-01/RF4463PRO.c"
 while( usWriteLength-- ){
 SPIWriteByte( *pcWriteBuffer++ );
 }
}
#line 1064 "C:/Users/Crow/Desktop/Lab-01/RF4463PRO.c"
void vRf4463SPIReadBuffer( uint16_t usReadLength, uint8_t * pcReadBuffer ){
 uint8_t ucRxCounter = 0;
 uint8_t display = 0;
 while( usReadLength-- ){
 pcReadBuffer[ ucRxCounter++ ] = SPIReadByte( 0 );
 }
}
#line 1078 "C:/Users/Crow/Desktop/Lab-01/RF4463PRO.c"
unsigned char SPIReadByte(unsigned long WrPara)
{
unsigned int wAddr, wData;
unsigned char temp;
 wAddr = WrPara >> 8 & 0xff;
 wData = WrPara & 0xff;

  GPIOB_ODR._GPIO_PIN_12  = 0;

 SPI2_Write(wAddr);
 temp = SPI2_Read(0);
  GPIOB_ODR._GPIO_PIN_12  = 1;
 return temp;
}
#line 1097 "C:/Users/Crow/Desktop/Lab-01/RF4463PRO.c"
void SPIWriteByte(unsigned int WrPara)
{
 unsigned int wAddr, wData;
 WrPara |= 0x8000;
 wAddr = WrPara >> 8 & 0xff;
 wData = WrPara & 0xff;

  GPIOB_ODR._GPIO_PIN_12  = 0;
 SPI2_Write(wAddr);
 SPI2_Write(wData);
  GPIOB_ODR._GPIO_PIN_12  = 1;




}
#line 1122 "C:/Users/Crow/Desktop/Lab-01/RF4463PRO.c"
uint8_t ucRf4463CheckCTS(){
 uint16_t usTimeoutCounter = 0;

 usTimeoutCounter =  2500 ;


 while( usTimeoutCounter-- ){
  GPIOB_ODR._GPIO_PIN_12  = 0x00;
 SPIWriteByte(  0x44  );




 if( SPIReadByte(  0x44  ) ==  0xff  )
 {

  GPIOB_ODR._GPIO_PIN_12 = 0x01;
 return 1;
 }

  GPIOB_ODR._GPIO_PIN_12 =0x01;
 }
 UART1_Write_Text( "[ RF4463 ] CTS failed\r\n" );
 return 0;
}

unsigned long hex2int(char *a, unsigned int len)
{
 int i;
 unsigned long val = 0;

 for(i=0;i<len;i++)
 if(a[i] <= 57)
 val += (a[i]-48)*(1<<(4*(len-1-i)));
 else
 val += (a[i]-55)*(1<<(4*(len-1-i)));

 return val;
}

uint8_t ucRf4463GetProperty( uint16_t usStartProperty, uint8_t ucLength, uint8_t * pcParametersBuffer ){
 uint8_t pcBuffer[ 4 ];

 if( ucRf4463CheckCTS() == 0 ){
 return 0;
 }

 pcBuffer[ 0 ] =  0x12 ;
 pcBuffer[ 1 ] = ( usStartProperty >> 8 );
 pcBuffer[ 2 ] = ucLength;
 pcBuffer[ 3 ] = ( usStartProperty & 0xFF );

  GPIOB_ODR._GPIO_PIN_12  = 0;
 vRf4463SPIWriteBuffer( 4, pcBuffer );

 if( ucRf4463CheckCTS() == 0 ){
 return 0;
 }

  GPIOB_ODR._GPIO_PIN_12 = 0;
 SPIReadByte(  0x44  );

 vRf4463SPIReadBuffer( ucLength, pcParametersBuffer );
  GPIOB_ODR._GPIO_PIN_12  = 1;

 return 1;
}



uint8_t ucRf4463GetCommand( uint8_t ucLength, uint8_t ucCommand, uint8_t * pcParametersBuffer ){
 if( ucRf4463CheckCTS() == 0 ){
 return 0;
 }

  GPIOB_ODR._GPIO_PIN_12 = 0;
 SPIWriteByte( ucCommand );
  GPIOB_ODR._GPIO_PIN_12 = 1;

 if( ucRf4463CheckCTS() == 0 ){
 return 0;
 }

  GPIOB_ODR._GPIO_PIN_12 = 0;
 SPIWriteByte(  0x44  );
 vRf4463SPIReadBuffer( ucLength, pcParametersBuffer );
  GPIOB_ODR._GPIO_PIN_12 = 1;
 UART1_Write_Text(pcParametersBuffer);
 return 1;
}

uint8_t ucRf4463SetCommand( uint8_t ucLength, uint8_t ucCommand, uint8_t * pcParametersBuffer ){
 if( ucRf4463CheckCTS() == 0 ){
 return 1;
 }

  GPIOB_ODR._GPIO_PIN_12  = 0;
 SPIWriteByte( ucCommand );
 vRf4463SPIWriteBuffer( ucLength, pcParametersBuffer );
  GPIOB_ODR._GPIO_PIN_12  = 1;

 return 1;
}

void vBufferSetToZero( uint8_t * pcBufferToClean, uint16_t uslength ){
 uint16_t usPosition = 0;

 for( usPosition = 0; usPosition < uslength; usPosition++ ){
 pcBufferToClean[ usPosition ] = 0x00;
 }
}


void GPIO_SET(unsigned char mydata)
{
 U8 app_command_buf[7];

 app_command_buf[0] = 0x13;

 switch(mydata)
 {
 case  0 :
 case  1 :
 app_command_buf[1] = 3;
 app_command_buf[2] = 2;
 break;

 case  2 :
 app_command_buf[1] = 3;
 app_command_buf[2] = 3;
 break;

 case  3 :
 app_command_buf[1] = 2;
 app_command_buf[2] = 20;
 break;

 case  4 :
 app_command_buf[1] = 2;
 app_command_buf[2] = 2;
 break;
 }

 app_command_buf[3] = 0x21;
 app_command_buf[4] = 0x20;
 app_command_buf[5] = 0x27;
 app_command_buf[6] = 0x0b;
 vRf4463SPIWriteBuffer(7, app_command_buf);
}
