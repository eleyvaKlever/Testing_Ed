;  LST file generated by mikroListExporter - v.2.0 
; Date/Time: 28/01/2021 08:33:56 p. m.
;----------------------------------------------

;Address Opcode 	ASM
____SysVT:
0x0000	0xFFFC2000  	536936444
0x0004	0x24290000  	9257
0x0008	0x27650000  	10085
0x000C	0x27650000  	10085
0x0010	0x27650000  	10085
0x0014	0x27650000  	10085
0x0018	0x27650000  	10085
0x001C	0x27650000  	10085
0x0020	0x27650000  	10085
0x0024	0x27650000  	10085
0x0028	0x27650000  	10085
0x002C	0x27650000  	10085
0x0030	0x27650000  	10085
0x0034	0x27650000  	10085
0x0038	0x27650000  	10085
0x003C	0x27650000  	10085
0x0040	0x27650000  	10085
0x0044	0x27650000  	10085
0x0048	0x27650000  	10085
0x004C	0x27650000  	10085
0x0050	0x27650000  	10085
0x0054	0x27650000  	10085
0x0058	0x27650000  	10085
0x005C	0x27650000  	10085
0x0060	0x27650000  	10085
0x0064	0x27650000  	10085
0x0068	0x27650000  	10085
0x006C	0x27650000  	10085
0x0070	0x27650000  	10085
0x0074	0x27650000  	10085
0x0078	0x27650000  	10085
0x007C	0x27650000  	10085
0x0080	0x27650000  	10085
0x0084	0x27650000  	10085
0x0088	0x27650000  	10085
0x008C	0x27650000  	10085
0x0090	0x27650000  	10085
0x0094	0x27650000  	10085
0x0098	0x27650000  	10085
0x009C	0x27650000  	10085
0x00A0	0x27650000  	10085
0x00A4	0x27650000  	10085
0x00A8	0x27650000  	10085
0x00AC	0x27650000  	10085
0x00B0	0x21E50000  	8677
0x00B4	0x27650000  	10085
0x00B8	0x27650000  	10085
0x00BC	0x27650000  	10085
0x00C0	0x27650000  	10085
0x00C4	0x27650000  	10085
0x00C8	0x27650000  	10085
0x00CC	0x27650000  	10085
0x00D0	0x22450000  	8773
0x00D4	0x21390000  	8505
0x00D8	0x27650000  	10085
0x00DC	0x27650000  	10085
0x00E0	0x22750000  	8821
0x00E4	0x27650000  	10085
0x00E8	0x27650000  	10085
0x00EC	0x27650000  	10085
0x00F0	0x27650000  	10085
0x00F4	0x27650000  	10085
0x00F8	0x27650000  	10085
0x00FC	0x27650000  	10085
0x0100	0x27650000  	10085
0x0104	0x27650000  	10085
0x0108	0x27650000  	10085
0x010C	0x27650000  	10085
0x0110	0x27650000  	10085
0x0114	0x27650000  	10085
0x0118	0x27650000  	10085
0x011C	0x27650000  	10085
0x0120	0x27650000  	10085
0x0124	0x27650000  	10085
0x0128	0x27650000  	10085
0x012C	0x27650000  	10085
0x0130	0x27650000  	10085
0x0134	0x27650000  	10085
0x0138	0x27650000  	10085
0x013C	0x27650000  	10085
0x0140	0x27650000  	10085
0x0144	0x27650000  	10085
0x0148	0x27650000  	10085
0x014C	0x27650000  	10085
; end of ____SysVT
_main:
;DriverRF4463PROMain.c, 122 :: 		void main() {
0x2428	0xB08E    SUB	SP, SP, #56
0x242A	0xF7FFFF4F  BL	8908
0x242E	0xF000FF3D  BL	12972
0x2432	0xF000F99B  BL	10092
0x2436	0xF000FEF9  BL	12844
;DriverRF4463PROMain.c, 128 :: 		Delay_ms( 2000 );                    // delay de depuracion
0x243A	0xF24357FF  MOVW	R7, #13823
0x243E	0xF2C0176E  MOVT	R7, #366
L_main291:
0x2442	0x1E7F    SUBS	R7, R7, #1
0x2444	0xD1FD    BNE	L_main291
0x2446	0xBF00    NOP
0x2448	0xBF00    NOP
0x244A	0xBF00    NOP
0x244C	0xBF00    NOP
0x244E	0xBF00    NOP
;DriverRF4463PROMain.c, 132 :: 		GPIO_Digital_Output( &GPIOC_BASE, _GPIO_PINMASK_6 );
0x2450	0xF2400140  MOVW	R1, #64
0x2454	0x48A4    LDR	R0, [PC, #656]
0x2456	0xF7FEFEBF  BL	_GPIO_Digital_Output+0
;DriverRF4463PROMain.c, 133 :: 		GPIO_Digital_Output( &GPIOC_BASE, _GPIO_PINMASK_7 );
0x245A	0xF2400180  MOVW	R1, #128
0x245E	0x48A2    LDR	R0, [PC, #648]
0x2460	0xF7FEFEBA  BL	_GPIO_Digital_Output+0
;DriverRF4463PROMain.c, 134 :: 		GPIO_Digital_Output( &GPIOC_BASE, _GPIO_PINMASK_8 );
0x2464	0xF2401100  MOVW	R1, #256
0x2468	0x489F    LDR	R0, [PC, #636]
0x246A	0xF7FEFEB5  BL	_GPIO_Digital_Output+0
;DriverRF4463PROMain.c, 140 :: 		GPIO_Digital_Input( &GPIOC_BASE, _GPIO_PINMASK_12 );
0x246E	0xF2410100  MOVW	R1, #4096
0x2472	0x489D    LDR	R0, [PC, #628]
0x2474	0xF7FEFEA4  BL	_GPIO_Digital_Input+0
;DriverRF4463PROMain.c, 142 :: 		GPIO_Digital_Output( &GPIOB_BASE, _GPIO_PINMASK_12 );
0x2478	0xF2410100  MOVW	R1, #4096
0x247C	0x489B    LDR	R0, [PC, #620]
0x247E	0xF7FEFEAB  BL	_GPIO_Digital_Output+0
;DriverRF4463PROMain.c, 143 :: 		GPIO_Digital_Output( &GPIOB_BASE, _GPIO_PINMASK_11 );
0x2482	0xF6400100  MOVW	R1, #2048
0x2486	0x4899    LDR	R0, [PC, #612]
0x2488	0xF7FEFEA6  BL	_GPIO_Digital_Output+0
;DriverRF4463PROMain.c, 144 :: 		GPIO_Digital_Output( &GPIOC_BASE, _GPIO_PINMASK_11 );
0x248C	0xF6400100  MOVW	R1, #2048
0x2490	0x4895    LDR	R0, [PC, #596]
0x2492	0xF7FEFEA1  BL	_GPIO_Digital_Output+0
;DriverRF4463PROMain.c, 145 :: 		GPIO_Digital_Output( &GPIOC_BASE, _GPIO_PINMASK_10 );
0x2496	0xF2404100  MOVW	R1, #1024
0x249A	0x4893    LDR	R0, [PC, #588]
0x249C	0xF7FEFE9C  BL	_GPIO_Digital_Output+0
;DriverRF4463PROMain.c, 150 :: 		RCC_APB2ENRbits.AFIOEN = 1;
0x24A0	0x2101    MOVS	R1, #1
0x24A2	0xB249    SXTB	R1, R1
0x24A4	0x4892    LDR	R0, [PC, #584]
0x24A6	0x6001    STR	R1, [R0, #0]
;DriverRF4463PROMain.c, 154 :: 		AFIO_EXTICR4  |= 0x0002;
0x24A8	0x4892    LDR	R0, [PC, #584]
0x24AA	0x6800    LDR	R0, [R0, #0]
0x24AC	0xF0400102  ORR	R1, R0, #2
0x24B0	0x4890    LDR	R0, [PC, #576]
0x24B2	0x6001    STR	R1, [R0, #0]
;DriverRF4463PROMain.c, 158 :: 		EXTI_IMR.B12    |= 1;
0x24B4	0x2101    MOVS	R1, #1
0x24B6	0x4890    LDR	R0, [PC, #576]
0x24B8	0x6001    STR	R1, [R0, #0]
;DriverRF4463PROMain.c, 159 :: 		EXTI_FTSR.B12   |= 1;
0x24BA	0x2101    MOVS	R1, #1
0x24BC	0x488F    LDR	R0, [PC, #572]
0x24BE	0x6001    STR	R1, [R0, #0]
;DriverRF4463PROMain.c, 161 :: 		GPIO_Digital_Output( &GPIOB_BASE, _GPIO_PINMASK_7 );
0x24C0	0xF2400180  MOVW	R1, #128
0x24C4	0x4889    LDR	R0, [PC, #548]
0x24C6	0xF7FEFE87  BL	_GPIO_Digital_Output+0
;DriverRF4463PROMain.c, 162 :: 		Sound_Init( &GPIOB_ODR, 7 );
0x24CA	0x2107    MOVS	R1, #7
0x24CC	0x488C    LDR	R0, [PC, #560]
0x24CE	0xF7FEFE4D  BL	_Sound_Init+0
;DriverRF4463PROMain.c, 163 :: 		Sound_Play( 1000, 100 );
0x24D2	0x2164    MOVS	R1, #100
0x24D4	0xF24030E8  MOVW	R0, #1000
0x24D8	0xF7FFFD7E  BL	_Sound_Play+0
;DriverRF4463PROMain.c, 165 :: 		nSEL = 1;
0x24DC	0x2101    MOVS	R1, #1
0x24DE	0xB249    SXTB	R1, R1
0x24E0	0x4888    LDR	R0, [PC, #544]
0x24E2	0x6001    STR	R1, [R0, #0]
;DriverRF4463PROMain.c, 167 :: 		LED_RED      = 1;
0x24E4	0x4888    LDR	R0, [PC, #544]
0x24E6	0x6001    STR	R1, [R0, #0]
;DriverRF4463PROMain.c, 168 :: 		LED_GREEN    = 1;
0x24E8	0x4888    LDR	R0, [PC, #544]
0x24EA	0x6001    STR	R1, [R0, #0]
;DriverRF4463PROMain.c, 169 :: 		LED_BLUE     = 1;
0x24EC	0x4888    LDR	R0, [PC, #544]
0x24EE	0x6001    STR	R1, [R0, #0]
;DriverRF4463PROMain.c, 171 :: 		Delay_ms( 100 );
0x24F0	0xF644777F  MOVW	R7, #20351
0x24F4	0xF2C00712  MOVT	R7, #18
L_main293:
0x24F8	0x1E7F    SUBS	R7, R7, #1
0x24FA	0xD1FD    BNE	L_main293
0x24FC	0xBF00    NOP
0x24FE	0xBF00    NOP
0x2500	0xBF00    NOP
0x2502	0xBF00    NOP
0x2504	0xBF00    NOP
;DriverRF4463PROMain.c, 173 :: 		LED_RED      = 0;
0x2506	0x2200    MOVS	R2, #0
0x2508	0xB252    SXTB	R2, R2
0x250A	0x487F    LDR	R0, [PC, #508]
0x250C	0x6002    STR	R2, [R0, #0]
;DriverRF4463PROMain.c, 174 :: 		LED_GREEN    = 1;
0x250E	0x2101    MOVS	R1, #1
0x2510	0xB249    SXTB	R1, R1
0x2512	0x487E    LDR	R0, [PC, #504]
0x2514	0x6001    STR	R1, [R0, #0]
;DriverRF4463PROMain.c, 175 :: 		LED_BLUE     = 0;
0x2516	0x487E    LDR	R0, [PC, #504]
0x2518	0x6002    STR	R2, [R0, #0]
;DriverRF4463PROMain.c, 177 :: 		InitTimer2();
0x251A	0xF7FFFDB1  BL	_InitTimer2+0
;DriverRF4463PROMain.c, 180 :: 		vUARTTxInit();                // configura todos las parametros de USART
0x251E	0xF7FFF809  BL	_vUARTTxInit+0
;DriverRF4463PROMain.c, 181 :: 		vSPI2Init();                  // configura todos los parametros de SPI
0x2522	0xF7FFFCDF  BL	_vSPI2Init+0
;DriverRF4463PROMain.c, 186 :: 		freq3 = 9;
0x2526	0x2109    MOVS	R1, #9
0x2528	0x487A    LDR	R0, [PC, #488]
0x252A	0x7001    STRB	R1, [R0, #0]
;DriverRF4463PROMain.c, 187 :: 		freq2 = 1;
0x252C	0x2101    MOVS	R1, #1
0x252E	0x487A    LDR	R0, [PC, #488]
0x2530	0x7001    STRB	R1, [R0, #0]
;DriverRF4463PROMain.c, 188 :: 		freq1 = 5;
0x2532	0x2105    MOVS	R1, #5
0x2534	0x4879    LDR	R0, [PC, #484]
0x2536	0x7001    STRB	R1, [R0, #0]
;DriverRF4463PROMain.c, 191 :: 		power = 127;
0x2538	0x217F    MOVS	R1, #127
0x253A	0x4879    LDR	R0, [PC, #484]
0x253C	0x7001    STRB	R1, [R0, #0]
;DriverRF4463PROMain.c, 193 :: 		rate  = dr_4p8;
0x253E	0x2102    MOVS	R1, #2
0x2540	0x4878    LDR	R0, [PC, #480]
0x2542	0x7001    STRB	R1, [R0, #0]
;DriverRF4463PROMain.c, 195 :: 		mode  = slave_mode;          // para transmision continua usar: tx_test_mode
0x2544	0x2101    MOVS	R1, #1
0x2546	0x4878    LDR	R0, [PC, #480]
0x2548	0x7001    STRB	R1, [R0, #0]
;DriverRF4463PROMain.c, 197 :: 		reset_mode = 0;
0x254A	0x2100    MOVS	R1, #0
0x254C	0x4877    LDR	R0, [PC, #476]
0x254E	0x7001    STRB	R1, [R0, #0]
;DriverRF4463PROMain.c, 201 :: 		VRF4463SDNReset();
0x2550	0xF7FFFC86  BL	_VRF4463SDNReset+0
;DriverRF4463PROMain.c, 202 :: 		vRF4463Init();
0x2554	0xF7FFF816  BL	_vRF4463Init+0
;DriverRF4463PROMain.c, 203 :: 		vRF4463ClearInterrupts();
0x2558	0xF7FEFFD0  BL	_vRF4463ClearInterrupts+0
;DriverRF4463PROMain.c, 204 :: 		vRF4463PartInfo ();
0x255C	0xF7FFF800  BL	_vRF4463PartInfo+0
;DriverRF4463PROMain.c, 206 :: 		LED_GREEN    = 0;
0x2560	0x2100    MOVS	R1, #0
0x2562	0xB249    SXTB	R1, R1
0x2564	0x4869    LDR	R0, [PC, #420]
0x2566	0x6001    STR	R1, [R0, #0]
;DriverRF4463PROMain.c, 207 :: 		LED_BLUE     = 0;
0x2568	0x4869    LDR	R0, [PC, #420]
0x256A	0x6001    STR	R1, [R0, #0]
;DriverRF4463PROMain.c, 209 :: 		UART1_Write_Text( "RF Radio ready" );
0x256C	0xF10D0B05  ADD	R11, SP, #5
0x2570	0xF10B0A0F  ADD	R10, R11, #15
0x2574	0xF8DFC1B8  LDR	R12, [PC, #440]
0x2578	0xF7FEFE5A  BL	___CC2DW+0
0x257C	0xF10D0005  ADD	R0, SP, #5
0x2580	0xF7FFFD70  BL	_UART1_Write_Text+0
;DriverRF4463PROMain.c, 211 :: 		while ( 1 ) {
L_main295:
;DriverRF4463PROMain.c, 213 :: 		if ( ucRF4463IRQ ) {
0x2584	0x486B    LDR	R0, [PC, #428]
0x2586	0x7800    LDRB	R0, [R0, #0]
0x2588	0xB148    CBZ	R0, L_main297
;DriverRF4463PROMain.c, 214 :: 		ucRF4463IRQ = 0;       // limpia bandera
0x258A	0x2100    MOVS	R1, #0
0x258C	0x4869    LDR	R0, [PC, #420]
0x258E	0x7001    STRB	R1, [R0, #0]
;DriverRF4463PROMain.c, 215 :: 		spi_read_fifo();       // Read RX FIFO
0x2590	0xF7FFFDA2  BL	_spi_read_fifo+0
;DriverRF4463PROMain.c, 216 :: 		vRF4463FifoReset();    // FIFO RESET
0x2594	0xF7FFFCC0  BL	_vRF4463FifoReset+0
;DriverRF4463PROMain.c, 217 :: 		UART1_Write_Text( spi_read_buf );
0x2598	0x4867    LDR	R0, [PC, #412]
0x259A	0xF7FFFD63  BL	_UART1_Write_Text+0
;DriverRF4463PROMain.c, 218 :: 		}
L_main297:
;DriverRF4463PROMain.c, 221 :: 		if ( mode == master_mode ) {
0x259E	0x4862    LDR	R0, [PC, #392]
0x25A0	0x7800    LDRB	R0, [R0, #0]
0x25A2	0xB910    CBNZ	R0, L_main298
;DriverRF4463PROMain.c, 222 :: 		vRF4463TxData();
0x25A4	0xF7FFFCCA  BL	_vRF4463TxData+0
;DriverRF4463PROMain.c, 223 :: 		}
0x25A8	0xE005    B	L_main299
L_main298:
;DriverRF4463PROMain.c, 225 :: 		else if ( mode == slave_mode ) {
0x25AA	0x485F    LDR	R0, [PC, #380]
0x25AC	0x7800    LDRB	R0, [R0, #0]
0x25AE	0x2801    CMP	R0, #1
0x25B0	0xD101    BNE	L_main300
;DriverRF4463PROMain.c, 226 :: 		vRF4463RxInit();
0x25B2	0xF7FEF9E7  BL	_vRF4463RxInit+0
;DriverRF4463PROMain.c, 227 :: 		}
L_main300:
L_main299:
;DriverRF4463PROMain.c, 229 :: 		if ( mode == tx_test_mode ) {
0x25B6	0x485C    LDR	R0, [PC, #368]
0x25B8	0x7800    LDRB	R0, [R0, #0]
0x25BA	0x2802    CMP	R0, #2
0x25BC	0xD108    BNE	L_main301
;DriverRF4463PROMain.c, 230 :: 		vRF4463TxCont();
0x25BE	0xF7FEFDA7  BL	_vRF4463TxCont+0
;DriverRF4463PROMain.c, 231 :: 		while ( 1 ) {
L_main302:
;DriverRF4463PROMain.c, 232 :: 		if ( !nIRQ ) {
0x25C2	0x485E    LDR	R0, [PC, #376]
0x25C4	0x6800    LDR	R0, [R0, #0]
0x25C6	0x2800    CMP	R0, #0
0x25C8	0xD101    BNE	L_main304
;DriverRF4463PROMain.c, 233 :: 		vRF4463TxCont();
0x25CA	0xF7FEFDA1  BL	_vRF4463TxCont+0
;DriverRF4463PROMain.c, 234 :: 		}
L_main304:
;DriverRF4463PROMain.c, 235 :: 		}
0x25CE	0xE7F8    B	L_main302
;DriverRF4463PROMain.c, 236 :: 		}
L_main301:
;DriverRF4463PROMain.c, 238 :: 		if ( mode == rx_test_mode ) {
0x25D0	0x4855    LDR	R0, [PC, #340]
0x25D2	0x7800    LDRB	R0, [R0, #0]
0x25D4	0x2803    CMP	R0, #3
0x25D6	0xD102    BNE	L_main305
;DriverRF4463PROMain.c, 239 :: 		vRF4463RxInit ();
0x25D8	0xF7FEF9D4  BL	_vRF4463RxInit+0
;DriverRF4463PROMain.c, 240 :: 		while ( 1 ) {
L_main306:
;DriverRF4463PROMain.c, 242 :: 		}
0x25DC	0xE7FE    B	L_main306
;DriverRF4463PROMain.c, 243 :: 		}
L_main305:
;DriverRF4463PROMain.c, 245 :: 		if ( reset_mode == 0 ) {
0x25DE	0x4853    LDR	R0, [PC, #332]
0x25E0	0x7800    LDRB	R0, [R0, #0]
0x25E2	0x2800    CMP	R0, #0
0x25E4	0xF040807D  BNE	L_main308
;DriverRF4463PROMain.c, 247 :: 		while ( 1 ) {
L_main309:
;DriverRF4463PROMain.c, 249 :: 		if ( Flag.reach_1s ) {
0x25E8	0x4955    LDR	R1, [PC, #340]
0x25EA	0x6808    LDR	R0, [R1, #0]
0x25EC	0xB140    CBZ	R0, L_main311
;DriverRF4463PROMain.c, 250 :: 		Flag.reach_1s = 0;
0x25EE	0x2100    MOVS	R1, #0
0x25F0	0xB249    SXTB	R1, R1
0x25F2	0x4853    LDR	R0, [PC, #332]
0x25F4	0x6001    STR	R1, [R0, #0]
;DriverRF4463PROMain.c, 251 :: 		if ( mode == master_mode ) {
0x25F6	0x484C    LDR	R0, [PC, #304]
0x25F8	0x7800    LDRB	R0, [R0, #0]
0x25FA	0xB908    CBNZ	R0, L_main312
;DriverRF4463PROMain.c, 252 :: 		vRF4463TxData();
0x25FC	0xF7FFFC9E  BL	_vRF4463TxData+0
;DriverRF4463PROMain.c, 253 :: 		}
L_main312:
;DriverRF4463PROMain.c, 255 :: 		}
L_main311:
;DriverRF4463PROMain.c, 259 :: 		if ( !nIRQ ) {          // !nIRQ
0x2600	0x484E    LDR	R0, [PC, #312]
0x2602	0x6800    LDR	R0, [R0, #0]
0x2604	0x2800    CMP	R0, #0
0x2606	0xF040806B  BNE	L_main313
;DriverRF4463PROMain.c, 260 :: 		spi_read(9,0x22);  // aqui hay que leer  el RSSI
0x260A	0x2122    MOVS	R1, #34
0x260C	0x2009    MOVS	R0, #9
0x260E	0xF7FEFA6B  BL	_spi_read+0
;DriverRF4463PROMain.c, 261 :: 		iVal = ( float ) spi_read_buf[3];
0x2612	0x484C    LDR	R0, [PC, #304]
0x2614	0x7800    LDRB	R0, [R0, #0]
0x2616	0xF7FEFE87  BL	__UnsignedIntegralToFloat+0
;DriverRF4463PROMain.c, 262 :: 		rssi = ((iVal / 2) - 64) -70;
0x261A	0xF04F4280  MOV	R2, #1073741824
0x261E	0xF7FEFE99  BL	__Div_FP+0
0x2622	0xF04F4285  MOV	R2, #1115684864
0x2626	0xF7FEFEE7  BL	__Sub_FP+0
0x262A	0x4A47    LDR	R2, [PC, #284]
0x262C	0xF7FEFEE4  BL	__Sub_FP+0
0x2630	0x4946    LDR	R1, [PC, #280]
0x2632	0x6008    STR	R0, [R1, #0]
;DriverRF4463PROMain.c, 263 :: 		vRF4463ClearInterrupts();
0x2634	0xF7FEFF62  BL	_vRF4463ClearInterrupts+0
;DriverRF4463PROMain.c, 264 :: 		if ( ( spi_read_buf[ 4 ] & 0x08) == 0 ) { // crc error check
0x2638	0x4845    LDR	R0, [PC, #276]
0x263A	0x7800    LDRB	R0, [R0, #0]
0x263C	0xF0000008  AND	R0, R0, #8
0x2640	0xB2C0    UXTB	R0, R0
0x2642	0x2800    CMP	R0, #0
0x2644	0xD13A    BNE	L_main314
;DriverRF4463PROMain.c, 265 :: 		spi_read_fifo();
0x2646	0xF7FFFD47  BL	_spi_read_fifo+0
;DriverRF4463PROMain.c, 266 :: 		vRF4463FifoReset();
0x264A	0xF7FFFC65  BL	_vRF4463FifoReset+0
;DriverRF4463PROMain.c, 269 :: 		for ( i = 4; i < payload_length - 1; i++ )                // Calculation Checksum
0x264E	0x2004    MOVS	R0, #4
0x2650	0xF88D0004  STRB	R0, [SP, #4]
L_main315:
0x2654	0xF89D0004  LDRB	R0, [SP, #4]
0x2658	0x2841    CMP	R0, #65
0x265A	0xDA05    BGE	L_main316
0x265C	0xF89D0004  LDRB	R0, [SP, #4]
0x2660	0x1C40    ADDS	R0, R0, #1
0x2662	0xF88D0004  STRB	R0, [SP, #4]
;DriverRF4463PROMain.c, 270 :: 		chksum += rx_buf[ i ];
0x2666	0xE7F5    B	L_main315
L_main316:
;DriverRF4463PROMain.c, 273 :: 		UART1_Write_Text("[ MENSAGGE ] = ");
0x2668	0xF10D0B14  ADD	R11, SP, #20
0x266C	0xF10B0A10  ADD	R10, R11, #16
0x2670	0xF8DFC0E0  LDR	R12, [PC, #224]
0x2674	0xF7FEFDDC  BL	___CC2DW+0
0x2678	0xA805    ADD	R0, SP, #20
0x267A	0xF7FFFCF3  BL	_UART1_Write_Text+0
;DriverRF4463PROMain.c, 274 :: 		UART1_Write_Text( rx_buf );
0x267E	0x4836    LDR	R0, [PC, #216]
0x2680	0xF7FFFCF0  BL	_UART1_Write_Text+0
;DriverRF4463PROMain.c, 275 :: 		UART1_Write_Text("\r\n");
0x2684	0x200D    MOVS	R0, #13
0x2686	0xF88D0024  STRB	R0, [SP, #36]
0x268A	0x200A    MOVS	R0, #10
0x268C	0xF88D0025  STRB	R0, [SP, #37]
0x2690	0x2000    MOVS	R0, #0
0x2692	0xF88D0026  STRB	R0, [SP, #38]
0x2696	0xA809    ADD	R0, SP, #36
0x2698	0xF7FFFCE4  BL	_UART1_Write_Text+0
;DriverRF4463PROMain.c, 276 :: 		LED_GREEN ^= 1;                                        // Data received
0x269C	0x481B    LDR	R0, [PC, #108]
0x269E	0x6800    LDR	R0, [R0, #0]
0x26A0	0xF0800101  EOR	R1, R0, #1
0x26A4	0xB2C9    UXTB	R1, R1
0x26A6	0x4819    LDR	R0, [PC, #100]
0x26A8	0x6001    STR	R1, [R0, #0]
;DriverRF4463PROMain.c, 277 :: 		rx_cnt++;
0x26AA	0x492C    LDR	R1, [PC, #176]
0x26AC	0x6808    LDR	R0, [R1, #0]
0x26AE	0x1C40    ADDS	R0, R0, #1
0x26B0	0x6008    STR	R0, [R1, #0]
;DriverRF4463PROMain.c, 278 :: 		getRSSI();
0x26B2	0xF7FEFDFD  BL	_getRSSI+0
;DriverRF4463PROMain.c, 281 :: 		vRF4463RxInit();    // The received data is wrong, you must continue to receive
0x26B6	0xF7FEF965  BL	_vRF4463RxInit+0
;DriverRF4463PROMain.c, 282 :: 		}
0x26BA	0xE011    B	L_main318
L_main314:
;DriverRF4463PROMain.c, 285 :: 		UART1_Write_Text("[ CRC ] Fail\r\n" );
0x26BC	0xF10D0B27  ADD	R11, SP, #39
0x26C0	0xF10B0A0F  ADD	R10, R11, #15
0x26C4	0xF8DFC098  LDR	R12, [PC, #152]
0x26C8	0xF7FEFDB2  BL	___CC2DW+0
0x26CC	0xF10D0027  ADD	R0, SP, #39
0x26D0	0xF7FFFCC8  BL	_UART1_Write_Text+0
;DriverRF4463PROMain.c, 286 :: 		VRF4463SDNReset();
0x26D4	0xF7FFFBC4  BL	_VRF4463SDNReset+0
;DriverRF4463PROMain.c, 287 :: 		vRF4463Init();
0x26D8	0xF7FEFF54  BL	_vRF4463Init+0
;DriverRF4463PROMain.c, 288 :: 		vRF4463RxInit();
0x26DC	0xF7FEF952  BL	_vRF4463RxInit+0
;DriverRF4463PROMain.c, 289 :: 		}
L_main318:
;DriverRF4463PROMain.c, 290 :: 		}
L_main313:
;DriverRF4463PROMain.c, 292 :: 		}
0x26E0	0xE782    B	L_main309
;DriverRF4463PROMain.c, 293 :: 		}
L_main308:
;DriverRF4463PROMain.c, 294 :: 		}
0x26E2	0xE74F    B	L_main295
;DriverRF4463PROMain.c, 295 :: 		}void getRSSI()
L_end_main:
L__main_end_loop:
0x26E4	0xE7FE    B	L__main_end_loop
0x26E6	0xBF00    NOP
0x26E8	0x10004001  	GPIOC_BASE+0
0x26EC	0x0C004001  	GPIOB_BASE+0
0x26F0	0x03004242  	RCC_APB2ENRbits+0
0x26F4	0x00144001  	AFIO_EXTICR4+0
0x26F8	0x80304220  	EXTI_IMR+0
0x26FC	0x81B04220  	EXTI_FTSR+0
0x2700	0x0C0C4001  	GPIOB_ODR+0
0x2704	0x81B04221  	GPIOB_ODRbits+0
0x2708	0x01984222  	GPIOC_ODRbits+0
0x270C	0x019C4222  	GPIOC_ODRbits+0
0x2710	0x01A04222  	GPIOC_ODRbits+0
0x2714	0x019C2000  	_freq3+0
0x2718	0x019F2000  	_freq2+0
0x271C	0x01A02000  	_freq1+0
0x2720	0x019E2000  	_power+0
0x2724	0x01572000  	_rate+0
0x2728	0x019D2000  	_mode+0
0x272C	0x01A12000  	_reset_mode+0
0x2730	0x318D0000  	?ICS?lstr30_DriverRF4463PROMain+0
0x2734	0x00A72000  	DriverRF4463PROMain_ucRF4463IRQ+0
0x2738	0x01422000  	_spi_read_buf+0
0x273C	0x01304222  	GPIOC_IDRbits+0
0x2740	0x2AC02200  	_Flag+0
0x2744	0x01452000  	_spi_read_buf+3
0x2748	0x0000428C  	#1116471296
0x274C	0x01A42000  	_rssi+0
0x2750	0x01462000  	_spi_read_buf+4
0x2754	0x319C0000  	?ICS?lstr31_DriverRF4463PROMain+0
0x2758	0x015A2000  	_rx_buf+0
0x275C	0x013C2000  	_rx_cnt+0
0x2760	0x31AF0000  	?ICS?lstr33_DriverRF4463PROMain+0
; end of _main
___CC2DW:
;__Lib_System_105_107.c, 28 :: 		
0x1230	0xB081    SUB	SP, SP, #4
;__Lib_System_105_107.c, 30 :: 		
L_loopDW:
;__Lib_System_105_107.c, 31 :: 		
0x1232	0xF81C9B01  LDRB	R9, [R12], #1
;__Lib_System_105_107.c, 32 :: 		
0x1236	0xF80B9B01  STRB	R9, [R11], #1
;__Lib_System_105_107.c, 33 :: 		
0x123A	0xEBBB0F0A  CMP	R11, R10, LSL #0
;__Lib_System_105_107.c, 34 :: 		
0x123E	0xD1F8    BNE	L_loopDW
;__Lib_System_105_107.c, 36 :: 		
L_end___CC2DW:
0x1240	0xB001    ADD	SP, SP, #4
0x1242	0x4770    BX	LR
; end of ___CC2DW
___FillZeros:
;__Lib_System_105_107.c, 70 :: 		
0x11F4	0xB081    SUB	SP, SP, #4
;__Lib_System_105_107.c, 72 :: 		
0x11F6	0xF04F0900  MOV	R9, #0
;__Lib_System_105_107.c, 73 :: 		
0x11FA	0xF04F0C00  MOV	R12, #0
;__Lib_System_105_107.c, 74 :: 		
0x11FE	0xEBBD0F0A  CMP	SP, R10, LSL #0
;__Lib_System_105_107.c, 75 :: 		
0x1202	0xDC04    BGT	L_loopFZs
;__Lib_System_105_107.c, 76 :: 		
0x1204	0xEBBD0F0B  CMP	SP, R11, LSL #0
;__Lib_System_105_107.c, 77 :: 		
0x1208	0xDB01    BLT	L_loopFZs
;__Lib_System_105_107.c, 78 :: 		
0x120A	0x46D4    MOV	R12, R10
;__Lib_System_105_107.c, 79 :: 		
0x120C	0x46EA    MOV	R10, SP
;__Lib_System_105_107.c, 80 :: 		
L_loopFZs:
;__Lib_System_105_107.c, 81 :: 		
0x120E	0xF84B9B04  STR	R9, [R11], #4
;__Lib_System_105_107.c, 82 :: 		
0x1212	0xEBBB0F0A  CMP	R11, R10, LSL #0
;__Lib_System_105_107.c, 83 :: 		
0x1216	0xD1FA    BNE	L_loopFZs
;__Lib_System_105_107.c, 84 :: 		
0x1218	0xEBBC0F0A  CMP	R12, R10, LSL #0
;__Lib_System_105_107.c, 85 :: 		
0x121C	0xDD05    BLE	L_norep
;__Lib_System_105_107.c, 86 :: 		
0x121E	0x46E2    MOV	R10, R12
;__Lib_System_105_107.c, 87 :: 		
0x1220	0xF8D9B000  LDR	R11, [R9, #0]
;__Lib_System_105_107.c, 88 :: 		
0x1224	0xF10B0B04  ADD	R11, R11, #4
;__Lib_System_105_107.c, 89 :: 		
0x1228	0xE7F1    B	L_loopFZs
;__Lib_System_105_107.c, 90 :: 		
L_norep:
;__Lib_System_105_107.c, 92 :: 		
L_end___FillZeros:
0x122A	0xB001    ADD	SP, SP, #4
0x122C	0x4770    BX	LR
; end of ___FillZeros
_GPIO_Digital_Output:
;__Lib_GPIO_32F10x.c, 365 :: 		
; pin_mask start address is: 4 (R1)
; port start address is: 0 (R0)
0x11D8	0xB081    SUB	SP, SP, #4
0x11DA	0xF8CDE000  STR	LR, [SP, #0]
; pin_mask end address is: 4 (R1)
; port end address is: 0 (R0)
; port start address is: 0 (R0)
; pin_mask start address is: 4 (R1)
;__Lib_GPIO_32F10x.c, 366 :: 		
0x11DE	0x4A04    LDR	R2, [PC, #16]
0x11E0	0xB289    UXTH	R1, R1
; pin_mask end address is: 4 (R1)
; port end address is: 0 (R0)
0x11E2	0xF7FFFE1D  BL	_GPIO_Config+0
;__Lib_GPIO_32F10x.c, 367 :: 		
L_end_GPIO_Digital_Output:
0x11E6	0xF8DDE000  LDR	LR, [SP, #0]
0x11EA	0xB001    ADD	SP, SP, #4
0x11EC	0x4770    BX	LR
0x11EE	0xBF00    NOP
0x11F0	0x00140008  	#524308
; end of _GPIO_Digital_Output
_GPIO_Config:
;__Lib_GPIO_32F10x.c, 124 :: 		
; config start address is: 8 (R2)
; pin_mask start address is: 4 (R1)
; port start address is: 0 (R0)
0x0E20	0xB081    SUB	SP, SP, #4
0x0E22	0xF8CDE000  STR	LR, [SP, #0]
0x0E26	0xB28C    UXTH	R4, R1
0x0E28	0x4615    MOV	R5, R2
; config end address is: 8 (R2)
; pin_mask end address is: 4 (R1)
; port end address is: 0 (R0)
; port start address is: 0 (R0)
; pin_mask start address is: 16 (R4)
; config start address is: 20 (R5)
;__Lib_GPIO_32F10x.c, 129 :: 		
0x0E2A	0x4B77    LDR	R3, [PC, #476]
0x0E2C	0xEA000303  AND	R3, R0, R3, LSL #0
; port end address is: 0 (R0)
; port start address is: 24 (R6)
0x0E30	0x461E    MOV	R6, R3
;__Lib_GPIO_32F10x.c, 131 :: 		
0x0E32	0x4618    MOV	R0, R3
0x0E34	0xF7FFFCA8  BL	_GPIO_Clk_Enable+0
;__Lib_GPIO_32F10x.c, 134 :: 		
0x0E38	0xF1B40FFF  CMP	R4, #255
0x0E3C	0xD10C    BNE	L_GPIO_Config18
;__Lib_GPIO_32F10x.c, 135 :: 		
0x0E3E	0x4B73    LDR	R3, [PC, #460]
0x0E40	0x429D    CMP	R5, R3
0x0E42	0xD103    BNE	L_GPIO_Config19
; pin_mask end address is: 16 (R4)
; config end address is: 20 (R5)
;__Lib_GPIO_32F10x.c, 136 :: 		
0x0E44	0xF04F3333  MOV	R3, #858993459
0x0E48	0x6033    STR	R3, [R6, #0]
; port end address is: 24 (R6)
;__Lib_GPIO_32F10x.c, 137 :: 		
0x0E4A	0xE0D9    B	L_end_GPIO_Config
;__Lib_GPIO_32F10x.c, 138 :: 		
L_GPIO_Config19:
;__Lib_GPIO_32F10x.c, 139 :: 		
; port start address is: 24 (R6)
; config start address is: 20 (R5)
; pin_mask start address is: 16 (R4)
0x0E4C	0x2D42    CMP	R5, #66
0x0E4E	0xD103    BNE	L_GPIO_Config20
; pin_mask end address is: 16 (R4)
; config end address is: 20 (R5)
;__Lib_GPIO_32F10x.c, 140 :: 		
0x0E50	0xF04F3344  MOV	R3, #1145324612
0x0E54	0x6033    STR	R3, [R6, #0]
; port end address is: 24 (R6)
;__Lib_GPIO_32F10x.c, 141 :: 		
0x0E56	0xE0D3    B	L_end_GPIO_Config
;__Lib_GPIO_32F10x.c, 142 :: 		
L_GPIO_Config20:
;__Lib_GPIO_32F10x.c, 143 :: 		
; port start address is: 24 (R6)
; config start address is: 20 (R5)
; pin_mask start address is: 16 (R4)
L_GPIO_Config18:
;__Lib_GPIO_32F10x.c, 145 :: 		
0x0E58	0xF64F73FF  MOVW	R3, #65535
0x0E5C	0x429C    CMP	R4, R3
0x0E5E	0xD114    BNE	L_GPIO_Config21
;__Lib_GPIO_32F10x.c, 146 :: 		
0x0E60	0x4B6A    LDR	R3, [PC, #424]
0x0E62	0x429D    CMP	R5, R3
0x0E64	0xD107    BNE	L_GPIO_Config22
; pin_mask end address is: 16 (R4)
; config end address is: 20 (R5)
;__Lib_GPIO_32F10x.c, 147 :: 		
0x0E66	0xF04F3333  MOV	R3, #858993459
0x0E6A	0x6033    STR	R3, [R6, #0]
;__Lib_GPIO_32F10x.c, 148 :: 		
0x0E6C	0x1D34    ADDS	R4, R6, #4
; port end address is: 24 (R6)
0x0E6E	0xF04F3333  MOV	R3, #858993459
0x0E72	0x6023    STR	R3, [R4, #0]
;__Lib_GPIO_32F10x.c, 149 :: 		
0x0E74	0xE0C4    B	L_end_GPIO_Config
;__Lib_GPIO_32F10x.c, 150 :: 		
L_GPIO_Config22:
;__Lib_GPIO_32F10x.c, 151 :: 		
; port start address is: 24 (R6)
; config start address is: 20 (R5)
; pin_mask start address is: 16 (R4)
0x0E76	0x2D42    CMP	R5, #66
0x0E78	0xD107    BNE	L_GPIO_Config23
; pin_mask end address is: 16 (R4)
; config end address is: 20 (R5)
;__Lib_GPIO_32F10x.c, 152 :: 		
0x0E7A	0xF04F3344  MOV	R3, #1145324612
0x0E7E	0x6033    STR	R3, [R6, #0]
;__Lib_GPIO_32F10x.c, 153 :: 		
0x0E80	0x1D34    ADDS	R4, R6, #4
; port end address is: 24 (R6)
0x0E82	0xF04F3344  MOV	R3, #1145324612
0x0E86	0x6023    STR	R3, [R4, #0]
;__Lib_GPIO_32F10x.c, 154 :: 		
0x0E88	0xE0BA    B	L_end_GPIO_Config
;__Lib_GPIO_32F10x.c, 155 :: 		
L_GPIO_Config23:
;__Lib_GPIO_32F10x.c, 156 :: 		
; port start address is: 24 (R6)
; config start address is: 20 (R5)
; pin_mask start address is: 16 (R4)
L_GPIO_Config21:
;__Lib_GPIO_32F10x.c, 158 :: 		
; currentmode start address is: 4 (R1)
0x0E8A	0x2100    MOVS	R1, #0
;__Lib_GPIO_32F10x.c, 159 :: 		
; speed start address is: 0 (R0)
0x0E8C	0x2000    MOVS	R0, #0
;__Lib_GPIO_32F10x.c, 161 :: 		
0x0E8E	0xF0050301  AND	R3, R5, #1
0x0E92	0xB10B    CBZ	R3, L_GPIO_Config24
;__Lib_GPIO_32F10x.c, 162 :: 		
0x0E94	0x2100    MOVS	R1, #0
0x0E96	0xE01D    B	L_GPIO_Config25
L_GPIO_Config24:
;__Lib_GPIO_32F10x.c, 163 :: 		
0x0E98	0xF0050302  AND	R3, R5, #2
0x0E9C	0xB133    CBZ	R3, L_GPIO_Config26
; currentmode end address is: 4 (R1)
;__Lib_GPIO_32F10x.c, 164 :: 		
0x0E9E	0xF40573C0  AND	R3, R5, #384
0x0EA2	0xB10B    CBZ	R3, L_GPIO_Config27
;__Lib_GPIO_32F10x.c, 165 :: 		
; currentmode start address is: 4 (R1)
0x0EA4	0x2108    MOVS	R1, #8
; currentmode end address is: 4 (R1)
0x0EA6	0xE000    B	L_GPIO_Config28
L_GPIO_Config27:
;__Lib_GPIO_32F10x.c, 167 :: 		
; currentmode start address is: 4 (R1)
0x0EA8	0x2104    MOVS	R1, #4
; currentmode end address is: 4 (R1)
L_GPIO_Config28:
;__Lib_GPIO_32F10x.c, 168 :: 		
; currentmode start address is: 4 (R1)
0x0EAA	0xE013    B	L_GPIO_Config29
L_GPIO_Config26:
;__Lib_GPIO_32F10x.c, 169 :: 		
0x0EAC	0xF0050304  AND	R3, R5, #4
0x0EB0	0xB133    CBZ	R3, L_GPIO_Config30
; currentmode end address is: 4 (R1)
;__Lib_GPIO_32F10x.c, 170 :: 		
0x0EB2	0xF0050320  AND	R3, R5, #32
0x0EB6	0xB10B    CBZ	R3, L_GPIO_Config31
;__Lib_GPIO_32F10x.c, 171 :: 		
; currentmode start address is: 4 (R1)
0x0EB8	0x2104    MOVS	R1, #4
; currentmode end address is: 4 (R1)
0x0EBA	0xE000    B	L_GPIO_Config32
L_GPIO_Config31:
;__Lib_GPIO_32F10x.c, 173 :: 		
; currentmode start address is: 4 (R1)
0x0EBC	0x2100    MOVS	R1, #0
; currentmode end address is: 4 (R1)
L_GPIO_Config32:
;__Lib_GPIO_32F10x.c, 174 :: 		
; currentmode start address is: 4 (R1)
0x0EBE	0xE009    B	L_GPIO_Config33
L_GPIO_Config30:
;__Lib_GPIO_32F10x.c, 175 :: 		
0x0EC0	0xF0050308  AND	R3, R5, #8
0x0EC4	0xB133    CBZ	R3, L__GPIO_Config100
; currentmode end address is: 4 (R1)
;__Lib_GPIO_32F10x.c, 176 :: 		
0x0EC6	0xF0050320  AND	R3, R5, #32
0x0ECA	0xB10B    CBZ	R3, L_GPIO_Config35
;__Lib_GPIO_32F10x.c, 177 :: 		
; currentmode start address is: 4 (R1)
0x0ECC	0x210C    MOVS	R1, #12
; currentmode end address is: 4 (R1)
0x0ECE	0xE000    B	L_GPIO_Config36
L_GPIO_Config35:
;__Lib_GPIO_32F10x.c, 179 :: 		
; currentmode start address is: 4 (R1)
0x0ED0	0x2108    MOVS	R1, #8
; currentmode end address is: 4 (R1)
L_GPIO_Config36:
;__Lib_GPIO_32F10x.c, 180 :: 		
; currentmode start address is: 4 (R1)
; currentmode end address is: 4 (R1)
0x0ED2	0xE7FF    B	L_GPIO_Config34
L__GPIO_Config100:
;__Lib_GPIO_32F10x.c, 175 :: 		
;__Lib_GPIO_32F10x.c, 180 :: 		
L_GPIO_Config34:
; currentmode start address is: 4 (R1)
; currentmode end address is: 4 (R1)
L_GPIO_Config33:
; currentmode start address is: 4 (R1)
; currentmode end address is: 4 (R1)
L_GPIO_Config29:
; currentmode start address is: 4 (R1)
; currentmode end address is: 4 (R1)
L_GPIO_Config25:
;__Lib_GPIO_32F10x.c, 182 :: 		
; currentmode start address is: 4 (R1)
0x0ED4	0x4B4E    LDR	R3, [PC, #312]
0x0ED6	0xEA050303  AND	R3, R5, R3, LSL #0
0x0EDA	0xB10B    CBZ	R3, L_GPIO_Config37
;__Lib_GPIO_32F10x.c, 183 :: 		
0x0EDC	0x2003    MOVS	R0, #3
0x0EDE	0xE009    B	L_GPIO_Config38
L_GPIO_Config37:
;__Lib_GPIO_32F10x.c, 184 :: 		
0x0EE0	0xF4057300  AND	R3, R5, #512
0x0EE4	0xB10B    CBZ	R3, L_GPIO_Config39
;__Lib_GPIO_32F10x.c, 185 :: 		
0x0EE6	0x2002    MOVS	R0, #2
0x0EE8	0xE004    B	L_GPIO_Config40
L_GPIO_Config39:
;__Lib_GPIO_32F10x.c, 186 :: 		
0x0EEA	0xF4056380  AND	R3, R5, #1024
0x0EEE	0xB10B    CBZ	R3, L__GPIO_Config101
;__Lib_GPIO_32F10x.c, 187 :: 		
0x0EF0	0x2001    MOVS	R0, #1
; speed end address is: 0 (R0)
0x0EF2	0xE7FF    B	L_GPIO_Config41
L__GPIO_Config101:
;__Lib_GPIO_32F10x.c, 186 :: 		
;__Lib_GPIO_32F10x.c, 187 :: 		
L_GPIO_Config41:
; speed start address is: 0 (R0)
; speed end address is: 0 (R0)
L_GPIO_Config40:
; speed start address is: 0 (R0)
; speed end address is: 0 (R0)
L_GPIO_Config38:
;__Lib_GPIO_32F10x.c, 189 :: 		
; speed start address is: 0 (R0)
;__Lib_GPIO_32F10x.c, 195 :: 		
0x0EF4	0xF005030C  AND	R3, R5, #12
0x0EF8	0xB10B    CBZ	R3, L__GPIO_Config102
;__Lib_GPIO_32F10x.c, 198 :: 		
0x0EFA	0x4301    ORRS	R1, R0
; speed end address is: 0 (R0)
; currentmode end address is: 4 (R1)
;__Lib_GPIO_32F10x.c, 199 :: 		
0x0EFC	0xE7FF    B	L_GPIO_Config42
L__GPIO_Config102:
;__Lib_GPIO_32F10x.c, 195 :: 		
;__Lib_GPIO_32F10x.c, 199 :: 		
L_GPIO_Config42:
;__Lib_GPIO_32F10x.c, 201 :: 		
; currentmode start address is: 4 (R1)
0x0EFE	0xF00403FF  AND	R3, R4, #255
0x0F02	0xB29B    UXTH	R3, R3
0x0F04	0x2B00    CMP	R3, #0
0x0F06	0xD03B    BEQ	L__GPIO_Config104
;__Lib_GPIO_32F10x.c, 202 :: 		
0x0F08	0x6837    LDR	R7, [R6, #0]
; tmpreg start address is: 28 (R7)
;__Lib_GPIO_32F10x.c, 204 :: 		
; pinpos start address is: 0 (R0)
0x0F0A	0x2000    MOVS	R0, #0
; pin_mask end address is: 16 (R4)
; config end address is: 20 (R5)
; currentmode end address is: 4 (R1)
; tmpreg end address is: 28 (R7)
; pinpos end address is: 0 (R0)
; port end address is: 24 (R6)
0x0F0C	0xFA1FF884  UXTH	R8, R4
0x0F10	0x4632    MOV	R2, R6
0x0F12	0x462E    MOV	R6, R5
L_GPIO_Config44:
; pinpos start address is: 0 (R0)
; tmpreg start address is: 28 (R7)
; currentmode start address is: 4 (R1)
; port start address is: 8 (R2)
; config start address is: 24 (R6)
; pin_mask start address is: 32 (R8)
0x0F14	0x2808    CMP	R0, #8
0x0F16	0xD22C    BCS	L_GPIO_Config45
;__Lib_GPIO_32F10x.c, 206 :: 		
0x0F18	0xF04F0301  MOV	R3, #1
0x0F1C	0xFA03F400  LSL	R4, R3, R0
;__Lib_GPIO_32F10x.c, 208 :: 		
0x0F20	0xEA080304  AND	R3, R8, R4, LSL #0
;__Lib_GPIO_32F10x.c, 210 :: 		
0x0F24	0x42A3    CMP	R3, R4
0x0F26	0xD122    BNE	L__GPIO_Config103
;__Lib_GPIO_32F10x.c, 212 :: 		
0x0F28	0x0085    LSLS	R5, R0, #2
;__Lib_GPIO_32F10x.c, 214 :: 		
0x0F2A	0xF04F030F  MOV	R3, #15
0x0F2E	0x40AB    LSLS	R3, R5
;__Lib_GPIO_32F10x.c, 215 :: 		
0x0F30	0x43DB    MVN	R3, R3
0x0F32	0xEA070403  AND	R4, R7, R3, LSL #0
; tmpreg end address is: 28 (R7)
;__Lib_GPIO_32F10x.c, 218 :: 		
0x0F36	0xFA01F305  LSL	R3, R1, R5
0x0F3A	0xEA440303  ORR	R3, R4, R3, LSL #0
; tmpreg start address is: 20 (R5)
0x0F3E	0x461D    MOV	R5, R3
;__Lib_GPIO_32F10x.c, 221 :: 		
0x0F40	0xF4067381  AND	R3, R6, #258
0x0F44	0xF5B37F81  CMP	R3, #258
0x0F48	0xD105    BNE	L_GPIO_Config48
;__Lib_GPIO_32F10x.c, 223 :: 		
0x0F4A	0xF2020414  ADDW	R4, R2, #20
0x0F4E	0xF04F0301  MOV	R3, #1
0x0F52	0x4083    LSLS	R3, R0
0x0F54	0x6023    STR	R3, [R4, #0]
;__Lib_GPIO_32F10x.c, 224 :: 		
L_GPIO_Config48:
;__Lib_GPIO_32F10x.c, 226 :: 		
0x0F56	0xF0060382  AND	R3, R6, #130
0x0F5A	0x2B82    CMP	R3, #130
0x0F5C	0xD105    BNE	L_GPIO_Config49
;__Lib_GPIO_32F10x.c, 228 :: 		
0x0F5E	0xF2020410  ADDW	R4, R2, #16
0x0F62	0xF04F0301  MOV	R3, #1
0x0F66	0x4083    LSLS	R3, R0
0x0F68	0x6023    STR	R3, [R4, #0]
;__Lib_GPIO_32F10x.c, 229 :: 		
L_GPIO_Config49:
;__Lib_GPIO_32F10x.c, 230 :: 		
0x0F6A	0x462F    MOV	R7, R5
0x0F6C	0xE7FF    B	L_GPIO_Config47
; tmpreg end address is: 20 (R5)
L__GPIO_Config103:
;__Lib_GPIO_32F10x.c, 210 :: 		
;__Lib_GPIO_32F10x.c, 230 :: 		
L_GPIO_Config47:
;__Lib_GPIO_32F10x.c, 204 :: 		
; tmpreg start address is: 28 (R7)
0x0F6E	0x1C40    ADDS	R0, R0, #1
;__Lib_GPIO_32F10x.c, 231 :: 		
; pinpos end address is: 0 (R0)
0x0F70	0xE7D0    B	L_GPIO_Config44
L_GPIO_Config45:
;__Lib_GPIO_32F10x.c, 232 :: 		
0x0F72	0x6017    STR	R7, [R2, #0]
; currentmode end address is: 4 (R1)
; port end address is: 8 (R2)
; config end address is: 24 (R6)
; pin_mask end address is: 32 (R8)
; tmpreg end address is: 28 (R7)
0x0F74	0xFA1FF088  UXTH	R0, R8
0x0F78	0x460F    MOV	R7, R1
0x0F7A	0x4631    MOV	R1, R6
0x0F7C	0x4616    MOV	R6, R2
;__Lib_GPIO_32F10x.c, 234 :: 		
0x0F7E	0xE002    B	L_GPIO_Config43
L__GPIO_Config104:
;__Lib_GPIO_32F10x.c, 201 :: 		
0x0F80	0x460F    MOV	R7, R1
0x0F82	0x4629    MOV	R1, R5
0x0F84	0xB2A0    UXTH	R0, R4
;__Lib_GPIO_32F10x.c, 234 :: 		
L_GPIO_Config43:
;__Lib_GPIO_32F10x.c, 238 :: 		
; currentmode start address is: 28 (R7)
; port start address is: 24 (R6)
; config start address is: 4 (R1)
; pin_mask start address is: 0 (R0)
0x0F86	0xF1B00FFF  CMP	R0, #255
0x0F8A	0xD939    BLS	L_GPIO_Config50
;__Lib_GPIO_32F10x.c, 240 :: 		
0x0F8C	0x1D33    ADDS	R3, R6, #4
0x0F8E	0xF8D38000  LDR	R8, [R3, #0]
; tmpreg start address is: 32 (R8)
;__Lib_GPIO_32F10x.c, 241 :: 		
; pinpos start address is: 8 (R2)
0x0F92	0x2200    MOVS	R2, #0
; port end address is: 24 (R6)
; tmpreg end address is: 32 (R8)
; pinpos end address is: 8 (R2)
L_GPIO_Config51:
; pinpos start address is: 8 (R2)
; tmpreg start address is: 32 (R8)
; pin_mask start address is: 0 (R0)
; pin_mask end address is: 0 (R0)
; config start address is: 4 (R1)
; config end address is: 4 (R1)
; port start address is: 24 (R6)
; currentmode start address is: 28 (R7)
; currentmode end address is: 28 (R7)
0x0F94	0x2A08    CMP	R2, #8
0x0F96	0xD230    BCS	L_GPIO_Config52
; pin_mask end address is: 0 (R0)
; config end address is: 4 (R1)
; currentmode end address is: 28 (R7)
;__Lib_GPIO_32F10x.c, 243 :: 		
; currentmode start address is: 28 (R7)
; config start address is: 4 (R1)
; pin_mask start address is: 0 (R0)
0x0F98	0xF2020408  ADDW	R4, R2, #8
0x0F9C	0xF04F0301  MOV	R3, #1
0x0FA0	0xFA03F404  LSL	R4, R3, R4
;__Lib_GPIO_32F10x.c, 245 :: 		
0x0FA4	0xEA000304  AND	R3, R0, R4, LSL #0
;__Lib_GPIO_32F10x.c, 246 :: 		
0x0FA8	0x42A3    CMP	R3, R4
0x0FAA	0xD124    BNE	L__GPIO_Config105
;__Lib_GPIO_32F10x.c, 248 :: 		
0x0FAC	0x0095    LSLS	R5, R2, #2
;__Lib_GPIO_32F10x.c, 250 :: 		
0x0FAE	0xF04F030F  MOV	R3, #15
0x0FB2	0x40AB    LSLS	R3, R5
;__Lib_GPIO_32F10x.c, 251 :: 		
0x0FB4	0x43DB    MVN	R3, R3
0x0FB6	0xEA080803  AND	R8, R8, R3, LSL #0
; tmpreg end address is: 32 (R8)
;__Lib_GPIO_32F10x.c, 254 :: 		
0x0FBA	0xFA07F305  LSL	R3, R7, R5
0x0FBE	0xEA480803  ORR	R8, R8, R3, LSL #0
; tmpreg start address is: 32 (R8)
;__Lib_GPIO_32F10x.c, 257 :: 		
0x0FC2	0xF4017381  AND	R3, R1, #258
0x0FC6	0xF5B37F81  CMP	R3, #258
0x0FCA	0xD107    BNE	L_GPIO_Config55
;__Lib_GPIO_32F10x.c, 259 :: 		
0x0FCC	0xF2060514  ADDW	R5, R6, #20
0x0FD0	0xF2020408  ADDW	R4, R2, #8
0x0FD4	0xF04F0301  MOV	R3, #1
0x0FD8	0x40A3    LSLS	R3, R4
0x0FDA	0x602B    STR	R3, [R5, #0]
;__Lib_GPIO_32F10x.c, 260 :: 		
L_GPIO_Config55:
;__Lib_GPIO_32F10x.c, 262 :: 		
0x0FDC	0xF0010382  AND	R3, R1, #130
0x0FE0	0x2B82    CMP	R3, #130
0x0FE2	0xD107    BNE	L_GPIO_Config56
;__Lib_GPIO_32F10x.c, 264 :: 		
0x0FE4	0xF2060510  ADDW	R5, R6, #16
0x0FE8	0xF2020408  ADDW	R4, R2, #8
0x0FEC	0xF04F0301  MOV	R3, #1
0x0FF0	0x40A3    LSLS	R3, R4
0x0FF2	0x602B    STR	R3, [R5, #0]
;__Lib_GPIO_32F10x.c, 265 :: 		
L_GPIO_Config56:
;__Lib_GPIO_32F10x.c, 266 :: 		
0x0FF4	0xE7FF    B	L_GPIO_Config54
; tmpreg end address is: 32 (R8)
L__GPIO_Config105:
;__Lib_GPIO_32F10x.c, 246 :: 		
;__Lib_GPIO_32F10x.c, 266 :: 		
L_GPIO_Config54:
;__Lib_GPIO_32F10x.c, 241 :: 		
; tmpreg start address is: 32 (R8)
0x0FF6	0x1C52    ADDS	R2, R2, #1
;__Lib_GPIO_32F10x.c, 267 :: 		
; pin_mask end address is: 0 (R0)
; config end address is: 4 (R1)
; currentmode end address is: 28 (R7)
; pinpos end address is: 8 (R2)
0x0FF8	0xE7CC    B	L_GPIO_Config51
L_GPIO_Config52:
;__Lib_GPIO_32F10x.c, 268 :: 		
0x0FFA	0x1D33    ADDS	R3, R6, #4
; port end address is: 24 (R6)
0x0FFC	0xF8C38000  STR	R8, [R3, #0]
; tmpreg end address is: 32 (R8)
;__Lib_GPIO_32F10x.c, 269 :: 		
L_GPIO_Config50:
;__Lib_GPIO_32F10x.c, 270 :: 		
L_end_GPIO_Config:
0x1000	0xF8DDE000  LDR	LR, [SP, #0]
0x1004	0xB001    ADD	SP, SP, #4
0x1006	0x4770    BX	LR
0x1008	0xFC00FFFF  	#-1024
0x100C	0x00140008  	#524308
0x1010	0x08000008  	#526336
; end of _GPIO_Config
_GPIO_Clk_Enable:
;__Lib_GPIO_32F10x.c, 83 :: 		
; gpio_port start address is: 0 (R0)
0x0788	0xB081    SUB	SP, SP, #4
; gpio_port end address is: 0 (R0)
; gpio_port start address is: 0 (R0)
;__Lib_GPIO_32F10x.c, 85 :: 		
0x078A	0x4919    LDR	R1, [PC, #100]
0x078C	0xEA000101  AND	R1, R0, R1, LSL #0
; gpio_port end address is: 0 (R0)
; prt start address is: 0 (R0)
0x0790	0x4608    MOV	R0, R1
;__Lib_GPIO_32F10x.c, 86 :: 		
; pos start address is: 8 (R2)
0x0792	0x2200    MOVS	R2, #0
;__Lib_GPIO_32F10x.c, 87 :: 		
0x0794	0xE00E    B	L_GPIO_Clk_Enable0
; prt end address is: 0 (R0)
; pos end address is: 8 (R2)
;__Lib_GPIO_32F10x.c, 88 :: 		
L_GPIO_Clk_Enable2:
; pos start address is: 0 (R0)
0x0796	0x2004    MOVS	R0, #4
; pos end address is: 0 (R0)
0x0798	0xE022    B	L_GPIO_Clk_Enable1
;__Lib_GPIO_32F10x.c, 89 :: 		
L_GPIO_Clk_Enable3:
; pos start address is: 0 (R0)
0x079A	0x2008    MOVS	R0, #8
; pos end address is: 0 (R0)
0x079C	0xE020    B	L_GPIO_Clk_Enable1
;__Lib_GPIO_32F10x.c, 90 :: 		
L_GPIO_Clk_Enable4:
; pos start address is: 0 (R0)
0x079E	0x2010    MOVS	R0, #16
; pos end address is: 0 (R0)
0x07A0	0xE01E    B	L_GPIO_Clk_Enable1
;__Lib_GPIO_32F10x.c, 91 :: 		
L_GPIO_Clk_Enable5:
; pos start address is: 0 (R0)
0x07A2	0x2020    MOVS	R0, #32
; pos end address is: 0 (R0)
0x07A4	0xE01C    B	L_GPIO_Clk_Enable1
;__Lib_GPIO_32F10x.c, 92 :: 		
L_GPIO_Clk_Enable6:
; pos start address is: 0 (R0)
0x07A6	0x2040    MOVS	R0, #64
; pos end address is: 0 (R0)
0x07A8	0xE01A    B	L_GPIO_Clk_Enable1
;__Lib_GPIO_32F10x.c, 93 :: 		
L_GPIO_Clk_Enable7:
; pos start address is: 0 (R0)
0x07AA	0x2080    MOVS	R0, #128
; pos end address is: 0 (R0)
0x07AC	0xE018    B	L_GPIO_Clk_Enable1
;__Lib_GPIO_32F10x.c, 94 :: 		
L_GPIO_Clk_Enable8:
; pos start address is: 0 (R0)
0x07AE	0xF2401000  MOVW	R0, #256
; pos end address is: 0 (R0)
0x07B2	0xE015    B	L_GPIO_Clk_Enable1
;__Lib_GPIO_32F10x.c, 95 :: 		
L_GPIO_Clk_Enable0:
; pos start address is: 8 (R2)
; prt start address is: 0 (R0)
0x07B4	0x490F    LDR	R1, [PC, #60]
0x07B6	0x4288    CMP	R0, R1
0x07B8	0xD0ED    BEQ	L_GPIO_Clk_Enable2
0x07BA	0x490F    LDR	R1, [PC, #60]
0x07BC	0x4288    CMP	R0, R1
0x07BE	0xD0EC    BEQ	L_GPIO_Clk_Enable3
0x07C0	0x490E    LDR	R1, [PC, #56]
0x07C2	0x4288    CMP	R0, R1
0x07C4	0xD0EB    BEQ	L_GPIO_Clk_Enable4
0x07C6	0x490E    LDR	R1, [PC, #56]
0x07C8	0x4288    CMP	R0, R1
0x07CA	0xD0EA    BEQ	L_GPIO_Clk_Enable5
0x07CC	0x490D    LDR	R1, [PC, #52]
0x07CE	0x4288    CMP	R0, R1
0x07D0	0xD0E9    BEQ	L_GPIO_Clk_Enable6
0x07D2	0x490D    LDR	R1, [PC, #52]
0x07D4	0x4288    CMP	R0, R1
0x07D6	0xD0E8    BEQ	L_GPIO_Clk_Enable7
0x07D8	0x490C    LDR	R1, [PC, #48]
0x07DA	0x4288    CMP	R0, R1
0x07DC	0xD0E7    BEQ	L_GPIO_Clk_Enable8
; prt end address is: 0 (R0)
; pos end address is: 8 (R2)
0x07DE	0x4610    MOV	R0, R2
L_GPIO_Clk_Enable1:
;__Lib_GPIO_32F10x.c, 97 :: 		
; pos start address is: 0 (R0)
0x07E0	0x490B    LDR	R1, [PC, #44]
0x07E2	0x6809    LDR	R1, [R1, #0]
0x07E4	0xEA410200  ORR	R2, R1, R0, LSL #0
; pos end address is: 0 (R0)
0x07E8	0x4909    LDR	R1, [PC, #36]
0x07EA	0x600A    STR	R2, [R1, #0]
;__Lib_GPIO_32F10x.c, 98 :: 		
L_end_GPIO_Clk_Enable:
0x07EC	0xB001    ADD	SP, SP, #4
0x07EE	0x4770    BX	LR
0x07F0	0xFC00FFFF  	#-1024
0x07F4	0x08004001  	#1073809408
0x07F8	0x0C004001  	#1073810432
0x07FC	0x10004001  	#1073811456
0x0800	0x14004001  	#1073812480
0x0804	0x18004001  	#1073813504
0x0808	0x1C004001  	#1073814528
0x080C	0x20004001  	#1073815552
0x0810	0x10184002  	RCC_APB2ENR+0
; end of _GPIO_Clk_Enable
_GPIO_Digital_Input:
;__Lib_GPIO_32F10x.c, 369 :: 		
; pin_mask start address is: 4 (R1)
; port start address is: 0 (R0)
0x11C0	0xB081    SUB	SP, SP, #4
0x11C2	0xF8CDE000  STR	LR, [SP, #0]
; pin_mask end address is: 4 (R1)
; port end address is: 0 (R0)
; port start address is: 0 (R0)
; pin_mask start address is: 4 (R1)
;__Lib_GPIO_32F10x.c, 370 :: 		
0x11C6	0xF04F0242  MOV	R2, #66
0x11CA	0xB289    UXTH	R1, R1
; pin_mask end address is: 4 (R1)
; port end address is: 0 (R0)
0x11CC	0xF7FFFE28  BL	_GPIO_Config+0
;__Lib_GPIO_32F10x.c, 371 :: 		
L_end_GPIO_Digital_Input:
0x11D0	0xF8DDE000  LDR	LR, [SP, #0]
0x11D4	0xB001    ADD	SP, SP, #4
0x11D6	0x4770    BX	LR
; end of _GPIO_Digital_Input
_Sound_Init:
;__Lib_Sound.c, 10 :: 		
; snd_pin start address is: 4 (R1)
; snd_port start address is: 0 (R0)
0x116C	0xB081    SUB	SP, SP, #4
0x116E	0xF8CDE000  STR	LR, [SP, #0]
0x1172	0x4683    MOV	R11, R0
0x1174	0x468C    MOV	R12, R1
; snd_pin end address is: 4 (R1)
; snd_port end address is: 0 (R0)
; snd_port start address is: 44 (R11)
; snd_pin start address is: 48 (R12)
;__Lib_Sound.c, 14 :: 		
0x1176	0x2201    MOVS	R2, #1
0x1178	0xB212    SXTH	R2, R2
0x117A	0xFA02F20C  LSL	R2, R2, R12
0x117E	0xB212    SXTH	R2, R2
0x1180	0xB211    SXTH	R1, R2
0x1182	0x4658    MOV	R0, R11
0x1184	0xF000F828  BL	_GPIO_Digital_Output+0
;__Lib_Sound.c, 17 :: 		
0x1188	0x4A0A    LDR	R2, [PC, #40]
0x118A	0xF8C2B000  STR	R11, [R2, #0]
;__Lib_Sound.c, 20 :: 		
0x118E	0xF04F0201  MOV	R2, #1
0x1192	0xFA02F30C  LSL	R3, R2, R12
; snd_pin end address is: 48 (R12)
0x1196	0x4A08    LDR	R2, [PC, #32]
0x1198	0x6013    STR	R3, [R2, #0]
;__Lib_Sound.c, 21 :: 		
0x119A	0x43DB    MVN	R3, R3
0x119C	0x4A07    LDR	R2, [PC, #28]
0x119E	0x6013    STR	R3, [R2, #0]
;__Lib_Sound.c, 26 :: 		
0x11A0	0xF8DB2000  LDR	R2, [R11, #0]
0x11A4	0x401A    ANDS	R2, R3
0x11A6	0xF8CB2000  STR	R2, [R11, #0]
; snd_port end address is: 44 (R11)
;__Lib_Sound.c, 27 :: 		
L_end_Sound_Init:
0x11AA	0xF8DDE000  LDR	LR, [SP, #0]
0x11AE	0xB001    ADD	SP, SP, #4
0x11B0	0x4770    BX	LR
0x11B2	0xBF00    NOP
0x11B4	0x01B02000  	__Lib_Sound_soundPortAddr+0
0x11B8	0x01B42000  	__Lib_Sound_pinMask1+0
0x11BC	0x01B82000  	__Lib_Sound_pinMask0+0
; end of _Sound_Init
_Sound_Play:
;__Lib_Sound.c, 30 :: 		
; duration_ms start address is: 4 (R1)
; freq_in_hz start address is: 0 (R0)
0x1FD8	0xB081    SUB	SP, SP, #4
0x1FDA	0xF8CDE000  STR	LR, [SP, #0]
0x1FDE	0xB28C    UXTH	R4, R1
0x1FE0	0xB281    UXTH	R1, R0
; duration_ms end address is: 4 (R1)
; freq_in_hz end address is: 0 (R0)
; freq_in_hz start address is: 4 (R1)
; duration_ms start address is: 16 (R4)
;__Lib_Sound.c, 35 :: 		
0x1FE2	0xF7FFF863  BL	_Get_Fosc_kHz+0
0x1FE6	0xF24032E8  MOVW	R2, #1000
0x1FEA	0x4342    MULS	R2, R0, R2
;__Lib_Sound.c, 36 :: 		
0x1FEC	0xFBB2F1F1  UDIV	R1, R2, R1
; freq_in_hz end address is: 4 (R1)
;__Lib_Sound.c, 37 :: 		
0x1FF0	0x0849    LSRS	R1, R1, #1
; nc start address is: 4 (R1)
;__Lib_Sound.c, 40 :: 		
0x1FF2	0xF7FFF85B  BL	_Get_Fosc_kHz+0
0x1FF6	0xFB04F500  MUL	R5, R4, R0
; duration_ms end address is: 16 (R4)
0x1FFA	0x004A    LSLS	R2, R1, #1
0x1FFC	0xFBB5F5F2  UDIV	R5, R5, R2
; per_nc start address is: 20 (R5)
;__Lib_Sound.c, 42 :: 		
0x2000	0x220A    MOVS	R2, #10
0x2002	0xFBB1F1F2  UDIV	R1, R1, R2
; nc start address is: 4 (R1)
; nc end address is: 4 (R1)
; per_nc end address is: 20 (R5)
;__Lib_Sound.c, 45 :: 		
L_Sound_Play0:
; nc start address is: 4 (R1)
; nc end address is: 4 (R1)
; per_nc start address is: 20 (R5)
0x2006	0x2D00    CMP	R5, #0
0x2008	0xD919    BLS	L_Sound_Play1
; nc end address is: 4 (R1)
;__Lib_Sound.c, 47 :: 		
; nc start address is: 4 (R1)
0x200A	0x4C13    LDR	R4, [PC, #76]
0x200C	0x6822    LDR	R2, [R4, #0]
0x200E	0x6813    LDR	R3, [R2, #0]
0x2010	0x4A12    LDR	R2, [PC, #72]
0x2012	0x6812    LDR	R2, [R2, #0]
0x2014	0x4313    ORRS	R3, R2
0x2016	0x4622    MOV	R2, R4
0x2018	0x6812    LDR	R2, [R2, #0]
0x201A	0x6013    STR	R3, [R2, #0]
;__Lib_Sound.c, 48 :: 		
0x201C	0x4608    MOV	R0, R1
0x201E	0xF7FFF837  BL	_Delay_Cyc+0
;__Lib_Sound.c, 51 :: 		
0x2022	0x4C0D    LDR	R4, [PC, #52]
0x2024	0x6822    LDR	R2, [R4, #0]
0x2026	0x6813    LDR	R3, [R2, #0]
0x2028	0x4A0D    LDR	R2, [PC, #52]
0x202A	0x6812    LDR	R2, [R2, #0]
0x202C	0x4013    ANDS	R3, R2
0x202E	0x4622    MOV	R2, R4
0x2030	0x6812    LDR	R2, [R2, #0]
0x2032	0x6013    STR	R3, [R2, #0]
;__Lib_Sound.c, 52 :: 		
0x2034	0x4608    MOV	R0, R1
0x2036	0xF7FFF82B  BL	_Delay_Cyc+0
;__Lib_Sound.c, 53 :: 		
0x203A	0x1E6D    SUBS	R5, R5, #1
;__Lib_Sound.c, 54 :: 		
; nc end address is: 4 (R1)
; per_nc end address is: 20 (R5)
0x203C	0xE7E3    B	L_Sound_Play0
L_Sound_Play1:
;__Lib_Sound.c, 55 :: 		
0x203E	0x4C06    LDR	R4, [PC, #24]
0x2040	0x6822    LDR	R2, [R4, #0]
0x2042	0x6813    LDR	R3, [R2, #0]
0x2044	0x4A06    LDR	R2, [PC, #24]
0x2046	0x6812    LDR	R2, [R2, #0]
0x2048	0x4013    ANDS	R3, R2
0x204A	0x4622    MOV	R2, R4
0x204C	0x6812    LDR	R2, [R2, #0]
0x204E	0x6013    STR	R3, [R2, #0]
;__Lib_Sound.c, 56 :: 		
L_end_Sound_Play:
0x2050	0xF8DDE000  LDR	LR, [SP, #0]
0x2054	0xB001    ADD	SP, SP, #4
0x2056	0x4770    BX	LR
0x2058	0x01B02000  	__Lib_Sound_soundPortAddr+0
0x205C	0x01B42000  	__Lib_Sound_pinMask1+0
0x2060	0x01B82000  	__Lib_Sound_pinMask0+0
; end of _Sound_Play
_Get_Fosc_kHz:
;__Lib_Delays.c, 9 :: 		unsigned long Get_Fosc_kHz(){
0x10AC	0xB081    SUB	SP, SP, #4
;__Lib_Delays.c, 10 :: 		return __System_CLOCK_IN_KHZ;
0x10AE	0x4802    LDR	R0, [PC, #8]
0x10B0	0x6800    LDR	R0, [R0, #0]
;__Lib_Delays.c, 11 :: 		}
L_end_Get_Fosc_kHz:
0x10B2	0xB001    ADD	SP, SP, #4
0x10B4	0x4770    BX	LR
0x10B6	0xBF00    NOP
0x10B8	0x01AC2000  	___System_CLOCK_IN_KHZ+0
; end of _Get_Fosc_kHz
_Delay_Cyc:
;__Lib_Delays.c, 66 :: 		void Delay_Cyc(unsigned long cycles_div_by_10){  // Cycles_div_by_10 parameter range: min = 1, max = 4294967295
0x1090	0xB081    SUB	SP, SP, #4
;__Lib_Delays.c, 71 :: 		nop.w
0x1092	0xF3AF8000  NOP
;__Lib_Delays.c, 72 :: 		subs R0,R0,#1
0x1096	0x1E40    SUBS	R0, R0, #1
;__Lib_Delays.c, 73 :: 		label1:
label1:
;__Lib_Delays.c, 74 :: 		subs R0,R0,#1
0x1098	0x1E40    SUBS	R0, R0, #1
;__Lib_Delays.c, 75 :: 		nop
0x109A	0xBF00    NOP
;__Lib_Delays.c, 76 :: 		nop
0x109C	0xBF00    NOP
;__Lib_Delays.c, 77 :: 		nop
0x109E	0xBF00    NOP
;__Lib_Delays.c, 78 :: 		nop
0x10A0	0xBF00    NOP
;__Lib_Delays.c, 79 :: 		nop
0x10A2	0xBF00    NOP
;__Lib_Delays.c, 80 :: 		nop
;__Lib_Delays.c, 81 :: 		nop
;__Lib_Delays.c, 82 :: 		bne label1
0x10A4	0xD1F8    BNE	label1
;__Lib_Delays.c, 84 :: 		}
L_end_Delay_Cyc:
0x10A6	0xB001    ADD	SP, SP, #4
0x10A8	0x4770    BX	LR
; end of _Delay_Cyc
_InitTimer2:
;DriverRF4463PROMain.c, 49 :: 		void InitTimer2(){
0x2080	0xB081    SUB	SP, SP, #4
0x2082	0xF8CDE000  STR	LR, [SP, #0]
;DriverRF4463PROMain.c, 51 :: 		RCC_APB1ENR.TIM2EN = 1;
0x2086	0x2101    MOVS	R1, #1
0x2088	0xB249    SXTB	R1, R1
0x208A	0x480E    LDR	R0, [PC, #56]
0x208C	0x6001    STR	R1, [R0, #0]
;DriverRF4463PROMain.c, 52 :: 		TIM2_CR1.CEN = 0;
0x208E	0x2100    MOVS	R1, #0
0x2090	0xB249    SXTB	R1, R1
0x2092	0x480D    LDR	R0, [PC, #52]
0x2094	0x6001    STR	R1, [R0, #0]
;DriverRF4463PROMain.c, 53 :: 		TIM2_PSC = 449;
0x2096	0xF24011C1  MOVW	R1, #449
0x209A	0x480C    LDR	R0, [PC, #48]
0x209C	0x6001    STR	R1, [R0, #0]
;DriverRF4463PROMain.c, 54 :: 		TIM2_ARR = 63999;
0x209E	0xF64F11FF  MOVW	R1, #63999
0x20A2	0x480B    LDR	R0, [PC, #44]
0x20A4	0x6001    STR	R1, [R0, #0]
;DriverRF4463PROMain.c, 115 :: 		NVIC_IntEnable(IVT_INT_TIM2);
0x20A6	0xF240002C  MOVW	R0, #44
0x20AA	0xF7FEFFB3  BL	_NVIC_IntEnable+0
;DriverRF4463PROMain.c, 116 :: 		TIM2_DIER.UIE = 1;
0x20AE	0x2101    MOVS	R1, #1
0x20B0	0xB249    SXTB	R1, R1
0x20B2	0x4808    LDR	R0, [PC, #32]
0x20B4	0x6001    STR	R1, [R0, #0]
;DriverRF4463PROMain.c, 117 :: 		TIM2_CR1.CEN = 1;
0x20B6	0x4804    LDR	R0, [PC, #16]
0x20B8	0x6001    STR	R1, [R0, #0]
;DriverRF4463PROMain.c, 118 :: 		}
L_end_InitTimer2:
0x20BA	0xF8DDE000  LDR	LR, [SP, #0]
0x20BE	0xB001    ADD	SP, SP, #4
0x20C0	0x4770    BX	LR
0x20C2	0xBF00    NOP
0x20C4	0x03804242  	RCC_APB1ENR+0
0x20C8	0x00004200  	TIM2_CR1+0
0x20CC	0x00284000  	TIM2_PSC+0
0x20D0	0x002C4000  	TIM2_ARR+0
0x20D4	0x01804200  	TIM2_DIER+0
; end of _InitTimer2
_NVIC_IntEnable:
;__Lib_System_105_107.c, 156 :: 		
; ivt start address is: 0 (R0)
0x1014	0xB081    SUB	SP, SP, #4
; ivt end address is: 0 (R0)
; ivt start address is: 0 (R0)
;__Lib_System_105_107.c, 168 :: 		
0x1016	0x2804    CMP	R0, #4
0x1018	0xD106    BNE	L_NVIC_IntEnable6
; ivt end address is: 0 (R0)
;__Lib_System_105_107.c, 173 :: 		
0x101A	0x4919    LDR	R1, [PC, #100]
0x101C	0x6809    LDR	R1, [R1, #0]
0x101E	0xF4413280  ORR	R2, R1, #65536
0x1022	0x4917    LDR	R1, [PC, #92]
0x1024	0x600A    STR	R2, [R1, #0]
;__Lib_System_105_107.c, 174 :: 		
0x1026	0xE028    B	L_NVIC_IntEnable7
L_NVIC_IntEnable6:
;__Lib_System_105_107.c, 175 :: 		
; ivt start address is: 0 (R0)
0x1028	0x2805    CMP	R0, #5
0x102A	0xD106    BNE	L_NVIC_IntEnable8
; ivt end address is: 0 (R0)
;__Lib_System_105_107.c, 180 :: 		
0x102C	0x4914    LDR	R1, [PC, #80]
0x102E	0x6809    LDR	R1, [R1, #0]
0x1030	0xF4413200  ORR	R2, R1, #131072
0x1034	0x4912    LDR	R1, [PC, #72]
0x1036	0x600A    STR	R2, [R1, #0]
;__Lib_System_105_107.c, 181 :: 		
0x1038	0xE01F    B	L_NVIC_IntEnable9
L_NVIC_IntEnable8:
;__Lib_System_105_107.c, 182 :: 		
; ivt start address is: 0 (R0)
0x103A	0x2806    CMP	R0, #6
0x103C	0xD106    BNE	L_NVIC_IntEnable10
; ivt end address is: 0 (R0)
;__Lib_System_105_107.c, 187 :: 		
0x103E	0x4910    LDR	R1, [PC, #64]
0x1040	0x6809    LDR	R1, [R1, #0]
0x1042	0xF4412280  ORR	R2, R1, #262144
0x1046	0x490E    LDR	R1, [PC, #56]
0x1048	0x600A    STR	R2, [R1, #0]
;__Lib_System_105_107.c, 188 :: 		
0x104A	0xE016    B	L_NVIC_IntEnable11
L_NVIC_IntEnable10:
;__Lib_System_105_107.c, 189 :: 		
; ivt start address is: 0 (R0)
0x104C	0x280F    CMP	R0, #15
0x104E	0xD106    BNE	L_NVIC_IntEnable12
; ivt end address is: 0 (R0)
;__Lib_System_105_107.c, 194 :: 		
0x1050	0x490C    LDR	R1, [PC, #48]
0x1052	0x6809    LDR	R1, [R1, #0]
0x1054	0xF0410202  ORR	R2, R1, #2
0x1058	0x490A    LDR	R1, [PC, #40]
0x105A	0x600A    STR	R2, [R1, #0]
;__Lib_System_105_107.c, 195 :: 		
0x105C	0xE00D    B	L_NVIC_IntEnable13
L_NVIC_IntEnable12:
;__Lib_System_105_107.c, 196 :: 		
; ivt start address is: 0 (R0)
0x105E	0x2810    CMP	R0, #16
0x1060	0xD30B    BCC	L_NVIC_IntEnable14
;__Lib_System_105_107.c, 201 :: 		
0x1062	0xF2A00410  SUBW	R4, R0, #16
; ivt end address is: 0 (R0)
0x1066	0x0961    LSRS	R1, R4, #5
0x1068	0x008A    LSLS	R2, R1, #2
0x106A	0x4907    LDR	R1, [PC, #28]
0x106C	0x188B    ADDS	R3, R1, R2
;__Lib_System_105_107.c, 202 :: 		
0x106E	0xF004021F  AND	R2, R4, #31
0x1072	0xF04F0101  MOV	R1, #1
0x1076	0x4091    LSLS	R1, R2
0x1078	0x6019    STR	R1, [R3, #0]
;__Lib_System_105_107.c, 203 :: 		
L_NVIC_IntEnable14:
L_NVIC_IntEnable13:
L_NVIC_IntEnable11:
L_NVIC_IntEnable9:
L_NVIC_IntEnable7:
;__Lib_System_105_107.c, 204 :: 		
L_end_NVIC_IntEnable:
0x107A	0xB001    ADD	SP, SP, #4
0x107C	0x4770    BX	LR
0x107E	0xBF00    NOP
0x1080	0xED24E000  	SCB_SHCRS+0
0x1084	0xE010E000  	STK_CTRL+0
0x1088	0xE100E000  	NVIC_ISER0+0
; end of _NVIC_IntEnable
_vUARTTxInit:
;uarthandler.c, 108 :: 		void vUARTTxInit(){
0x1534	0xB081    SUB	SP, SP, #4
0x1536	0xF8CDE000  STR	LR, [SP, #0]
;uarthandler.c, 109 :: 		UART1_Init_Advanced( 921600, _UART_8_BIT_DATA, _UART_NOPARITY, _UART_ONE_STOPBIT, &_GPIO_MODULE_USART1_PA9_10 );
0x153A	0x4808    LDR	R0, [PC, #32]
0x153C	0xB401    PUSH	(R0)
0x153E	0xF2400300  MOVW	R3, #0
0x1542	0xF2400200  MOVW	R2, #0
0x1546	0xF2400100  MOVW	R1, #0
0x154A	0xF44F2061  MOV	R0, #921600
0x154E	0xF7FFFC53  BL	_UART1_Init_Advanced+0
0x1552	0xB001    ADD	SP, SP, #4
;uarthandler.c, 110 :: 		}
L_end_vUARTTxInit:
0x1554	0xF8DDE000  LDR	LR, [SP, #0]
0x1558	0xB001    ADD	SP, SP, #4
0x155A	0x4770    BX	LR
0x155C	0x2D500000  	__GPIO_MODULE_USART1_PA9_10+0
; end of _vUARTTxInit
_UART1_Init_Advanced:
;__Lib_UART_123_45.c, 372 :: 		
; stop_bits start address is: 12 (R3)
; parity start address is: 8 (R2)
; data_bits start address is: 4 (R1)
; baud_rate start address is: 0 (R0)
0x0DF8	0xB081    SUB	SP, SP, #4
0x0DFA	0xF8CDE000  STR	LR, [SP, #0]
; stop_bits end address is: 12 (R3)
; parity end address is: 8 (R2)
; data_bits end address is: 4 (R1)
; baud_rate end address is: 0 (R0)
; baud_rate start address is: 0 (R0)
; data_bits start address is: 4 (R1)
; parity start address is: 8 (R2)
; stop_bits start address is: 12 (R3)
; module start address is: 20 (R5)
0x0DFE	0x9D01    LDR	R5, [SP, #4]
;__Lib_UART_123_45.c, 374 :: 		
0x0E00	0x462C    MOV	R4, R5
; module end address is: 20 (R5)
0x0E02	0xB410    PUSH	(R4)
; parity end address is: 8 (R2)
0x0E04	0xB408    PUSH	(R3)
0x0E06	0xB293    UXTH	R3, R2
0x0E08	0xB28A    UXTH	R2, R1
; data_bits end address is: 4 (R1)
0x0E0A	0x4601    MOV	R1, R0
; baud_rate end address is: 0 (R0)
0x0E0C	0x4803    LDR	R0, [PC, #12]
; stop_bits end address is: 12 (R3)
0x0E0E	0xF7FFFB51  BL	__Lib_UART_123_45_UARTx_Init_Advanced+0
0x0E12	0xB002    ADD	SP, SP, #8
;__Lib_UART_123_45.c, 375 :: 		
L_end_UART1_Init_Advanced:
0x0E14	0xF8DDE000  LDR	LR, [SP, #0]
0x0E18	0xB001    ADD	SP, SP, #4
0x0E1A	0x4770    BX	LR
0x0E1C	0x38004001  	USART1_SR+0
; end of _UART1_Init_Advanced
__Lib_UART_123_45_UARTx_Init_Advanced:
;__Lib_UART_123_45.c, 294 :: 		
; parity start address is: 12 (R3)
; baud_rate start address is: 4 (R1)
; UART_Base start address is: 0 (R0)
0x04B4	0xB089    SUB	SP, SP, #36
0x04B6	0xF8CDE000  STR	LR, [SP, #0]
0x04BA	0x4683    MOV	R11, R0
0x04BC	0xB298    UXTH	R0, R3
0x04BE	0x468C    MOV	R12, R1
; parity end address is: 12 (R3)
; baud_rate end address is: 4 (R1)
; UART_Base end address is: 0 (R0)
; UART_Base start address is: 44 (R11)
; baud_rate start address is: 48 (R12)
; parity start address is: 0 (R0)
; stop_bits start address is: 4 (R1)
0x04C0	0xF8BD1024  LDRH	R1, [SP, #36]
; module start address is: 24 (R6)
0x04C4	0x9E0A    LDR	R6, [SP, #40]
;__Lib_UART_123_45.c, 298 :: 		
0x04C6	0xAC04    ADD	R4, SP, #16
0x04C8	0xF8AD1004  STRH	R1, [SP, #4]
0x04CC	0xF8AD0008  STRH	R0, [SP, #8]
0x04D0	0x4620    MOV	R0, R4
0x04D2	0xF7FFFF0F  BL	_RCC_GetClocksFrequency+0
0x04D6	0xF8BD0008  LDRH	R0, [SP, #8]
0x04DA	0xF8BD1004  LDRH	R1, [SP, #4]
;__Lib_UART_123_45.c, 301 :: 		
0x04DE	0x4C64    LDR	R4, [PC, #400]
0x04E0	0x45A3    CMP	R11, R4
0x04E2	0xD112    BNE	L___Lib_UART_123_45_UARTx_Init_Advanced15
;__Lib_UART_123_45.c, 302 :: 		
0x04E4	0x2501    MOVS	R5, #1
0x04E6	0xB26D    SXTB	R5, R5
0x04E8	0x4C62    LDR	R4, [PC, #392]
0x04EA	0x6025    STR	R5, [R4, #0]
;__Lib_UART_123_45.c, 303 :: 		
0x04EC	0x4D62    LDR	R5, [PC, #392]
0x04EE	0x4C63    LDR	R4, [PC, #396]
0x04F0	0x6025    STR	R5, [R4, #0]
;__Lib_UART_123_45.c, 304 :: 		
0x04F2	0x4D63    LDR	R5, [PC, #396]
0x04F4	0x4C63    LDR	R4, [PC, #396]
0x04F6	0x6025    STR	R5, [R4, #0]
;__Lib_UART_123_45.c, 305 :: 		
0x04F8	0x4D63    LDR	R5, [PC, #396]
0x04FA	0x4C64    LDR	R4, [PC, #400]
0x04FC	0x6025    STR	R5, [R4, #0]
;__Lib_UART_123_45.c, 306 :: 		
0x04FE	0x4D64    LDR	R5, [PC, #400]
0x0500	0x4C64    LDR	R4, [PC, #400]
0x0502	0x6025    STR	R5, [R4, #0]
;__Lib_UART_123_45.c, 307 :: 		
0x0504	0x9C07    LDR	R4, [SP, #28]
0x0506	0x9403    STR	R4, [SP, #12]
;__Lib_UART_123_45.c, 308 :: 		
0x0508	0xE056    B	L___Lib_UART_123_45_UARTx_Init_Advanced16
L___Lib_UART_123_45_UARTx_Init_Advanced15:
;__Lib_UART_123_45.c, 309 :: 		
0x050A	0x4C63    LDR	R4, [PC, #396]
0x050C	0x45A3    CMP	R11, R4
0x050E	0xD112    BNE	L___Lib_UART_123_45_UARTx_Init_Advanced17
;__Lib_UART_123_45.c, 310 :: 		
0x0510	0x2501    MOVS	R5, #1
0x0512	0xB26D    SXTB	R5, R5
0x0514	0x4C61    LDR	R4, [PC, #388]
0x0516	0x6025    STR	R5, [R4, #0]
;__Lib_UART_123_45.c, 311 :: 		
0x0518	0x4D61    LDR	R5, [PC, #388]
0x051A	0x4C58    LDR	R4, [PC, #352]
0x051C	0x6025    STR	R5, [R4, #0]
;__Lib_UART_123_45.c, 312 :: 		
0x051E	0x4D61    LDR	R5, [PC, #388]
0x0520	0x4C58    LDR	R4, [PC, #352]
0x0522	0x6025    STR	R5, [R4, #0]
;__Lib_UART_123_45.c, 313 :: 		
0x0524	0x4D60    LDR	R5, [PC, #384]
0x0526	0x4C59    LDR	R4, [PC, #356]
0x0528	0x6025    STR	R5, [R4, #0]
;__Lib_UART_123_45.c, 314 :: 		
0x052A	0x4D60    LDR	R5, [PC, #384]
0x052C	0x4C59    LDR	R4, [PC, #356]
0x052E	0x6025    STR	R5, [R4, #0]
;__Lib_UART_123_45.c, 315 :: 		
0x0530	0x9C06    LDR	R4, [SP, #24]
0x0532	0x9403    STR	R4, [SP, #12]
;__Lib_UART_123_45.c, 316 :: 		
0x0534	0xE040    B	L___Lib_UART_123_45_UARTx_Init_Advanced18
L___Lib_UART_123_45_UARTx_Init_Advanced17:
;__Lib_UART_123_45.c, 317 :: 		
0x0536	0x4C5E    LDR	R4, [PC, #376]
0x0538	0x45A3    CMP	R11, R4
0x053A	0xD112    BNE	L___Lib_UART_123_45_UARTx_Init_Advanced19
;__Lib_UART_123_45.c, 318 :: 		
0x053C	0x2501    MOVS	R5, #1
0x053E	0xB26D    SXTB	R5, R5
0x0540	0x4C5C    LDR	R4, [PC, #368]
0x0542	0x6025    STR	R5, [R4, #0]
;__Lib_UART_123_45.c, 319 :: 		
0x0544	0x4D5C    LDR	R5, [PC, #368]
0x0546	0x4C4D    LDR	R4, [PC, #308]
0x0548	0x6025    STR	R5, [R4, #0]
;__Lib_UART_123_45.c, 320 :: 		
0x054A	0x4D5C    LDR	R5, [PC, #368]
0x054C	0x4C4D    LDR	R4, [PC, #308]
0x054E	0x6025    STR	R5, [R4, #0]
;__Lib_UART_123_45.c, 321 :: 		
0x0550	0x4D5B    LDR	R5, [PC, #364]
0x0552	0x4C4E    LDR	R4, [PC, #312]
0x0554	0x6025    STR	R5, [R4, #0]
;__Lib_UART_123_45.c, 322 :: 		
0x0556	0x4D5B    LDR	R5, [PC, #364]
0x0558	0x4C4E    LDR	R4, [PC, #312]
0x055A	0x6025    STR	R5, [R4, #0]
;__Lib_UART_123_45.c, 323 :: 		
0x055C	0x9C06    LDR	R4, [SP, #24]
0x055E	0x9403    STR	R4, [SP, #12]
;__Lib_UART_123_45.c, 324 :: 		
0x0560	0xE02A    B	L___Lib_UART_123_45_UARTx_Init_Advanced20
L___Lib_UART_123_45_UARTx_Init_Advanced19:
;__Lib_UART_123_45.c, 325 :: 		
0x0562	0x4C59    LDR	R4, [PC, #356]
0x0564	0x45A3    CMP	R11, R4
0x0566	0xD112    BNE	L___Lib_UART_123_45_UARTx_Init_Advanced21
;__Lib_UART_123_45.c, 326 :: 		
0x0568	0x2501    MOVS	R5, #1
0x056A	0xB26D    SXTB	R5, R5
0x056C	0x4C57    LDR	R4, [PC, #348]
0x056E	0x6025    STR	R5, [R4, #0]
;__Lib_UART_123_45.c, 327 :: 		
0x0570	0x4D57    LDR	R5, [PC, #348]
0x0572	0x4C42    LDR	R4, [PC, #264]
0x0574	0x6025    STR	R5, [R4, #0]
;__Lib_UART_123_45.c, 328 :: 		
0x0576	0x4D57    LDR	R5, [PC, #348]
0x0578	0x4C42    LDR	R4, [PC, #264]
0x057A	0x6025    STR	R5, [R4, #0]
;__Lib_UART_123_45.c, 329 :: 		
0x057C	0x4D56    LDR	R5, [PC, #344]
0x057E	0x4C43    LDR	R4, [PC, #268]
0x0580	0x6025    STR	R5, [R4, #0]
;__Lib_UART_123_45.c, 330 :: 		
0x0582	0x4D56    LDR	R5, [PC, #344]
0x0584	0x4C43    LDR	R4, [PC, #268]
0x0586	0x6025    STR	R5, [R4, #0]
;__Lib_UART_123_45.c, 331 :: 		
0x0588	0x9C06    LDR	R4, [SP, #24]
0x058A	0x9403    STR	R4, [SP, #12]
;__Lib_UART_123_45.c, 332 :: 		
0x058C	0xE014    B	L___Lib_UART_123_45_UARTx_Init_Advanced22
L___Lib_UART_123_45_UARTx_Init_Advanced21:
;__Lib_UART_123_45.c, 333 :: 		
0x058E	0x4C54    LDR	R4, [PC, #336]
0x0590	0x45A3    CMP	R11, R4
0x0592	0xD111    BNE	L___Lib_UART_123_45_UARTx_Init_Advanced23
;__Lib_UART_123_45.c, 334 :: 		
0x0594	0x2501    MOVS	R5, #1
0x0596	0xB26D    SXTB	R5, R5
0x0598	0x4C52    LDR	R4, [PC, #328]
0x059A	0x6025    STR	R5, [R4, #0]
;__Lib_UART_123_45.c, 335 :: 		
0x059C	0x4D52    LDR	R5, [PC, #328]
0x059E	0x4C37    LDR	R4, [PC, #220]
0x05A0	0x6025    STR	R5, [R4, #0]
;__Lib_UART_123_45.c, 336 :: 		
0x05A2	0x4D52    LDR	R5, [PC, #328]
0x05A4	0x4C37    LDR	R4, [PC, #220]
0x05A6	0x6025    STR	R5, [R4, #0]
;__Lib_UART_123_45.c, 337 :: 		
0x05A8	0x4D51    LDR	R5, [PC, #324]
0x05AA	0x4C38    LDR	R4, [PC, #224]
0x05AC	0x6025    STR	R5, [R4, #0]
;__Lib_UART_123_45.c, 338 :: 		
0x05AE	0x4D51    LDR	R5, [PC, #324]
0x05B0	0x4C38    LDR	R4, [PC, #224]
0x05B2	0x6025    STR	R5, [R4, #0]
;__Lib_UART_123_45.c, 339 :: 		
0x05B4	0x9C06    LDR	R4, [SP, #24]
0x05B6	0x9403    STR	R4, [SP, #12]
;__Lib_UART_123_45.c, 340 :: 		
L___Lib_UART_123_45_UARTx_Init_Advanced23:
L___Lib_UART_123_45_UARTx_Init_Advanced22:
L___Lib_UART_123_45_UARTx_Init_Advanced20:
L___Lib_UART_123_45_UARTx_Init_Advanced18:
L___Lib_UART_123_45_UARTx_Init_Advanced16:
;__Lib_UART_123_45.c, 342 :: 		
0x05B8	0xF8AD1004  STRH	R1, [SP, #4]
; module end address is: 24 (R6)
0x05BC	0xF8AD0008  STRH	R0, [SP, #8]
0x05C0	0x4630    MOV	R0, R6
0x05C2	0xF7FFFE0F  BL	_GPIO_Alternate_Function_Enable+0
0x05C6	0xF8BD0008  LDRH	R0, [SP, #8]
0x05CA	0xF8BD1004  LDRH	R1, [SP, #4]
;__Lib_UART_123_45.c, 344 :: 		
0x05CE	0xF10B0510  ADD	R5, R11, #16
0x05D2	0x2400    MOVS	R4, #0
0x05D4	0x602C    STR	R4, [R5, #0]
;__Lib_UART_123_45.c, 345 :: 		
0x05D6	0xF10B0510  ADD	R5, R11, #16
0x05DA	0x682C    LDR	R4, [R5, #0]
0x05DC	0x430C    ORRS	R4, R1
; stop_bits end address is: 4 (R1)
0x05DE	0x602C    STR	R4, [R5, #0]
;__Lib_UART_123_45.c, 346 :: 		
0x05E0	0xF10B050C  ADD	R5, R11, #12
0x05E4	0x2400    MOVS	R4, #0
0x05E6	0x602C    STR	R4, [R5, #0]
;__Lib_UART_123_45.c, 348 :: 		
0x05E8	0xB118    CBZ	R0, L___Lib_UART_123_45_UARTx_Init_Advanced38
;__Lib_UART_123_45.c, 349 :: 		
0x05EA	0xF4406080  ORR	R0, R0, #1024
0x05EE	0xB280    UXTH	R0, R0
; parity end address is: 0 (R0)
;__Lib_UART_123_45.c, 350 :: 		
0x05F0	0xE7FF    B	L___Lib_UART_123_45_UARTx_Init_Advanced24
L___Lib_UART_123_45_UARTx_Init_Advanced38:
;__Lib_UART_123_45.c, 348 :: 		
;__Lib_UART_123_45.c, 350 :: 		
L___Lib_UART_123_45_UARTx_Init_Advanced24:
;__Lib_UART_123_45.c, 352 :: 		
; parity start address is: 0 (R0)
0x05F2	0xF10B050C  ADD	R5, R11, #12
0x05F6	0x682C    LDR	R4, [R5, #0]
0x05F8	0x4304    ORRS	R4, R0
; parity end address is: 0 (R0)
0x05FA	0x602C    STR	R4, [R5, #0]
;__Lib_UART_123_45.c, 354 :: 		
0x05FC	0xF10B060C  ADD	R6, R11, #12
0x0600	0x2501    MOVS	R5, #1
0x0602	0x6834    LDR	R4, [R6, #0]
0x0604	0xF365344D  BFI	R4, R5, #13, #1
0x0608	0x6034    STR	R4, [R6, #0]
;__Lib_UART_123_45.c, 355 :: 		
0x060A	0xF10B060C  ADD	R6, R11, #12
0x060E	0x2501    MOVS	R5, #1
0x0610	0x6834    LDR	R4, [R6, #0]
0x0612	0xF36504C3  BFI	R4, R5, #3, #1
0x0616	0x6034    STR	R4, [R6, #0]
;__Lib_UART_123_45.c, 356 :: 		
0x0618	0xF10B060C  ADD	R6, R11, #12
0x061C	0x2501    MOVS	R5, #1
0x061E	0x6834    LDR	R4, [R6, #0]
0x0620	0xF3650482  BFI	R4, R5, #2, #1
0x0624	0x6034    STR	R4, [R6, #0]
;__Lib_UART_123_45.c, 357 :: 		
0x0626	0xF10B0514  ADD	R5, R11, #20
0x062A	0x2400    MOVS	R4, #0
0x062C	0x602C    STR	R4, [R5, #0]
;__Lib_UART_123_45.c, 362 :: 		
0x062E	0x9D03    LDR	R5, [SP, #12]
0x0630	0x2419    MOVS	R4, #25
0x0632	0x4365    MULS	R5, R4, R5
0x0634	0xEA4F048C  LSL	R4, R12, #2
; baud_rate end address is: 48 (R12)
0x0638	0xFBB5F7F4  UDIV	R7, R5, R4
;__Lib_UART_123_45.c, 363 :: 		
0x063C	0x2464    MOVS	R4, #100
0x063E	0xFBB7F4F4  UDIV	R4, R7, R4
0x0642	0x0126    LSLS	R6, R4, #4
;__Lib_UART_123_45.c, 365 :: 		
0x0644	0x0935    LSRS	R5, R6, #4
0x0646	0x2464    MOVS	R4, #100
0x0648	0x436C    MULS	R4, R5, R4
0x064A	0x1B3C    SUB	R4, R7, R4
;__Lib_UART_123_45.c, 366 :: 		
0x064C	0x0124    LSLS	R4, R4, #4
0x064E	0xF2040532  ADDW	R5, R4, #50
0x0652	0x2464    MOVS	R4, #100
0x0654	0xFBB5F4F4  UDIV	R4, R5, R4
0x0658	0xF004040F  AND	R4, R4, #15
0x065C	0xEA460404  ORR	R4, R6, R4, LSL #0
;__Lib_UART_123_45.c, 368 :: 		
0x0660	0xF10B0508  ADD	R5, R11, #8
; UART_Base end address is: 44 (R11)
0x0664	0xB2A4    UXTH	R4, R4
0x0666	0x602C    STR	R4, [R5, #0]
;__Lib_UART_123_45.c, 369 :: 		
L_end_UARTx_Init_Advanced:
0x0668	0xF8DDE000  LDR	LR, [SP, #0]
0x066C	0xB009    ADD	SP, SP, #36
0x066E	0x4770    BX	LR
0x0670	0x38004001  	USART1_SR+0
0x0674	0x03384242  	RCC_APB2ENR+0
0x0678	0xFFFFFFFF  	_UART1_Write+0
0x067C	0x01C42000  	_UART_Wr_Ptr+0
0x0680	0xFFFFFFFF  	_UART1_Read+0
0x0684	0x01C82000  	_UART_Rd_Ptr+0
0x0688	0xFFFFFFFF  	_UART1_Data_Ready+0
0x068C	0x01CC2000  	_UART_Rdy_Ptr+0
0x0690	0xFFFFFFFF  	_UART1_Tx_Idle+0
0x0694	0x01D02000  	_UART_Tx_Idle_Ptr+0
0x0698	0x44004000  	USART2_SR+0
0x069C	0x03C44242  	RCC_APB1ENR+0
0x06A0	0xFFFFFFFF  	_UART2_Write+0
0x06A4	0xFFFFFFFF  	_UART2_Read+0
0x06A8	0xFFFFFFFF  	_UART2_Data_Ready+0
0x06AC	0xFFFFFFFF  	_UART2_Tx_Idle+0
0x06B0	0x48004000  	USART3_SR+0
0x06B4	0x03C84242  	RCC_APB1ENR+0
0x06B8	0xFFFFFFFF  	_UART3_Write+0
0x06BC	0xFFFFFFFF  	_UART3_Read+0
0x06C0	0xFFFFFFFF  	_UART3_Data_Ready+0
0x06C4	0xFFFFFFFF  	_UART3_Tx_Idle+0
0x06C8	0x4C004000  	UART4_SR+0
0x06CC	0x03CC4242  	RCC_APB1ENR+0
0x06D0	0xFFFFFFFF  	_UART4_Write+0
0x06D4	0xFFFFFFFF  	_UART4_Read+0
0x06D8	0xFFFFFFFF  	_UART4_Data_Ready+0
0x06DC	0xFFFFFFFF  	_UART4_Tx_Idle+0
0x06E0	0x50004000  	UART5_SR+0
0x06E4	0x03D04242  	RCC_APB1ENR+0
0x06E8	0xFFFFFFFF  	_UART5_Write+0
0x06EC	0xFFFFFFFF  	_UART5_Read+0
0x06F0	0xFFFFFFFF  	_UART5_Data_Ready+0
0x06F4	0xFFFFFFFF  	_UART5_Tx_Idle+0
; end of __Lib_UART_123_45_UARTx_Init_Advanced
_RCC_GetClocksFrequency:
;__Lib_System_105_107.c, 464 :: 		
; RCC_Clocks start address is: 0 (R0)
0x02F4	0xB082    SUB	SP, SP, #8
0x02F6	0xF8CDE000  STR	LR, [SP, #0]
0x02FA	0x4603    MOV	R3, R0
; RCC_Clocks end address is: 0 (R0)
; RCC_Clocks start address is: 12 (R3)
;__Lib_System_105_107.c, 467 :: 		
0x02FC	0x1D19    ADDS	R1, R3, #4
0x02FE	0x9101    STR	R1, [SP, #4]
0x0300	0xF000FED4  BL	_Get_Fosc_kHz+0
0x0304	0xF24031E8  MOVW	R1, #1000
0x0308	0xFB00F201  MUL	R2, R0, R1
0x030C	0x9901    LDR	R1, [SP, #4]
0x030E	0x600A    STR	R2, [R1, #0]
;__Lib_System_105_107.c, 470 :: 		
0x0310	0x491F    LDR	R1, [PC, #124]
0x0312	0x7809    LDRB	R1, [R1, #0]
0x0314	0xF3C11103  UBFX	R1, R1, #4, #4
; tmp start address is: 0 (R0)
0x0318	0xB2C8    UXTB	R0, R1
;__Lib_System_105_107.c, 471 :: 		
0x031A	0x491E    LDR	R1, [PC, #120]
0x031C	0x1809    ADDS	R1, R1, R0
; tmp end address is: 0 (R0)
0x031E	0x7808    LDRB	R0, [R1, #0]
; presc start address is: 0 (R0)
0x0320	0xB2C0    UXTB	R0, R0
;__Lib_System_105_107.c, 473 :: 		
0x0322	0x1D19    ADDS	R1, R3, #4
0x0324	0x6809    LDR	R1, [R1, #0]
0x0326	0x4081    LSLS	R1, R0
; presc end address is: 0 (R0)
0x0328	0x6019    STR	R1, [R3, #0]
;__Lib_System_105_107.c, 475 :: 		
0x032A	0x4919    LDR	R1, [PC, #100]
0x032C	0x8809    LDRH	R1, [R1, #0]
0x032E	0xF3C12102  UBFX	R1, R1, #8, #3
; tmp start address is: 0 (R0)
0x0332	0xB288    UXTH	R0, R1
;__Lib_System_105_107.c, 476 :: 		
0x0334	0x4917    LDR	R1, [PC, #92]
0x0336	0x1809    ADDS	R1, R1, R0
; tmp end address is: 0 (R0)
0x0338	0x7808    LDRB	R0, [R1, #0]
; presc start address is: 0 (R0)
0x033A	0xB2C0    UXTB	R0, R0
;__Lib_System_105_107.c, 478 :: 		
0x033C	0xF2030208  ADDW	R2, R3, #8
0x0340	0x1D19    ADDS	R1, R3, #4
0x0342	0x6809    LDR	R1, [R1, #0]
0x0344	0x40C1    LSRS	R1, R0
; presc end address is: 0 (R0)
0x0346	0x6011    STR	R1, [R2, #0]
;__Lib_System_105_107.c, 480 :: 		
0x0348	0x4911    LDR	R1, [PC, #68]
0x034A	0x8809    LDRH	R1, [R1, #0]
0x034C	0xF3C121C2  UBFX	R1, R1, #11, #3
; tmp start address is: 0 (R0)
0x0350	0xB288    UXTH	R0, R1
;__Lib_System_105_107.c, 481 :: 		
0x0352	0x4910    LDR	R1, [PC, #64]
0x0354	0x1809    ADDS	R1, R1, R0
; tmp end address is: 0 (R0)
0x0356	0x7808    LDRB	R0, [R1, #0]
; presc start address is: 0 (R0)
0x0358	0xB2C0    UXTB	R0, R0
;__Lib_System_105_107.c, 483 :: 		
0x035A	0xF203020C  ADDW	R2, R3, #12
0x035E	0x1D19    ADDS	R1, R3, #4
0x0360	0x6809    LDR	R1, [R1, #0]
0x0362	0x40C1    LSRS	R1, R0
; presc end address is: 0 (R0)
0x0364	0x6011    STR	R1, [R2, #0]
;__Lib_System_105_107.c, 485 :: 		
0x0366	0x490A    LDR	R1, [PC, #40]
0x0368	0x8809    LDRH	R1, [R1, #0]
0x036A	0xF3C13181  UBFX	R1, R1, #14, #2
; tmp start address is: 0 (R0)
0x036E	0xB288    UXTH	R0, R1
;__Lib_System_105_107.c, 486 :: 		
0x0370	0x4909    LDR	R1, [PC, #36]
0x0372	0x1809    ADDS	R1, R1, R0
; tmp end address is: 0 (R0)
0x0374	0x7809    LDRB	R1, [R1, #0]
; presc start address is: 0 (R0)
0x0376	0xB2C8    UXTB	R0, R1
;__Lib_System_105_107.c, 488 :: 		
0x0378	0xF2030210  ADDW	R2, R3, #16
0x037C	0xF203010C  ADDW	R1, R3, #12
; RCC_Clocks end address is: 12 (R3)
0x0380	0x6809    LDR	R1, [R1, #0]
0x0382	0xFBB1F1F0  UDIV	R1, R1, R0
; presc end address is: 0 (R0)
0x0386	0x6011    STR	R1, [R2, #0]
;__Lib_System_105_107.c, 489 :: 		
L_end_RCC_GetClocksFrequency:
0x0388	0xF8DDE000  LDR	LR, [SP, #0]
0x038C	0xB002    ADD	SP, SP, #8
0x038E	0x4770    BX	LR
0x0390	0x10044002  	RCC_CFGRbits+0
0x0394	0x31E50000  	__Lib_System_105_107_APBAHBPrescTable+0
0x0398	0x108C0000  	__Lib_System_105_107_ADCPrescTable+0
; end of _RCC_GetClocksFrequency
_GPIO_Alternate_Function_Enable:
;__Lib_GPIO_32F10x.c, 303 :: 		
; module start address is: 0 (R0)
0x01E4	0xB081    SUB	SP, SP, #4
0x01E6	0xF8CDE000  STR	LR, [SP, #0]
; module end address is: 0 (R0)
; module start address is: 0 (R0)
;__Lib_GPIO_32F10x.c, 304 :: 		
;__Lib_GPIO_32F10x.c, 305 :: 		
;__Lib_GPIO_32F10x.c, 307 :: 		
0x01EA	0x2201    MOVS	R2, #1
0x01EC	0xB252    SXTB	R2, R2
0x01EE	0x493E    LDR	R1, [PC, #248]
0x01F0	0x600A    STR	R2, [R1, #0]
;__Lib_GPIO_32F10x.c, 309 :: 		
0x01F2	0xF2000168  ADDW	R1, R0, #104
0x01F6	0x680B    LDR	R3, [R1, #0]
0x01F8	0xF06F6100  MVN	R1, #134217728
0x01FC	0xEA030201  AND	R2, R3, R1, LSL #0
; gpio_remap start address is: 16 (R4)
0x0200	0x4614    MOV	R4, R2
;__Lib_GPIO_32F10x.c, 310 :: 		
0x0202	0xF0036100  AND	R1, R3, #134217728
0x0206	0x0EC9    LSRS	R1, R1, #27
; newstate start address is: 12 (R3)
0x0208	0x460B    MOV	R3, R1
;__Lib_GPIO_32F10x.c, 312 :: 		
0x020A	0xF0024100  AND	R1, R2, #-2147483648
0x020E	0xF1B14F00  CMP	R1, #-2147483648
0x0212	0xD102    BNE	L_GPIO_Alternate_Function_Enable66
;__Lib_GPIO_32F10x.c, 314 :: 		
0x0214	0x4935    LDR	R1, [PC, #212]
; tmpreg start address is: 8 (R2)
0x0216	0x680A    LDR	R2, [R1, #0]
;__Lib_GPIO_32F10x.c, 315 :: 		
; tmpreg end address is: 8 (R2)
0x0218	0xE001    B	L_GPIO_Alternate_Function_Enable67
L_GPIO_Alternate_Function_Enable66:
;__Lib_GPIO_32F10x.c, 318 :: 		
0x021A	0x4935    LDR	R1, [PC, #212]
; tmpreg start address is: 8 (R2)
0x021C	0x680A    LDR	R2, [R1, #0]
; tmpreg end address is: 8 (R2)
;__Lib_GPIO_32F10x.c, 319 :: 		
L_GPIO_Alternate_Function_Enable67:
;__Lib_GPIO_32F10x.c, 321 :: 		
; tmpreg start address is: 8 (R2)
0x021E	0xF4042170  AND	R1, R4, #983040
0x0222	0x0C09    LSRS	R1, R1, #16
; tmpmask start address is: 24 (R6)
0x0224	0x460E    MOV	R6, R1
;__Lib_GPIO_32F10x.c, 322 :: 		
0x0226	0xF64F71FF  MOVW	R1, #65535
0x022A	0xEA040101  AND	R1, R4, R1, LSL #0
; tmp start address is: 20 (R5)
0x022E	0x460D    MOV	R5, R1
;__Lib_GPIO_32F10x.c, 324 :: 		
0x0230	0xF4041140  AND	R1, R4, #3145728
0x0234	0xF5B11F40  CMP	R1, #3145728
0x0238	0xD10D    BNE	L_GPIO_Alternate_Function_Enable68
; tmpmask end address is: 24 (R6)
;__Lib_GPIO_32F10x.c, 326 :: 		
0x023A	0xF06F6170  MVN	R1, #251658240
0x023E	0xEA020101  AND	R1, R2, R1, LSL #0
; tmpreg end address is: 8 (R2)
; tmpreg start address is: 24 (R6)
0x0242	0x460E    MOV	R6, R1
;__Lib_GPIO_32F10x.c, 327 :: 		
0x0244	0x492A    LDR	R1, [PC, #168]
0x0246	0x680A    LDR	R2, [R1, #0]
0x0248	0xF06F6170  MVN	R1, #251658240
0x024C	0x400A    ANDS	R2, R1
0x024E	0x4928    LDR	R1, [PC, #160]
0x0250	0x600A    STR	R2, [R1, #0]
;__Lib_GPIO_32F10x.c, 328 :: 		
0x0252	0x4632    MOV	R2, R6
; tmpreg end address is: 24 (R6)
0x0254	0xE016    B	L_GPIO_Alternate_Function_Enable69
L_GPIO_Alternate_Function_Enable68:
;__Lib_GPIO_32F10x.c, 329 :: 		
; tmpreg start address is: 8 (R2)
; tmpmask start address is: 24 (R6)
0x0256	0xF4041180  AND	R1, R4, #1048576
0x025A	0xF5B11F80  CMP	R1, #1048576
0x025E	0xD109    BNE	L_GPIO_Alternate_Function_Enable70
;__Lib_GPIO_32F10x.c, 331 :: 		
0x0260	0xF04F0103  MOV	R1, #3
0x0264	0x40B1    LSLS	R1, R6
; tmpmask end address is: 24 (R6)
;__Lib_GPIO_32F10x.c, 332 :: 		
0x0266	0x43C9    MVN	R1, R1
0x0268	0xEA020101  AND	R1, R2, R1, LSL #0
; tmpreg end address is: 8 (R2)
;__Lib_GPIO_32F10x.c, 333 :: 		
0x026C	0xF0416170  ORR	R1, R1, #251658240
; tmpreg start address is: 4 (R1)
;__Lib_GPIO_32F10x.c, 334 :: 		
0x0270	0x460A    MOV	R2, R1
; tmpreg end address is: 4 (R1)
0x0272	0xE007    B	L_GPIO_Alternate_Function_Enable71
L_GPIO_Alternate_Function_Enable70:
;__Lib_GPIO_32F10x.c, 337 :: 		
; tmpreg start address is: 8 (R2)
0x0274	0x0D61    LSRS	R1, R4, #21
0x0276	0x0109    LSLS	R1, R1, #4
0x0278	0xFA05F101  LSL	R1, R5, R1
0x027C	0x43C9    MVN	R1, R1
0x027E	0x400A    ANDS	R2, R1
; tmpreg end address is: 8 (R2)
;__Lib_GPIO_32F10x.c, 338 :: 		
0x0280	0xF0426270  ORR	R2, R2, #251658240
; tmpreg start address is: 8 (R2)
; tmpreg end address is: 8 (R2)
;__Lib_GPIO_32F10x.c, 339 :: 		
L_GPIO_Alternate_Function_Enable71:
; tmpreg start address is: 8 (R2)
; tmpreg end address is: 8 (R2)
L_GPIO_Alternate_Function_Enable69:
;__Lib_GPIO_32F10x.c, 341 :: 		
; tmpreg start address is: 8 (R2)
0x0284	0xB12B    CBZ	R3, L__GPIO_Alternate_Function_Enable106
; newstate end address is: 12 (R3)
;__Lib_GPIO_32F10x.c, 343 :: 		
0x0286	0x0D61    LSRS	R1, R4, #21
0x0288	0x0109    LSLS	R1, R1, #4
0x028A	0xFA05F101  LSL	R1, R5, R1
; tmp end address is: 20 (R5)
0x028E	0x430A    ORRS	R2, R1
; tmpreg end address is: 8 (R2)
;__Lib_GPIO_32F10x.c, 344 :: 		
0x0290	0xE7FF    B	L_GPIO_Alternate_Function_Enable72
L__GPIO_Alternate_Function_Enable106:
;__Lib_GPIO_32F10x.c, 341 :: 		
;__Lib_GPIO_32F10x.c, 344 :: 		
L_GPIO_Alternate_Function_Enable72:
;__Lib_GPIO_32F10x.c, 346 :: 		
; tmpreg start address is: 8 (R2)
0x0292	0xF0044100  AND	R1, R4, #-2147483648
; gpio_remap end address is: 16 (R4)
0x0296	0xF1B14F00  CMP	R1, #-2147483648
0x029A	0xD102    BNE	L_GPIO_Alternate_Function_Enable73
;__Lib_GPIO_32F10x.c, 348 :: 		
0x029C	0x4913    LDR	R1, [PC, #76]
0x029E	0x600A    STR	R2, [R1, #0]
; tmpreg end address is: 8 (R2)
;__Lib_GPIO_32F10x.c, 349 :: 		
0x02A0	0xE001    B	L_GPIO_Alternate_Function_Enable74
L_GPIO_Alternate_Function_Enable73:
;__Lib_GPIO_32F10x.c, 352 :: 		
; tmpreg start address is: 8 (R2)
0x02A2	0x4913    LDR	R1, [PC, #76]
0x02A4	0x600A    STR	R2, [R1, #0]
; tmpreg end address is: 8 (R2)
;__Lib_GPIO_32F10x.c, 353 :: 		
L_GPIO_Alternate_Function_Enable74:
;__Lib_GPIO_32F10x.c, 356 :: 		
; i start address is: 40 (R10)
0x02A6	0xF2400A00  MOVW	R10, #0
; module end address is: 0 (R0)
; i end address is: 40 (R10)
0x02AA	0x4681    MOV	R9, R0
;__Lib_GPIO_32F10x.c, 357 :: 		
L_GPIO_Alternate_Function_Enable75:
; i start address is: 40 (R10)
; module start address is: 36 (R9)
0x02AC	0xEA4F018A  LSL	R1, R10, #2
0x02B0	0xEB090101  ADD	R1, R9, R1, LSL #0
0x02B4	0x6809    LDR	R1, [R1, #0]
0x02B6	0xF1B13FFF  CMP	R1, #-1
0x02BA	0xD010    BEQ	L_GPIO_Alternate_Function_Enable76
;__Lib_GPIO_32F10x.c, 358 :: 		
0x02BC	0xF1090134  ADD	R1, R9, #52
0x02C0	0xEA4F038A  LSL	R3, R10, #2
0x02C4	0x18C9    ADDS	R1, R1, R3
0x02C6	0x6809    LDR	R1, [R1, #0]
0x02C8	0x460A    MOV	R2, R1
0x02CA	0xEB090103  ADD	R1, R9, R3, LSL #0
0x02CE	0x6809    LDR	R1, [R1, #0]
0x02D0	0x4608    MOV	R0, R1
0x02D2	0x4611    MOV	R1, R2
0x02D4	0xF7FFFF3C  BL	__Lib_GPIO_32F10x_GPIO_Configure_Pin+0
;__Lib_GPIO_32F10x.c, 359 :: 		
0x02D8	0xF10A0A01  ADD	R10, R10, #1
;__Lib_GPIO_32F10x.c, 360 :: 		
; module end address is: 36 (R9)
; i end address is: 40 (R10)
0x02DC	0xE7E6    B	L_GPIO_Alternate_Function_Enable75
L_GPIO_Alternate_Function_Enable76:
;__Lib_GPIO_32F10x.c, 363 :: 		
L_end_GPIO_Alternate_Function_Enable:
0x02DE	0xF8DDE000  LDR	LR, [SP, #0]
0x02E2	0xB001    ADD	SP, SP, #4
0x02E4	0x4770    BX	LR
0x02E6	0xBF00    NOP
0x02E8	0x03004242  	RCC_APB2ENRbits+0
0x02EC	0x001C4001  	AFIO_MAPR2+0
0x02F0	0x00044001  	AFIO_MAPR+0
; end of _GPIO_Alternate_Function_Enable
__Lib_GPIO_32F10x_GPIO_Configure_Pin:
;__Lib_GPIO_32F10x.c, 282 :: 		
; config start address is: 4 (R1)
; af_pin start address is: 0 (R0)
0x0150	0xB083    SUB	SP, SP, #12
0x0152	0xF8CDE000  STR	LR, [SP, #0]
; config end address is: 4 (R1)
; af_pin end address is: 0 (R0)
; af_pin start address is: 0 (R0)
; config start address is: 4 (R1)
;__Lib_GPIO_32F10x.c, 286 :: 		
0x0156	0xF00003FF  AND	R3, R0, #255
; af_pin end address is: 0 (R0)
0x015A	0x091A    LSRS	R2, R3, #4
; port start address is: 0 (R0)
0x015C	0x4610    MOV	R0, R2
;__Lib_GPIO_32F10x.c, 287 :: 		
0x015E	0xF003020F  AND	R2, R3, #15
; pin start address is: 12 (R3)
0x0162	0x4613    MOV	R3, R2
;__Lib_GPIO_32F10x.c, 290 :: 		
0x0164	0xE014    B	L___Lib_GPIO_32F10x_GPIO_Configure_Pin57
; port end address is: 0 (R0)
;__Lib_GPIO_32F10x.c, 291 :: 		
L___Lib_GPIO_32F10x_GPIO_Configure_Pin59:
0x0166	0x4A18    LDR	R2, [PC, #96]
0x0168	0x9202    STR	R2, [SP, #8]
0x016A	0xE01F    B	L___Lib_GPIO_32F10x_GPIO_Configure_Pin58
;__Lib_GPIO_32F10x.c, 292 :: 		
L___Lib_GPIO_32F10x_GPIO_Configure_Pin60:
0x016C	0x4A17    LDR	R2, [PC, #92]
0x016E	0x9202    STR	R2, [SP, #8]
0x0170	0xE01C    B	L___Lib_GPIO_32F10x_GPIO_Configure_Pin58
;__Lib_GPIO_32F10x.c, 293 :: 		
L___Lib_GPIO_32F10x_GPIO_Configure_Pin61:
0x0172	0x4A17    LDR	R2, [PC, #92]
0x0174	0x9202    STR	R2, [SP, #8]
0x0176	0xE019    B	L___Lib_GPIO_32F10x_GPIO_Configure_Pin58
;__Lib_GPIO_32F10x.c, 294 :: 		
L___Lib_GPIO_32F10x_GPIO_Configure_Pin62:
0x0178	0x4A16    LDR	R2, [PC, #88]
0x017A	0x9202    STR	R2, [SP, #8]
0x017C	0xE016    B	L___Lib_GPIO_32F10x_GPIO_Configure_Pin58
;__Lib_GPIO_32F10x.c, 295 :: 		
L___Lib_GPIO_32F10x_GPIO_Configure_Pin63:
0x017E	0x4A16    LDR	R2, [PC, #88]
0x0180	0x9202    STR	R2, [SP, #8]
0x0182	0xE013    B	L___Lib_GPIO_32F10x_GPIO_Configure_Pin58
;__Lib_GPIO_32F10x.c, 296 :: 		
L___Lib_GPIO_32F10x_GPIO_Configure_Pin64:
0x0184	0x4A15    LDR	R2, [PC, #84]
0x0186	0x9202    STR	R2, [SP, #8]
0x0188	0xE010    B	L___Lib_GPIO_32F10x_GPIO_Configure_Pin58
;__Lib_GPIO_32F10x.c, 297 :: 		
L___Lib_GPIO_32F10x_GPIO_Configure_Pin65:
0x018A	0x4A15    LDR	R2, [PC, #84]
0x018C	0x9202    STR	R2, [SP, #8]
0x018E	0xE00D    B	L___Lib_GPIO_32F10x_GPIO_Configure_Pin58
;__Lib_GPIO_32F10x.c, 298 :: 		
L___Lib_GPIO_32F10x_GPIO_Configure_Pin57:
; port start address is: 0 (R0)
0x0190	0x2800    CMP	R0, #0
0x0192	0xD0E8    BEQ	L___Lib_GPIO_32F10x_GPIO_Configure_Pin59
0x0194	0x2801    CMP	R0, #1
0x0196	0xD0E9    BEQ	L___Lib_GPIO_32F10x_GPIO_Configure_Pin60
0x0198	0x2802    CMP	R0, #2
0x019A	0xD0EA    BEQ	L___Lib_GPIO_32F10x_GPIO_Configure_Pin61
0x019C	0x2803    CMP	R0, #3
0x019E	0xD0EB    BEQ	L___Lib_GPIO_32F10x_GPIO_Configure_Pin62
0x01A0	0x2804    CMP	R0, #4
0x01A2	0xD0EC    BEQ	L___Lib_GPIO_32F10x_GPIO_Configure_Pin63
0x01A4	0x2805    CMP	R0, #5
0x01A6	0xD0ED    BEQ	L___Lib_GPIO_32F10x_GPIO_Configure_Pin64
0x01A8	0x2806    CMP	R0, #6
0x01AA	0xD0EE    BEQ	L___Lib_GPIO_32F10x_GPIO_Configure_Pin65
; port end address is: 0 (R0)
L___Lib_GPIO_32F10x_GPIO_Configure_Pin58:
;__Lib_GPIO_32F10x.c, 300 :: 		
0x01AC	0x2201    MOVS	R2, #1
0x01AE	0x409A    LSLS	R2, R3
; pin end address is: 12 (R3)
0x01B0	0xF8AD2004  STRH	R2, [SP, #4]
; config end address is: 4 (R1)
0x01B4	0x9802    LDR	R0, [SP, #8]
0x01B6	0x460A    MOV	R2, R1
0x01B8	0xF8BD1004  LDRH	R1, [SP, #4]
0x01BC	0xF000FE30  BL	_GPIO_Config+0
;__Lib_GPIO_32F10x.c, 301 :: 		
L_end_GPIO_Configure_Pin:
0x01C0	0xF8DDE000  LDR	LR, [SP, #0]
0x01C4	0xB003    ADD	SP, SP, #12
0x01C6	0x4770    BX	LR
0x01C8	0x08004001  	#1073809408
0x01CC	0x0C004001  	#1073810432
0x01D0	0x10004001  	#1073811456
0x01D4	0x14004001  	#1073812480
0x01D8	0x18004001  	#1073813504
0x01DC	0x1C004001  	#1073814528
0x01E0	0x20004001  	#1073815552
; end of __Lib_GPIO_32F10x_GPIO_Configure_Pin
_vSPI2Init:
;driverspi.c, 32 :: 		void vSPI2Init ( void ) {
0x1EE4	0xB081    SUB	SP, SP, #4
0x1EE6	0xF8CDE000  STR	LR, [SP, #0]
;driverspi.c, 34 :: 		_SPI_SS_DISABLE | _SPI_SSM_ENABLE | _SPI_SSI_1, &_GPIO_MODULE_SPI2_PB13_14_15 );
0x1EEA	0x4A09    LDR	R2, [PC, #36]
0x1EEC	0xF2403104  MOVW	R1, #772
;driverspi.c, 33 :: 		SPI2_Init_Advanced( _SPI_FPCLK_DIV8, _SPI_MASTER | _SPI_8_BIT | _SPI_CLK_IDLE_LOW | _SPI_FIRST_CLK_EDGE_TRANSITION | _SPI_MSB_FIRST |
0x1EF0	0x2002    MOVS	R0, #2
;driverspi.c, 34 :: 		_SPI_SS_DISABLE | _SPI_SSM_ENABLE | _SPI_SSI_1, &_GPIO_MODULE_SPI2_PB13_14_15 );
0x1EF2	0xF7FFF8E3  BL	_SPI2_Init_Advanced+0
;driverspi.c, 36 :: 		SPI2_CR2bits.RXNEIE  = 1;     // habilitacion de ISR para RX
0x1EF6	0x2101    MOVS	R1, #1
0x1EF8	0xB249    SXTB	R1, R1
0x1EFA	0x4806    LDR	R0, [PC, #24]
0x1EFC	0x6001    STR	R1, [R0, #0]
;driverspi.c, 38 :: 		NVIC_IntEnable( IVT_INT_SPI2 );
0x1EFE	0xF2400034  MOVW	R0, #52
0x1F02	0xF7FFF887  BL	_NVIC_IntEnable+0
;driverspi.c, 39 :: 		}
L_end_vSPI2Init:
0x1F06	0xF8DDE000  LDR	LR, [SP, #0]
0x1F0A	0xB001    ADD	SP, SP, #4
0x1F0C	0x4770    BX	LR
0x1F0E	0xBF00    NOP
0x1F10	0x2DBC0000  	__GPIO_MODULE_SPI2_PB13_14_15+0
0x1F14	0x00984207  	SPI2_CR2bits+0
; end of _vSPI2Init
_SPI2_Init_Advanced:
;__Lib_SPI_123.c, 107 :: 		
; module start address is: 8 (R2)
0x10BC	0xB083    SUB	SP, SP, #12
0x10BE	0xF8CDE000  STR	LR, [SP, #0]
0x10C2	0xF88D0004  STRB	R0, [SP, #4]
0x10C6	0x9102    STR	R1, [SP, #8]
; module end address is: 8 (R2)
; module start address is: 8 (R2)
;__Lib_SPI_123.c, 108 :: 		
0x10C8	0x4C0B    LDR	R4, [PC, #44]
0x10CA	0x4B0C    LDR	R3, [PC, #48]
0x10CC	0x601C    STR	R4, [R3, #0]
;__Lib_SPI_123.c, 109 :: 		
0x10CE	0x4C0C    LDR	R4, [PC, #48]
0x10D0	0x4B0C    LDR	R3, [PC, #48]
0x10D2	0x601C    STR	R4, [R3, #0]
;__Lib_SPI_123.c, 111 :: 		
0x10D4	0x2401    MOVS	R4, #1
0x10D6	0xB264    SXTB	R4, R4
0x10D8	0x4B0B    LDR	R3, [PC, #44]
0x10DA	0x601C    STR	R4, [R3, #0]
;__Lib_SPI_123.c, 112 :: 		
0x10DC	0x4610    MOV	R0, R2
; module end address is: 8 (R2)
0x10DE	0xF7FFF881  BL	_GPIO_Alternate_Function_Enable+0
;__Lib_SPI_123.c, 114 :: 		
0x10E2	0x9A02    LDR	R2, [SP, #8]
0x10E4	0xF89D1004  LDRB	R1, [SP, #4]
0x10E8	0x4808    LDR	R0, [PC, #32]
0x10EA	0xF7FFF981  BL	__Lib_SPI_123_SPIx_Init_Advanced+0
;__Lib_SPI_123.c, 115 :: 		
L_end_SPI2_Init_Advanced:
0x10EE	0xF8DDE000  LDR	LR, [SP, #0]
0x10F2	0xB003    ADD	SP, SP, #12
0x10F4	0x4770    BX	LR
0x10F6	0xBF00    NOP
0x10F8	0xFFFFFFFF  	_SPI2_Read+0
0x10FC	0x01BC2000  	_SPI_Rd_Ptr+0
0x1100	0xFFFFFFFF  	_SPI2_Write+0
0x1104	0x01C02000  	_SPI_Wr_Ptr+0
0x1108	0x03B84242  	RCC_APB1ENR+0
0x110C	0x38004000  	SPI2_CR1+0
; end of _SPI2_Init_Advanced
__Lib_SPI_123_SPIx_Init_Advanced:
;__Lib_SPI_123.c, 53 :: 		
; config start address is: 8 (R2)
; clock_divider start address is: 4 (R1)
; base start address is: 0 (R0)
0x03F0	0xB081    SUB	SP, SP, #4
; config end address is: 8 (R2)
; clock_divider end address is: 4 (R1)
; base end address is: 0 (R0)
; base start address is: 0 (R0)
; clock_divider start address is: 4 (R1)
; config start address is: 8 (R2)
;__Lib_SPI_123.c, 56 :: 		
0x03F2	0x2300    MOVS	R3, #0
0x03F4	0x6003    STR	R3, [R0, #0]
;__Lib_SPI_123.c, 58 :: 		
0x03F6	0x00CB    LSLS	R3, R1, #3
0x03F8	0xB29B    UXTH	R3, R3
; clock_divider end address is: 4 (R1)
0x03FA	0xEA420303  ORR	R3, R2, R3, LSL #0
;__Lib_SPI_123.c, 60 :: 		
0x03FE	0x6804    LDR	R4, [R0, #0]
0x0400	0xB29B    UXTH	R3, R3
0x0402	0xEA440303  ORR	R3, R4, R3, LSL #0
0x0406	0x6003    STR	R3, [R0, #0]
;__Lib_SPI_123.c, 61 :: 		
0x0408	0x1D05    ADDS	R5, R0, #4
0x040A	0x1413    ASRS	R3, R2, #16
; config end address is: 8 (R2)
0x040C	0x461C    MOV	R4, R3
0x040E	0x682B    LDR	R3, [R5, #0]
0x0410	0xF3640382  BFI	R3, R4, #2, #1
0x0414	0x602B    STR	R3, [R5, #0]
;__Lib_SPI_123.c, 63 :: 		
0x0416	0xF200051C  ADDW	R5, R0, #28
0x041A	0x2400    MOVS	R4, #0
0x041C	0x682B    LDR	R3, [R5, #0]
0x041E	0xF36423CB  BFI	R3, R4, #11, #1
0x0422	0x602B    STR	R3, [R5, #0]
;__Lib_SPI_123.c, 64 :: 		
0x0424	0x2401    MOVS	R4, #1
0x0426	0x6803    LDR	R3, [R0, #0]
0x0428	0xF3641386  BFI	R3, R4, #6, #1
0x042C	0x6003    STR	R3, [R0, #0]
; base end address is: 0 (R0)
;__Lib_SPI_123.c, 65 :: 		
L_end_SPIx_Init_Advanced:
0x042E	0xB001    ADD	SP, SP, #4
0x0430	0x4770    BX	LR
; end of __Lib_SPI_123_SPIx_Init_Advanced
_VRF4463SDNReset:
;driverrf4463pro.c, 925 :: 		void VRF4463SDNReset( void ) {
0x1E60	0xB081    SUB	SP, SP, #4
0x1E62	0xF8CDE000  STR	LR, [SP, #0]
;driverrf4463pro.c, 928 :: 		SDN = 1;
0x1E66	0x2101    MOVS	R1, #1
0x1E68	0xB249    SXTB	R1, R1
0x1E6A	0x481B    LDR	R0, [PC, #108]
0x1E6C	0x6001    STR	R1, [R0, #0]
;driverrf4463pro.c, 929 :: 		Delay_ms( 6 );        // delay_1ms( 2 );        // RF Module reset  DELAY
0x1E6E	0xF641173F  MOVW	R7, #6463
0x1E72	0xF2C00701  MOVT	R7, #1
0x1E76	0xBF00    NOP
0x1E78	0xBF00    NOP
L_VRF4463SDNReset143:
0x1E7A	0x1E7F    SUBS	R7, R7, #1
0x1E7C	0xD1FD    BNE	L_VRF4463SDNReset143
0x1E7E	0xBF00    NOP
0x1E80	0xBF00    NOP
0x1E82	0xBF00    NOP
;driverrf4463pro.c, 930 :: 		SDN = 0;
0x1E84	0x2100    MOVS	R1, #0
0x1E86	0xB249    SXTB	R1, R1
0x1E88	0x4813    LDR	R0, [PC, #76]
0x1E8A	0x6001    STR	R1, [R0, #0]
;driverrf4463pro.c, 931 :: 		Delay_ms( 10 );       // delay_1ms( 10 );        // Delay 10ms for RF module to enter working state
0x1E8C	0xF24D47BF  MOVW	R7, #54463
0x1E90	0xF2C00701  MOVT	R7, #1
0x1E94	0xBF00    NOP
0x1E96	0xBF00    NOP
L_VRF4463SDNReset145:
0x1E98	0x1E7F    SUBS	R7, R7, #1
0x1E9A	0xD1FD    BNE	L_VRF4463SDNReset145
0x1E9C	0xBF00    NOP
0x1E9E	0xBF00    NOP
0x1EA0	0xBF00    NOP
;driverrf4463pro.c, 933 :: 		nSEL = 1;
0x1EA2	0x2101    MOVS	R1, #1
0x1EA4	0xB249    SXTB	R1, R1
0x1EA6	0x480D    LDR	R0, [PC, #52]
0x1EA8	0x6001    STR	R1, [R0, #0]
;driverrf4463pro.c, 935 :: 		nSEL = 0;
0x1EAA	0x2100    MOVS	R1, #0
0x1EAC	0xB249    SXTB	R1, R1
0x1EAE	0x480B    LDR	R0, [PC, #44]
0x1EB0	0x6001    STR	R1, [R0, #0]
;driverrf4463pro.c, 936 :: 		for ( i = 0; i < 7; i++ ) {
; i start address is: 12 (R3)
0x1EB2	0x2300    MOVS	R3, #0
; i end address is: 12 (R3)
L_VRF4463SDNReset147:
; i start address is: 12 (R3)
0x1EB4	0x2B07    CMP	R3, #7
0x1EB6	0xD207    BCS	L_VRF4463SDNReset148
;driverrf4463pro.c, 937 :: 		ucRf4463SPIByte( RF_POWER_UP_data[ i ] );   // send power up Command
0x1EB8	0x4809    LDR	R0, [PC, #36]
0x1EBA	0x18C0    ADDS	R0, R0, R3
0x1EBC	0x7800    LDRB	R0, [R0, #0]
0x1EBE	0xF7FEFA6D  BL	_ucRf4463SPIByte+0
;driverrf4463pro.c, 936 :: 		for ( i = 0; i < 7; i++ ) {
0x1EC2	0x1C5B    ADDS	R3, R3, #1
0x1EC4	0xB2DB    UXTB	R3, R3
;driverrf4463pro.c, 938 :: 		}
; i end address is: 12 (R3)
0x1EC6	0xE7F5    B	L_VRF4463SDNReset147
L_VRF4463SDNReset148:
;driverrf4463pro.c, 939 :: 		nSEL = 1;
0x1EC8	0x2101    MOVS	R1, #1
0x1ECA	0xB249    SXTB	R1, R1
0x1ECC	0x4803    LDR	R0, [PC, #12]
0x1ECE	0x6001    STR	R1, [R0, #0]
;driverrf4463pro.c, 942 :: 		}
L_end_VRF4463SDNReset:
0x1ED0	0xF8DDE000  LDR	LR, [SP, #0]
0x1ED4	0xB001    ADD	SP, SP, #4
0x1ED6	0x4770    BX	LR
0x1ED8	0x81AC4221  	GPIOB_ODRbits+0
0x1EDC	0x81B04221  	GPIOB_ODRbits+0
0x1EE0	0x32200000  	_RF_POWER_UP_data+0
; end of _VRF4463SDNReset
_ucRf4463SPIByte:
;driverrf4463pro.c, 761 :: 		unsigned char ucRf4463SPIByte( unsigned char ucData ) {
; ucData start address is: 0 (R0)
0x039C	0xB081    SUB	SP, SP, #4
; ucData end address is: 0 (R0)
; ucData start address is: 0 (R0)
;driverrf4463pro.c, 764 :: 		ucSPI2ByteReceived = 0;
0x039E	0x2200    MOVS	R2, #0
0x03A0	0x4907    LDR	R1, [PC, #28]
0x03A2	0x700A    STRB	R2, [R1, #0]
;driverrf4463pro.c, 766 :: 		SPI2_DR = ucData;
0x03A4	0x4907    LDR	R1, [PC, #28]
0x03A6	0x6008    STR	R0, [R1, #0]
; ucData end address is: 0 (R0)
;driverrf4463pro.c, 774 :: 		while ( !SPI2_SRbits.TXE );                // espera a que el buffer este vacio
L_ucRf4463SPIByte105:
0x03A8	0x4907    LDR	R1, [PC, #28]
0x03AA	0x6809    LDR	R1, [R1, #0]
0x03AC	0xB901    CBNZ	R1, L_ucRf4463SPIByte106
0x03AE	0xE7FB    B	L_ucRf4463SPIByte105
L_ucRf4463SPIByte106:
;driverrf4463pro.c, 776 :: 		while ( SPI2_SRbits.BSY );                // espera a que el buffer este vacio
L_ucRf4463SPIByte107:
0x03B0	0x4906    LDR	R1, [PC, #24]
0x03B2	0x6809    LDR	R1, [R1, #0]
0x03B4	0xB101    CBZ	R1, L_ucRf4463SPIByte108
0x03B6	0xE7FB    B	L_ucRf4463SPIByte107
L_ucRf4463SPIByte108:
;driverrf4463pro.c, 779 :: 		return ( ucSPI2ByteReceived );
0x03B8	0x4901    LDR	R1, [PC, #4]
0x03BA	0x7808    LDRB	R0, [R1, #0]
;driverrf4463pro.c, 780 :: 		}
L_end_ucRf4463SPIByte:
0x03BC	0xB001    ADD	SP, SP, #4
0x03BE	0x4770    BX	LR
0x03C0	0x01392000  	_ucSPI2ByteReceived+0
0x03C4	0x380C4000  	SPI2_DR+0
0x03C8	0x01044207  	SPI2_SRbits+0
0x03CC	0x011C4207  	SPI2_SRbits+0
; end of _ucRf4463SPIByte
_vRF4463Init:
;driverrf4463pro.c, 42 :: 		void vRF4463Init ( void ) {  // MODE,
0x1584	0xB08B    SUB	SP, SP, #44
0x1586	0xF8CDE000  STR	LR, [SP, #0]
;driverrf4463pro.c, 44 :: 		unsigned char cleanBuffer[ 20 ]={0x00};
0x158A	0xF10D0B18  ADD	R11, SP, #24
0x158E	0xF10B0A14  ADD	R10, R11, #20
0x1592	0xF8DFC2B0  LDR	R12, [PC, #688]
0x1596	0xF7FFFE4B  BL	___CC2DW+0
;driverrf4463pro.c, 46 :: 		for ( i = 4; i < 16; i++ ) {
; i start address is: 12 (R3)
0x159A	0x2304    MOVS	R3, #4
; i end address is: 12 (R3)
L_vRF4463Init2:
; i start address is: 12 (R3)
0x159C	0x2B10    CMP	R3, #16
0x159E	0xD20F    BCS	L_vRF4463Init3
;driverrf4463pro.c, 47 :: 		RF_MODEM_MOD_TYPE_12_data[ i ] = RF_MODEM_MOD_TYPE_12[ rate ][ i - 4 ];
0x15A0	0x48A9    LDR	R0, [PC, #676]
0x15A2	0x18C2    ADDS	R2, R0, R3
0x15A4	0x48A9    LDR	R0, [PC, #676]
0x15A6	0x7801    LDRB	R1, [R0, #0]
0x15A8	0x200C    MOVS	R0, #12
0x15AA	0x4341    MULS	R1, R0, R1
0x15AC	0x48A8    LDR	R0, [PC, #672]
0x15AE	0x1841    ADDS	R1, R0, R1
0x15B0	0x1F18    SUBS	R0, R3, #4
0x15B2	0xB200    SXTH	R0, R0
0x15B4	0x1808    ADDS	R0, R1, R0
0x15B6	0x7800    LDRB	R0, [R0, #0]
0x15B8	0x7010    STRB	R0, [R2, #0]
;driverrf4463pro.c, 46 :: 		for ( i = 4; i < 16; i++ ) {
0x15BA	0x1C5B    ADDS	R3, R3, #1
0x15BC	0xB2DB    UXTB	R3, R3
;driverrf4463pro.c, 48 :: 		}
; i end address is: 12 (R3)
0x15BE	0xE7ED    B	L_vRF4463Init2
L_vRF4463Init3:
;driverrf4463pro.c, 51 :: 		if ( freq3 < 8 ) {
0x15C0	0x48A4    LDR	R0, [PC, #656]
0x15C2	0x7800    LDRB	R0, [R0, #0]
0x15C4	0x2808    CMP	R0, #8
0x15C6	0xF0808098  BCS	L_vRF4463Init5
;driverrf4463pro.c, 52 :: 		for ( i = 4; i < 12; i++ ) {
; i start address is: 12 (R3)
0x15CA	0x2304    MOVS	R3, #4
; i end address is: 12 (R3)
L_vRF4463Init6:
; i start address is: 12 (R3)
0x15CC	0x2B0C    CMP	R3, #12
0x15CE	0xD20E    BCS	L_vRF4463Init7
;driverrf4463pro.c, 53 :: 		RF_MODEM_TX_RAMP_DELAY_8_data[ i ] = RF_MODEM_TX_RAMP_DELAY_8_433[ rate ][ i - 4 ];
0x15D0	0x48A1    LDR	R0, [PC, #644]
0x15D2	0x18C2    ADDS	R2, R0, R3
0x15D4	0x489D    LDR	R0, [PC, #628]
0x15D6	0x7800    LDRB	R0, [R0, #0]
0x15D8	0x00C1    LSLS	R1, R0, #3
0x15DA	0x48A0    LDR	R0, [PC, #640]
0x15DC	0x1841    ADDS	R1, R0, R1
0x15DE	0x1F18    SUBS	R0, R3, #4
0x15E0	0xB200    SXTH	R0, R0
0x15E2	0x1808    ADDS	R0, R1, R0
0x15E4	0x7800    LDRB	R0, [R0, #0]
0x15E6	0x7010    STRB	R0, [R2, #0]
;driverrf4463pro.c, 52 :: 		for ( i = 4; i < 12; i++ ) {
0x15E8	0x1C5B    ADDS	R3, R3, #1
0x15EA	0xB2DB    UXTB	R3, R3
;driverrf4463pro.c, 54 :: 		}
; i end address is: 12 (R3)
0x15EC	0xE7EE    B	L_vRF4463Init6
L_vRF4463Init7:
;driverrf4463pro.c, 55 :: 		for ( i = 4; i < 11; i++ ) {
; i start address is: 12 (R3)
0x15EE	0x2304    MOVS	R3, #4
; i end address is: 12 (R3)
L_vRF4463Init9:
; i start address is: 12 (R3)
0x15F0	0x2B0B    CMP	R3, #11
0x15F2	0xD20F    BCS	L_vRF4463Init10
;driverrf4463pro.c, 56 :: 		RF_MODEM_AFC_GEAR_7_data[ i ] = RF_MODEM_AFC_GEAR_7_433[ rate ][ i - 4 ];
0x15F4	0x489A    LDR	R0, [PC, #616]
0x15F6	0x18C2    ADDS	R2, R0, R3
0x15F8	0x4894    LDR	R0, [PC, #592]
0x15FA	0x7801    LDRB	R1, [R0, #0]
0x15FC	0x2007    MOVS	R0, #7
0x15FE	0x4341    MULS	R1, R0, R1
0x1600	0x4898    LDR	R0, [PC, #608]
0x1602	0x1841    ADDS	R1, R0, R1
0x1604	0x1F18    SUBS	R0, R3, #4
0x1606	0xB200    SXTH	R0, R0
0x1608	0x1808    ADDS	R0, R1, R0
0x160A	0x7800    LDRB	R0, [R0, #0]
0x160C	0x7010    STRB	R0, [R2, #0]
;driverrf4463pro.c, 55 :: 		for ( i = 4; i < 11; i++ ) {
0x160E	0x1C5B    ADDS	R3, R3, #1
0x1610	0xB2DB    UXTB	R3, R3
;driverrf4463pro.c, 57 :: 		}
; i end address is: 12 (R3)
0x1612	0xE7ED    B	L_vRF4463Init9
L_vRF4463Init10:
;driverrf4463pro.c, 58 :: 		for ( i = 4; i < 15; i++ ) {
; i start address is: 12 (R3)
0x1614	0x2304    MOVS	R3, #4
; i end address is: 12 (R3)
L_vRF4463Init12:
; i start address is: 12 (R3)
0x1616	0x2B0F    CMP	R3, #15
0x1618	0xD20F    BCS	L_vRF4463Init13
;driverrf4463pro.c, 59 :: 		RF_MODEM_OOK_CNT1_11_data[ i ] = RF_MODEM_OOK_CNT1_11_433[ rate ][ i - 4 ];
0x161A	0x4893    LDR	R0, [PC, #588]
0x161C	0x18C2    ADDS	R2, R0, R3
0x161E	0x488B    LDR	R0, [PC, #556]
0x1620	0x7801    LDRB	R1, [R0, #0]
0x1622	0x200B    MOVS	R0, #11
0x1624	0x4341    MULS	R1, R0, R1
0x1626	0x4891    LDR	R0, [PC, #580]
0x1628	0x1841    ADDS	R1, R0, R1
0x162A	0x1F18    SUBS	R0, R3, #4
0x162C	0xB200    SXTH	R0, R0
0x162E	0x1808    ADDS	R0, R1, R0
0x1630	0x7800    LDRB	R0, [R0, #0]
0x1632	0x7010    STRB	R0, [R2, #0]
;driverrf4463pro.c, 58 :: 		for ( i = 4; i < 15; i++ ) {
0x1634	0x1C5B    ADDS	R3, R3, #1
0x1636	0xB2DB    UXTB	R3, R3
;driverrf4463pro.c, 60 :: 		}
; i end address is: 12 (R3)
0x1638	0xE7ED    B	L_vRF4463Init12
L_vRF4463Init13:
;driverrf4463pro.c, 61 :: 		for ( i = 4; i < 16; i++ ) {
; i start address is: 12 (R3)
0x163A	0x2304    MOVS	R3, #4
; i end address is: 12 (R3)
L_vRF4463Init15:
; i start address is: 12 (R3)
0x163C	0x2B10    CMP	R3, #16
0x163E	0xD20F    BCS	L_vRF4463Init16
;driverrf4463pro.c, 62 :: 		RF_MODEM_CHFLT_RX1_CHFLT_COE13_7_0_12_data[ i ] = RF_MODEM_CHFLT_RX1_CHFLT_COE13_7_0_12_433[ rate ][ i - 4 ];
0x1640	0x488B    LDR	R0, [PC, #556]
0x1642	0x18C2    ADDS	R2, R0, R3
0x1644	0x4881    LDR	R0, [PC, #516]
0x1646	0x7801    LDRB	R1, [R0, #0]
0x1648	0x200C    MOVS	R0, #12
0x164A	0x4341    MULS	R1, R0, R1
0x164C	0x4889    LDR	R0, [PC, #548]
0x164E	0x1841    ADDS	R1, R0, R1
0x1650	0x1F18    SUBS	R0, R3, #4
0x1652	0xB200    SXTH	R0, R0
0x1654	0x1808    ADDS	R0, R1, R0
0x1656	0x7800    LDRB	R0, [R0, #0]
0x1658	0x7010    STRB	R0, [R2, #0]
;driverrf4463pro.c, 61 :: 		for ( i = 4; i < 16; i++ ) {
0x165A	0x1C5B    ADDS	R3, R3, #1
0x165C	0xB2DB    UXTB	R3, R3
;driverrf4463pro.c, 63 :: 		}
; i end address is: 12 (R3)
0x165E	0xE7ED    B	L_vRF4463Init15
L_vRF4463Init16:
;driverrf4463pro.c, 64 :: 		for ( i = 4; i < 16; i++ ) {
; i start address is: 12 (R3)
0x1660	0x2304    MOVS	R3, #4
; i end address is: 12 (R3)
L_vRF4463Init18:
; i start address is: 12 (R3)
0x1662	0x2B10    CMP	R3, #16
0x1664	0xD20F    BCS	L_vRF4463Init19
;driverrf4463pro.c, 65 :: 		RF_MODEM_CHFLT_RX1_CHFLT_COE1_7_0_12_data[ i ] = RF_MODEM_CHFLT_RX1_CHFLT_COE1_7_0_12_433[ rate ][ i - 4 ];
0x1666	0x4884    LDR	R0, [PC, #528]
0x1668	0x18C2    ADDS	R2, R0, R3
0x166A	0x4878    LDR	R0, [PC, #480]
0x166C	0x7801    LDRB	R1, [R0, #0]
0x166E	0x200C    MOVS	R0, #12
0x1670	0x4341    MULS	R1, R0, R1
0x1672	0x4882    LDR	R0, [PC, #520]
0x1674	0x1841    ADDS	R1, R0, R1
0x1676	0x1F18    SUBS	R0, R3, #4
0x1678	0xB200    SXTH	R0, R0
0x167A	0x1808    ADDS	R0, R1, R0
0x167C	0x7800    LDRB	R0, [R0, #0]
0x167E	0x7010    STRB	R0, [R2, #0]
;driverrf4463pro.c, 64 :: 		for ( i = 4; i < 16; i++ ) {
0x1680	0x1C5B    ADDS	R3, R3, #1
0x1682	0xB2DB    UXTB	R3, R3
;driverrf4463pro.c, 66 :: 		}
; i end address is: 12 (R3)
0x1684	0xE7ED    B	L_vRF4463Init18
L_vRF4463Init19:
;driverrf4463pro.c, 67 :: 		for ( i = 4; i < 16; i++ ) {
; i start address is: 12 (R3)
0x1686	0x2304    MOVS	R3, #4
; i end address is: 12 (R3)
L_vRF4463Init21:
; i start address is: 12 (R3)
0x1688	0x2B10    CMP	R3, #16
0x168A	0xD20F    BCS	L_vRF4463Init22
;driverrf4463pro.c, 68 :: 		RF_MODEM_CHFLT_RX2_CHFLT_COE7_7_0_12_data[ i ] = RF_MODEM_CHFLT_RX2_CHFLT_COE7_7_0_12_433[ rate ][ i - 4 ];
0x168C	0x487C    LDR	R0, [PC, #496]
0x168E	0x18C2    ADDS	R2, R0, R3
0x1690	0x486E    LDR	R0, [PC, #440]
0x1692	0x7801    LDRB	R1, [R0, #0]
0x1694	0x200C    MOVS	R0, #12
0x1696	0x4341    MULS	R1, R0, R1
0x1698	0x487A    LDR	R0, [PC, #488]
0x169A	0x1841    ADDS	R1, R0, R1
0x169C	0x1F18    SUBS	R0, R3, #4
0x169E	0xB200    SXTH	R0, R0
0x16A0	0x1808    ADDS	R0, R1, R0
0x16A2	0x7800    LDRB	R0, [R0, #0]
0x16A4	0x7010    STRB	R0, [R2, #0]
;driverrf4463pro.c, 67 :: 		for ( i = 4; i < 16; i++ ) {
0x16A6	0x1C5B    ADDS	R3, R3, #1
0x16A8	0xB2DB    UXTB	R3, R3
;driverrf4463pro.c, 69 :: 		}
; i end address is: 12 (R3)
0x16AA	0xE7ED    B	L_vRF4463Init21
L_vRF4463Init22:
;driverrf4463pro.c, 70 :: 		for ( i = 4; i < 13; i++ ) {
; i start address is: 12 (R3)
0x16AC	0x2304    MOVS	R3, #4
; i end address is: 12 (R3)
L_vRF4463Init24:
; i start address is: 12 (R3)
0x16AE	0x2B0D    CMP	R3, #13
0x16B0	0xD20F    BCS	L_vRF4463Init25
;driverrf4463pro.c, 71 :: 		RF_MODEM_AGC_WINDOW_SIZE_9_data[ i ] = RF_MODEM_AGC_WINDOW_SIZE_9_433[ rate ][ i - 4 ];
0x16B2	0x4875    LDR	R0, [PC, #468]
0x16B4	0x18C2    ADDS	R2, R0, R3
0x16B6	0x4865    LDR	R0, [PC, #404]
0x16B8	0x7801    LDRB	R1, [R0, #0]
0x16BA	0x2009    MOVS	R0, #9
0x16BC	0x4341    MULS	R1, R0, R1
0x16BE	0x4873    LDR	R0, [PC, #460]
0x16C0	0x1841    ADDS	R1, R0, R1
0x16C2	0x1F18    SUBS	R0, R3, #4
0x16C4	0xB200    SXTH	R0, R0
0x16C6	0x1808    ADDS	R0, R1, R0
0x16C8	0x7800    LDRB	R0, [R0, #0]
0x16CA	0x7010    STRB	R0, [R2, #0]
;driverrf4463pro.c, 70 :: 		for ( i = 4; i < 13; i++ ) {
0x16CC	0x1C5B    ADDS	R3, R3, #1
0x16CE	0xB2DB    UXTB	R3, R3
;driverrf4463pro.c, 72 :: 		}
; i end address is: 12 (R3)
0x16D0	0xE7ED    B	L_vRF4463Init24
L_vRF4463Init25:
;driverrf4463pro.c, 73 :: 		for ( i = 4; i < 13; i++ ) {
; i start address is: 12 (R3)
0x16D2	0x2304    MOVS	R3, #4
; i end address is: 12 (R3)
L_vRF4463Init27:
; i start address is: 12 (R3)
0x16D4	0x2B0D    CMP	R3, #13
0x16D6	0xD20F    BCS	L_vRF4463Init28
;driverrf4463pro.c, 74 :: 		RF_MODEM_BCR_OSR_1_9_data[ i ] = RF_MODEM_BCR_OSR_1_9_433[ rate ][ i - 4 ];
0x16D8	0x486D    LDR	R0, [PC, #436]
0x16DA	0x18C2    ADDS	R2, R0, R3
0x16DC	0x485B    LDR	R0, [PC, #364]
0x16DE	0x7801    LDRB	R1, [R0, #0]
0x16E0	0x2009    MOVS	R0, #9
0x16E2	0x4341    MULS	R1, R0, R1
0x16E4	0x486B    LDR	R0, [PC, #428]
0x16E6	0x1841    ADDS	R1, R0, R1
0x16E8	0x1F18    SUBS	R0, R3, #4
0x16EA	0xB200    SXTH	R0, R0
0x16EC	0x1808    ADDS	R0, R1, R0
0x16EE	0x7800    LDRB	R0, [R0, #0]
0x16F0	0x7010    STRB	R0, [R2, #0]
;driverrf4463pro.c, 73 :: 		for ( i = 4; i < 13; i++ ) {
0x16F2	0x1C5B    ADDS	R3, R3, #1
0x16F4	0xB2DB    UXTB	R3, R3
;driverrf4463pro.c, 75 :: 		}
; i end address is: 12 (R3)
0x16F6	0xE7ED    B	L_vRF4463Init27
L_vRF4463Init28:
;driverrf4463pro.c, 76 :: 		}
0x16F8	0xE096    B	L_vRF4463Init30
L_vRF4463Init5:
;driverrf4463pro.c, 78 :: 		for ( i = 4; i < 12; i++ ) {
; i start address is: 12 (R3)
0x16FA	0x2304    MOVS	R3, #4
; i end address is: 12 (R3)
L_vRF4463Init31:
; i start address is: 12 (R3)
0x16FC	0x2B0C    CMP	R3, #12
0x16FE	0xD20E    BCS	L_vRF4463Init32
;driverrf4463pro.c, 79 :: 		RF_MODEM_TX_RAMP_DELAY_8_data[ i ] = RF_MODEM_TX_RAMP_DELAY_8_850[ rate ][ i - 4 ];
0x1700	0x4855    LDR	R0, [PC, #340]
0x1702	0x18C2    ADDS	R2, R0, R3
0x1704	0x4851    LDR	R0, [PC, #324]
0x1706	0x7800    LDRB	R0, [R0, #0]
0x1708	0x00C1    LSLS	R1, R0, #3
0x170A	0x4863    LDR	R0, [PC, #396]
0x170C	0x1841    ADDS	R1, R0, R1
0x170E	0x1F18    SUBS	R0, R3, #4
0x1710	0xB200    SXTH	R0, R0
0x1712	0x1808    ADDS	R0, R1, R0
0x1714	0x7800    LDRB	R0, [R0, #0]
0x1716	0x7010    STRB	R0, [R2, #0]
;driverrf4463pro.c, 78 :: 		for ( i = 4; i < 12; i++ ) {
0x1718	0x1C5B    ADDS	R3, R3, #1
0x171A	0xB2DB    UXTB	R3, R3
;driverrf4463pro.c, 80 :: 		}
; i end address is: 12 (R3)
0x171C	0xE7EE    B	L_vRF4463Init31
L_vRF4463Init32:
;driverrf4463pro.c, 81 :: 		for ( i = 4; i < 11; i++ ) {
; i start address is: 12 (R3)
0x171E	0x2304    MOVS	R3, #4
; i end address is: 12 (R3)
L_vRF4463Init34:
; i start address is: 12 (R3)
0x1720	0x2B0B    CMP	R3, #11
0x1722	0xD20F    BCS	L_vRF4463Init35
;driverrf4463pro.c, 82 :: 		RF_MODEM_AFC_GEAR_7_data[ i ] = RF_MODEM_AFC_GEAR_7_850[ rate ][ i - 4 ];
0x1724	0x484E    LDR	R0, [PC, #312]
0x1726	0x18C2    ADDS	R2, R0, R3
0x1728	0x4848    LDR	R0, [PC, #288]
0x172A	0x7801    LDRB	R1, [R0, #0]
0x172C	0x2007    MOVS	R0, #7
0x172E	0x4341    MULS	R1, R0, R1
0x1730	0x485A    LDR	R0, [PC, #360]
0x1732	0x1841    ADDS	R1, R0, R1
0x1734	0x1F18    SUBS	R0, R3, #4
0x1736	0xB200    SXTH	R0, R0
0x1738	0x1808    ADDS	R0, R1, R0
0x173A	0x7800    LDRB	R0, [R0, #0]
0x173C	0x7010    STRB	R0, [R2, #0]
;driverrf4463pro.c, 81 :: 		for ( i = 4; i < 11; i++ ) {
0x173E	0x1C5B    ADDS	R3, R3, #1
0x1740	0xB2DB    UXTB	R3, R3
;driverrf4463pro.c, 83 :: 		}
; i end address is: 12 (R3)
0x1742	0xE7ED    B	L_vRF4463Init34
L_vRF4463Init35:
;driverrf4463pro.c, 84 :: 		for ( i = 4; i < 15; i++ ) {
; i start address is: 12 (R3)
0x1744	0x2304    MOVS	R3, #4
; i end address is: 12 (R3)
L_vRF4463Init37:
; i start address is: 12 (R3)
0x1746	0x2B0F    CMP	R3, #15
0x1748	0xD20F    BCS	L_vRF4463Init38
;driverrf4463pro.c, 85 :: 		RF_MODEM_OOK_CNT1_11_data[ i ] = RF_MODEM_OOK_CNT1_11_850[ rate ][ i - 4 ];
0x174A	0x4847    LDR	R0, [PC, #284]
0x174C	0x18C2    ADDS	R2, R0, R3
0x174E	0x483F    LDR	R0, [PC, #252]
0x1750	0x7801    LDRB	R1, [R0, #0]
0x1752	0x200B    MOVS	R0, #11
0x1754	0x4341    MULS	R1, R0, R1
0x1756	0x4852    LDR	R0, [PC, #328]
0x1758	0x1841    ADDS	R1, R0, R1
0x175A	0x1F18    SUBS	R0, R3, #4
0x175C	0xB200    SXTH	R0, R0
0x175E	0x1808    ADDS	R0, R1, R0
0x1760	0x7800    LDRB	R0, [R0, #0]
0x1762	0x7010    STRB	R0, [R2, #0]
;driverrf4463pro.c, 84 :: 		for ( i = 4; i < 15; i++ ) {
0x1764	0x1C5B    ADDS	R3, R3, #1
0x1766	0xB2DB    UXTB	R3, R3
;driverrf4463pro.c, 86 :: 		}
; i end address is: 12 (R3)
0x1768	0xE7ED    B	L_vRF4463Init37
L_vRF4463Init38:
;driverrf4463pro.c, 87 :: 		for ( i = 4; i < 16; i++ ) {
; i start address is: 12 (R3)
0x176A	0x2304    MOVS	R3, #4
; i end address is: 12 (R3)
L_vRF4463Init40:
; i start address is: 12 (R3)
0x176C	0x2B10    CMP	R3, #16
0x176E	0xD20F    BCS	L_vRF4463Init41
;driverrf4463pro.c, 88 :: 		RF_MODEM_CHFLT_RX1_CHFLT_COE13_7_0_12_data[ i ] = RF_MODEM_CHFLT_RX1_CHFLT_COE13_7_0_12_850[ rate ][ i - 4 ];
0x1770	0x483F    LDR	R0, [PC, #252]
0x1772	0x18C2    ADDS	R2, R0, R3
0x1774	0x4835    LDR	R0, [PC, #212]
0x1776	0x7801    LDRB	R1, [R0, #0]
0x1778	0x200C    MOVS	R0, #12
0x177A	0x4341    MULS	R1, R0, R1
0x177C	0x4849    LDR	R0, [PC, #292]
0x177E	0x1841    ADDS	R1, R0, R1
0x1780	0x1F18    SUBS	R0, R3, #4
0x1782	0xB200    SXTH	R0, R0
0x1784	0x1808    ADDS	R0, R1, R0
0x1786	0x7800    LDRB	R0, [R0, #0]
0x1788	0x7010    STRB	R0, [R2, #0]
;driverrf4463pro.c, 87 :: 		for ( i = 4; i < 16; i++ ) {
0x178A	0x1C5B    ADDS	R3, R3, #1
0x178C	0xB2DB    UXTB	R3, R3
;driverrf4463pro.c, 89 :: 		}
; i end address is: 12 (R3)
0x178E	0xE7ED    B	L_vRF4463Init40
L_vRF4463Init41:
;driverrf4463pro.c, 90 :: 		for ( i = 4; i < 16; i++ ) {
; i start address is: 12 (R3)
0x1790	0x2304    MOVS	R3, #4
; i end address is: 12 (R3)
L_vRF4463Init43:
; i start address is: 12 (R3)
0x1792	0x2B10    CMP	R3, #16
0x1794	0xD20F    BCS	L_vRF4463Init44
;driverrf4463pro.c, 91 :: 		RF_MODEM_CHFLT_RX1_CHFLT_COE1_7_0_12_data[ i ] = RF_MODEM_CHFLT_RX1_CHFLT_COE1_7_0_12_850[ rate ][ i - 4 ];
0x1796	0x4838    LDR	R0, [PC, #224]
0x1798	0x18C2    ADDS	R2, R0, R3
0x179A	0x482C    LDR	R0, [PC, #176]
0x179C	0x7801    LDRB	R1, [R0, #0]
0x179E	0x200C    MOVS	R0, #12
0x17A0	0x4341    MULS	R1, R0, R1
0x17A2	0x4841    LDR	R0, [PC, #260]
0x17A4	0x1841    ADDS	R1, R0, R1
0x17A6	0x1F18    SUBS	R0, R3, #4
0x17A8	0xB200    SXTH	R0, R0
0x17AA	0x1808    ADDS	R0, R1, R0
0x17AC	0x7800    LDRB	R0, [R0, #0]
0x17AE	0x7010    STRB	R0, [R2, #0]
;driverrf4463pro.c, 90 :: 		for ( i = 4; i < 16; i++ ) {
0x17B0	0x1C5B    ADDS	R3, R3, #1
0x17B2	0xB2DB    UXTB	R3, R3
;driverrf4463pro.c, 92 :: 		}
; i end address is: 12 (R3)
0x17B4	0xE7ED    B	L_vRF4463Init43
L_vRF4463Init44:
;driverrf4463pro.c, 93 :: 		for ( i = 4; i < 16; i++ ) {
; i start address is: 12 (R3)
0x17B6	0x2304    MOVS	R3, #4
; i end address is: 12 (R3)
L_vRF4463Init46:
; i start address is: 12 (R3)
0x17B8	0x2B10    CMP	R3, #16
0x17BA	0xD20F    BCS	L_vRF4463Init47
;driverrf4463pro.c, 94 :: 		RF_MODEM_CHFLT_RX2_CHFLT_COE7_7_0_12_data[ i ] = RF_MODEM_CHFLT_RX2_CHFLT_COE7_7_0_12_850[ rate ][ i - 4 ];
0x17BC	0x4830    LDR	R0, [PC, #192]
0x17BE	0x18C2    ADDS	R2, R0, R3
0x17C0	0x4822    LDR	R0, [PC, #136]
0x17C2	0x7801    LDRB	R1, [R0, #0]
0x17C4	0x200C    MOVS	R0, #12
0x17C6	0x4341    MULS	R1, R0, R1
0x17C8	0x4838    LDR	R0, [PC, #224]
0x17CA	0x1841    ADDS	R1, R0, R1
0x17CC	0x1F18    SUBS	R0, R3, #4
0x17CE	0xB200    SXTH	R0, R0
0x17D0	0x1808    ADDS	R0, R1, R0
0x17D2	0x7800    LDRB	R0, [R0, #0]
0x17D4	0x7010    STRB	R0, [R2, #0]
;driverrf4463pro.c, 93 :: 		for ( i = 4; i < 16; i++ ) {
0x17D6	0x1C5B    ADDS	R3, R3, #1
0x17D8	0xB2DB    UXTB	R3, R3
;driverrf4463pro.c, 95 :: 		}
; i end address is: 12 (R3)
0x17DA	0xE7ED    B	L_vRF4463Init46
L_vRF4463Init47:
;driverrf4463pro.c, 96 :: 		for ( i = 4; i < 13; i++ ) {
; i start address is: 12 (R3)
0x17DC	0x2304    MOVS	R3, #4
; i end address is: 12 (R3)
L_vRF4463Init49:
; i start address is: 12 (R3)
0x17DE	0x2B0D    CMP	R3, #13
0x17E0	0xD20F    BCS	L_vRF4463Init50
;driverrf4463pro.c, 97 :: 		RF_MODEM_AGC_WINDOW_SIZE_9_data[ i ] = RF_MODEM_AGC_WINDOW_SIZE_9_850[ rate ][ i - 4 ];
0x17E2	0x4829    LDR	R0, [PC, #164]
0x17E4	0x18C2    ADDS	R2, R0, R3
0x17E6	0x4819    LDR	R0, [PC, #100]
0x17E8	0x7801    LDRB	R1, [R0, #0]
0x17EA	0x2009    MOVS	R0, #9
0x17EC	0x4341    MULS	R1, R0, R1
0x17EE	0x4830    LDR	R0, [PC, #192]
0x17F0	0x1841    ADDS	R1, R0, R1
0x17F2	0x1F18    SUBS	R0, R3, #4
0x17F4	0xB200    SXTH	R0, R0
0x17F6	0x1808    ADDS	R0, R1, R0
0x17F8	0x7800    LDRB	R0, [R0, #0]
0x17FA	0x7010    STRB	R0, [R2, #0]
;driverrf4463pro.c, 96 :: 		for ( i = 4; i < 13; i++ ) {
0x17FC	0x1C5B    ADDS	R3, R3, #1
0x17FE	0xB2DB    UXTB	R3, R3
;driverrf4463pro.c, 98 :: 		}
; i end address is: 12 (R3)
0x1800	0xE7ED    B	L_vRF4463Init49
L_vRF4463Init50:
;driverrf4463pro.c, 99 :: 		for ( i = 4; i < 13; i++ ) {
; i start address is: 12 (R3)
0x1802	0x2304    MOVS	R3, #4
; i end address is: 12 (R3)
L_vRF4463Init52:
; i start address is: 12 (R3)
0x1804	0x2B0D    CMP	R3, #13
0x1806	0xD20F    BCS	L_vRF4463Init53
;driverrf4463pro.c, 100 :: 		RF_MODEM_BCR_OSR_1_9_data[ i ] = RF_MODEM_BCR_OSR_1_9_850[ rate ][ i - 4 ];
0x1808	0x4821    LDR	R0, [PC, #132]
0x180A	0x18C2    ADDS	R2, R0, R3
0x180C	0x480F    LDR	R0, [PC, #60]
0x180E	0x7801    LDRB	R1, [R0, #0]
0x1810	0x2009    MOVS	R0, #9
0x1812	0x4341    MULS	R1, R0, R1
0x1814	0x4827    LDR	R0, [PC, #156]
0x1816	0x1841    ADDS	R1, R0, R1
0x1818	0x1F18    SUBS	R0, R3, #4
0x181A	0xB200    SXTH	R0, R0
0x181C	0x1808    ADDS	R0, R1, R0
0x181E	0x7800    LDRB	R0, [R0, #0]
0x1820	0x7010    STRB	R0, [R2, #0]
;driverrf4463pro.c, 99 :: 		for ( i = 4; i < 13; i++ ) {
0x1822	0x1C5B    ADDS	R3, R3, #1
0x1824	0xB2DB    UXTB	R3, R3
;driverrf4463pro.c, 101 :: 		}
; i end address is: 12 (R3)
0x1826	0xE7ED    B	L_vRF4463Init52
L_vRF4463Init53:
;driverrf4463pro.c, 102 :: 		}
L_vRF4463Init30:
;driverrf4463pro.c, 103 :: 		for ( i = 4; i < 11; i++ ) {
; i start address is: 12 (R3)
0x1828	0x2304    MOVS	R3, #4
; i end address is: 12 (R3)
L_vRF4463Init55:
; i start address is: 12 (R3)
0x182A	0x2B0B    CMP	R3, #11
0x182C	0xD24E    BCS	L_vRF4463Init56
;driverrf4463pro.c, 104 :: 		RF_SYNTH_PFDCP_CPFF_7_data[ i ] = RF_SYNTH_PFDCP_CPFF_7[ rate ][ i - 4 ];
0x182E	0x4822    LDR	R0, [PC, #136]
0x1830	0x18C2    ADDS	R2, R0, R3
0x1832	0x4806    LDR	R0, [PC, #24]
0x1834	0x7801    LDRB	R1, [R0, #0]
0x1836	0x2007    MOVS	R0, #7
0x1838	0x4341    MULS	R1, R0, R1
0x183A	0x4820    LDR	R0, [PC, #128]
0x183C	0x1841    ADDS	R1, R0, R1
0x183E	0x1F18    SUBS	R0, R3, #4
0x1840	0xB200    SXTH	R0, R0
0x1842	0xE03D    B	#122
0x1844	0x31BE0000  	?ICSvRF4463Init_cleanBuffer_L0+0
0x1848	0x00AC2000  	_RF_MODEM_MOD_TYPE_12_data+0
0x184C	0x01572000  	_rate+0
0x1850	0x2B560000  	_RF_MODEM_MOD_TYPE_12+0
0x1854	0x019C2000  	_freq3+0
0x1858	0x00BC2000  	_RF_MODEM_TX_RAMP_DELAY_8_data+0
0x185C	0x2FB40000  	_RF_MODEM_TX_RAMP_DELAY_8_433+0
0x1860	0x00C82000  	_RF_MODEM_AFC_GEAR_7_data+0
0x1864	0x30640000  	_RF_MODEM_AFC_GEAR_7_433+0
0x1868	0x00D52000  	_RF_MODEM_OOK_CNT1_11_data+0
0x186C	0x2CD70000  	_RF_MODEM_OOK_CNT1_11_433+0
0x1870	0x00E42000  	_RF_MODEM_CHFLT_RX1_CHFLT_COE13_7_0_12_data+0
0x1874	0x2BDA0000  	_RF_MODEM_CHFLT_RX1_CHFLT_COE13_7_0_12_433+0
0x1878	0x00F42000  	_RF_MODEM_CHFLT_RX1_CHFLT_COE1_7_0_12_data+0
0x187C	0x29460000  	_RF_MODEM_CHFLT_RX1_CHFLT_COE1_7_0_12_433+0
0x1880	0x01042000  	_RF_MODEM_CHFLT_RX2_CHFLT_COE7_7_0_12_data+0
0x1884	0x28C20000  	_RF_MODEM_CHFLT_RX2_CHFLT_COE7_7_0_12_433+0
0x1888	0x01142000  	_RF_MODEM_AGC_WINDOW_SIZE_9_data+0
0x188C	0x2F510000  	_RF_MODEM_AGC_WINDOW_SIZE_9_433+0
0x1890	0x01212000  	_RF_MODEM_BCR_OSR_1_9_data+0
0x1894	0x2EEE0000  	_RF_MODEM_BCR_OSR_1_9_433+0
0x1898	0x300C0000  	_RF_MODEM_TX_RAMP_DELAY_8_850+0
0x189C	0x30B10000  	_RF_MODEM_AFC_GEAR_7_850+0
0x18A0	0x2C5E0000  	_RF_MODEM_OOK_CNT1_11_850+0
0x18A4	0x2AD20000  	_RF_MODEM_CHFLT_RX1_CHFLT_COE13_7_0_12_850+0
0x18A8	0x2A4E0000  	_RF_MODEM_CHFLT_RX1_CHFLT_COE1_7_0_12_850+0
0x18AC	0x29CA0000  	_RF_MODEM_CHFLT_RX2_CHFLT_COE7_7_0_12_850+0
0x18B0	0x2E8B0000  	_RF_MODEM_AGC_WINDOW_SIZE_9_850+0
0x18B4	0x2E280000  	_RF_MODEM_BCR_OSR_1_9_850+0
0x18B8	0x012E2000  	_RF_SYNTH_PFDCP_CPFF_7_data+0
0x18BC	0x30FE0000  	_RF_SYNTH_PFDCP_CPFF_7+0
0x18C0	0x1808    ADDS	R0, R1, R0
0x18C2	0x7800    LDRB	R0, [R0, #0]
0x18C4	0x7010    STRB	R0, [R2, #0]
;driverrf4463pro.c, 103 :: 		for ( i = 4; i < 11; i++ ) {
0x18C6	0x1C5B    ADDS	R3, R3, #1
0x18C8	0xB2DB    UXTB	R3, R3
;driverrf4463pro.c, 105 :: 		}
; i end address is: 12 (R3)
0x18CA	0xE7AE    B	L_vRF4463Init55
L_vRF4463Init56:
;driverrf4463pro.c, 109 :: 		vRF4463GPIO_SET( mode );                              // PARAMETRO CONFIGURABLE
0x18CC	0x48ED    LDR	R0, [PC, #948]
0x18CE	0x7800    LDRB	R0, [R0, #0]
0x18D0	0xF7FEFFCA  BL	_vRF4463GPIO_SET+0
;driverrf4463pro.c, 110 :: 		strncpy(app_command_buf,cleanBuffer,20);  // Clean buffer
0x18D4	0xA906    ADD	R1, SP, #24
0x18D6	0xA801    ADD	R0, SP, #4
0x18D8	0x2214    MOVS	R2, #20
0x18DA	0xB212    SXTH	R2, R2
0x18DC	0xF7FFF832  BL	_strncpy+0
;driverrf4463pro.c, 113 :: 		app_command_buf[ 0 ] = 0x11;
0x18E0	0xAA01    ADD	R2, SP, #4
0x18E2	0x2011    MOVS	R0, #17
0x18E4	0x7010    STRB	R0, [R2, #0]
;driverrf4463pro.c, 114 :: 		app_command_buf[ 1 ] = 0x00;    // 0x0000
0x18E6	0x1C51    ADDS	R1, R2, #1
0x18E8	0x2000    MOVS	R0, #0
0x18EA	0x7008    STRB	R0, [R1, #0]
;driverrf4463pro.c, 115 :: 		app_command_buf[ 2 ] = 0x01;    // Total 1 Parameters
0x18EC	0x1C91    ADDS	R1, R2, #2
0x18EE	0x2001    MOVS	R0, #1
0x18F0	0x7008    STRB	R0, [R1, #0]
;driverrf4463pro.c, 116 :: 		app_command_buf[ 3 ] = 0x00;    // 0x0000
0x18F2	0x1CD1    ADDS	R1, R2, #3
0x18F4	0x2000    MOVS	R0, #0
0x18F6	0x7008    STRB	R0, [R1, #0]
;driverrf4463pro.c, 117 :: 		app_command_buf[ 4 ] = 98;      // freq  adjustment    ( rango desde 0 - 127 Low cap - High Cap )
0x18F8	0x1D11    ADDS	R1, R2, #4
0x18FA	0x2062    MOVS	R0, #98
0x18FC	0x7008    STRB	R0, [R1, #0]
;driverrf4463pro.c, 118 :: 		spi_write( 5, app_command_buf );
0x18FE	0x4611    MOV	R1, R2
0x1900	0x2005    MOVS	R0, #5
0x1902	0xF7FEFFF7  BL	_spi_write+0
;driverrf4463pro.c, 119 :: 		strncpy(app_command_buf,cleanBuffer,20);  // Clean buffer
0x1906	0xA906    ADD	R1, SP, #24
0x1908	0xA801    ADD	R0, SP, #4
0x190A	0x2214    MOVS	R2, #20
0x190C	0xB212    SXTH	R2, R2
0x190E	0xF7FFF819  BL	_strncpy+0
;driverrf4463pro.c, 121 :: 		app_command_buf[ 0 ] = 0x11;
0x1912	0xAA01    ADD	R2, SP, #4
0x1914	0x2011    MOVS	R0, #17
0x1916	0x7010    STRB	R0, [R2, #0]
;driverrf4463pro.c, 122 :: 		app_command_buf[ 1 ] = 0x00;    // 0x0003
0x1918	0x1C51    ADDS	R1, R2, #1
0x191A	0x2000    MOVS	R0, #0
0x191C	0x7008    STRB	R0, [R1, #0]
;driverrf4463pro.c, 123 :: 		app_command_buf[ 2 ] = 0x01;    // Total 1 Parameters
0x191E	0x1C91    ADDS	R1, R2, #2
0x1920	0x2001    MOVS	R0, #1
0x1922	0x7008    STRB	R0, [R1, #0]
;driverrf4463pro.c, 124 :: 		app_command_buf[ 3 ] = 0x03;   // 0x0003
0x1924	0x1CD1    ADDS	R1, R2, #3
0x1926	0x2003    MOVS	R0, #3
0x1928	0x7008    STRB	R0, [R1, #0]
;driverrf4463pro.c, 125 :: 		app_command_buf[ 4 ] = 0x40;  // tx = rx = 64 byte, ordinary PH,high performance mode  ?????????????????????
0x192A	0x1D11    ADDS	R1, R2, #4
0x192C	0x2040    MOVS	R0, #64
0x192E	0x7008    STRB	R0, [R1, #0]
;driverrf4463pro.c, 126 :: 		spi_write( 5, app_command_buf );
0x1930	0x4611    MOV	R1, R2
0x1932	0x2005    MOVS	R0, #5
0x1934	0xF7FEFFDE  BL	_spi_write+0
;driverrf4463pro.c, 128 :: 		strncpy(app_command_buf,cleanBuffer,20);  // Clean buffer
0x1938	0xA906    ADD	R1, SP, #24
0x193A	0xA801    ADD	R0, SP, #4
0x193C	0x2214    MOVS	R2, #20
0x193E	0xB212    SXTH	R2, R2
0x1940	0xF7FFF800  BL	_strncpy+0
;driverrf4463pro.c, 130 :: 		spi_write( 0x08, RF_FRR_CTL_A_MODE_4_data );    // disable all fast response register
0x1944	0x49D0    LDR	R1, [PC, #832]
0x1946	0x2008    MOVS	R0, #8
0x1948	0xF7FEFFD4  BL	_spi_write+0
;driverrf4463pro.c, 131 :: 		strncpy(app_command_buf,cleanBuffer,20);  // Clean buffer
0x194C	0xA906    ADD	R1, SP, #24
0x194E	0xA801    ADD	R0, SP, #4
0x1950	0x2214    MOVS	R2, #20
0x1952	0xB212    SXTH	R2, R2
0x1954	0xF7FEFFF6  BL	_strncpy+0
;driverrf4463pro.c, 133 :: 		app_command_buf[ 0 ] = 0x11;
0x1958	0xAA01    ADD	R2, SP, #4
0x195A	0x2011    MOVS	R0, #17
0x195C	0x7010    STRB	R0, [R2, #0]
;driverrf4463pro.c, 134 :: 		app_command_buf[ 1 ] = 0x10;    // 0x1000
0x195E	0x1C51    ADDS	R1, R2, #1
0x1960	0x2010    MOVS	R0, #16
0x1962	0x7008    STRB	R0, [R1, #0]
;driverrf4463pro.c, 135 :: 		app_command_buf[ 2 ] = 0x09;    // Total 9 Parameters
0x1964	0x1C91    ADDS	R1, R2, #2
0x1966	0x2009    MOVS	R0, #9
0x1968	0x7008    STRB	R0, [R1, #0]
;driverrf4463pro.c, 136 :: 		app_command_buf[ 3 ] = 0x00;   // 0x1000
0x196A	0x1CD1    ADDS	R1, R2, #3
0x196C	0x2000    MOVS	R0, #0
0x196E	0x7008    STRB	R0, [R1, #0]
;driverrf4463pro.c, 138 :: 		if ( mode == tx_test_mode ) {
0x1970	0x48C4    LDR	R0, [PC, #784]
0x1972	0x7800    LDRB	R0, [R0, #0]
0x1974	0x2802    CMP	R0, #2
0x1976	0xD104    BNE	L_vRF4463Init58
;driverrf4463pro.c, 139 :: 		app_command_buf[ 4 ] = 0xff;     //  Need to send 255 bytes of Preamble
0x1978	0xA801    ADD	R0, SP, #4
0x197A	0x1D01    ADDS	R1, R0, #4
0x197C	0x20FF    MOVS	R0, #255
0x197E	0x7008    STRB	R0, [R1, #0]
;driverrf4463pro.c, 140 :: 		}
0x1980	0xE003    B	L_vRF4463Init59
L_vRF4463Init58:
;driverrf4463pro.c, 142 :: 		app_command_buf[ 4 ] = 0x08;   //  Need to send 8 bytes of Preamble
0x1982	0xA801    ADD	R0, SP, #4
0x1984	0x1D01    ADDS	R1, R0, #4
0x1986	0x2008    MOVS	R0, #8
0x1988	0x7008    STRB	R0, [R1, #0]
;driverrf4463pro.c, 143 :: 		}
L_vRF4463Init59:
;driverrf4463pro.c, 146 :: 		app_command_buf[ 5 ]   = 0x14;       //To detect 20 bit sync word,
0x198A	0xAA01    ADD	R2, SP, #4
0x198C	0x1D51    ADDS	R1, R2, #5
0x198E	0x2014    MOVS	R0, #20
0x1990	0x7008    STRB	R0, [R1, #0]
;driverrf4463pro.c, 147 :: 		app_command_buf[ 6 ]   = 0x00;       // Non-standard preamble settings, useless
0x1992	0x1D91    ADDS	R1, R2, #6
0x1994	0x2000    MOVS	R0, #0
0x1996	0x7008    STRB	R0, [R1, #0]
;driverrf4463pro.c, 148 :: 		app_command_buf[ 7 ]   = 0x0f;       // Time of the preamble Timeout   ????????????????????????????????????????????????????????????
0x1998	0x1DD1    ADDS	R1, R2, #7
0x199A	0x200F    MOVS	R0, #15
0x199C	0x7008    STRB	R0, [R1, #0]
;driverrf4463pro.c, 149 :: 		app_command_buf[ 8 ]   = 0x31;       // The length of the preamble is   byte Calculation , 1st = 1 NO manchest  Encoding, using standard 1010.??
0x199E	0xF2020108  ADDW	R1, R2, #8
0x19A2	0x2031    MOVS	R0, #49
0x19A4	0x7008    STRB	R0, [R1, #0]
;driverrf4463pro.c, 150 :: 		app_command_buf[ 9 ]   = 0x0;        //  Non-standard Preamble Patten 4th byte
0x19A6	0xF2020109  ADDW	R1, R2, #9
0x19AA	0x2000    MOVS	R0, #0
0x19AC	0x7008    STRB	R0, [R1, #0]
;driverrf4463pro.c, 151 :: 		app_command_buf[ 10 ]  = 0x00;       //  Non-standard Preamble Patten 3rd byte
0x19AE	0xF202010A  ADDW	R1, R2, #10
0x19B2	0x2000    MOVS	R0, #0
0x19B4	0x7008    STRB	R0, [R1, #0]
;driverrf4463pro.c, 152 :: 		app_command_buf[ 11 ]  = 0x00;       //  Non-standard Preamble Patten 2nd byte
0x19B6	0xF202010B  ADDW	R1, R2, #11
0x19BA	0x2000    MOVS	R0, #0
0x19BC	0x7008    STRB	R0, [R1, #0]
;driverrf4463pro.c, 153 :: 		app_command_buf[ 12 ]  = 0x00;       //  Non-standard Preamble Patten 1st byte
0x19BE	0xF202010C  ADDW	R1, R2, #12
0x19C2	0x2000    MOVS	R0, #0
0x19C4	0x7008    STRB	R0, [R1, #0]
;driverrf4463pro.c, 154 :: 		spi_write(13, app_command_buf);
0x19C6	0x4611    MOV	R1, R2
0x19C8	0x200D    MOVS	R0, #13
0x19CA	0xF7FEFF93  BL	_spi_write+0
;driverrf4463pro.c, 155 :: 		strncpy(app_command_buf,cleanBuffer,20);  // Clean buffer
0x19CE	0xA906    ADD	R1, SP, #24
0x19D0	0xA801    ADD	R0, SP, #4
0x19D2	0x2214    MOVS	R2, #20
0x19D4	0xB212    SXTH	R2, R2
0x19D6	0xF7FEFFB5  BL	_strncpy+0
;driverrf4463pro.c, 158 :: 		app_command_buf[ 0 ] = 0x11;
0x19DA	0xAA01    ADD	R2, SP, #4
0x19DC	0x2011    MOVS	R0, #17
0x19DE	0x7010    STRB	R0, [R2, #0]
;driverrf4463pro.c, 159 :: 		app_command_buf[ 1 ] = 0x11;         // command = 0x1100
0x19E0	0x1C51    ADDS	R1, R2, #1
0x19E2	0x2011    MOVS	R0, #17
0x19E4	0x7008    STRB	R0, [R1, #0]
;driverrf4463pro.c, 160 :: 		app_command_buf[ 2 ] = 0x05;         // Total 5 Parameters
0x19E6	0x1C91    ADDS	R1, R2, #2
0x19E8	0x2005    MOVS	R0, #5
0x19EA	0x7008    STRB	R0, [R1, #0]
;driverrf4463pro.c, 161 :: 		app_command_buf[ 3 ] = 0x00;         // command = 0x1100
0x19EC	0x1CD1    ADDS	R1, R2, #3
0x19EE	0x2000    MOVS	R0, #0
0x19F0	0x7008    STRB	R0, [R1, #0]
;driverrf4463pro.c, 162 :: 		app_command_buf[ 4 ] = 0x01;         // The synchronization word is defined and sent in the length field, and the synchronization word cannot be wrong,Not 4FSK, not manchest encoding, only 2 bytes
0x19F2	0x1D11    ADDS	R1, R2, #4
0x19F4	0x2001    MOVS	R0, #1
0x19F6	0x7008    STRB	R0, [R1, #0]
;driverrf4463pro.c, 164 :: 		if ( mode == tx_test_mode ) {
0x19F8	0x48A2    LDR	R0, [PC, #648]
0x19FA	0x7800    LDRB	R0, [R0, #0]
0x19FC	0x2802    CMP	R0, #2
0x19FE	0xD107    BNE	L_vRF4463Init60
;driverrf4463pro.c, 165 :: 		app_command_buf[ 5 ] = 0x55;      //Sync word 3
0x1A00	0xAA01    ADD	R2, SP, #4
0x1A02	0x1D51    ADDS	R1, R2, #5
0x1A04	0x2055    MOVS	R0, #85
0x1A06	0x7008    STRB	R0, [R1, #0]
;driverrf4463pro.c, 166 :: 		app_command_buf[ 6 ] = 0x55;      // Sync word 2
0x1A08	0x1D91    ADDS	R1, R2, #6
0x1A0A	0x2055    MOVS	R0, #85
0x1A0C	0x7008    STRB	R0, [R1, #0]
;driverrf4463pro.c, 167 :: 		}
0x1A0E	0xE006    B	L_vRF4463Init61
L_vRF4463Init60:
;driverrf4463pro.c, 169 :: 		app_command_buf[ 5 ] = ( Network >> 8 );    //Sync word 3
0x1A10	0xAA01    ADD	R2, SP, #4
0x1A12	0x1D51    ADDS	R1, R2, #5
0x1A14	0x202D    MOVS	R0, #45
0x1A16	0x7008    STRB	R0, [R1, #0]
;driverrf4463pro.c, 170 :: 		app_command_buf[ 6 ] = ( Network );         // Sync word 2
0x1A18	0x1D91    ADDS	R1, R2, #6
0x1A1A	0x20D4    MOVS	R0, #212
0x1A1C	0x7008    STRB	R0, [R1, #0]
;driverrf4463pro.c, 171 :: 		}
L_vRF4463Init61:
;driverrf4463pro.c, 173 :: 		app_command_buf[ 7 ] =  0x00;        // Sync word 1
0x1A1E	0xAA01    ADD	R2, SP, #4
0x1A20	0x1DD1    ADDS	R1, R2, #7
0x1A22	0x2000    MOVS	R0, #0
0x1A24	0x7008    STRB	R0, [R1, #0]
;driverrf4463pro.c, 174 :: 		app_command_buf[ 8 ] = 0x00;        // Sync word 0
0x1A26	0xF2020108  ADDW	R1, R2, #8
0x1A2A	0x2000    MOVS	R0, #0
0x1A2C	0x7008    STRB	R0, [R1, #0]
;driverrf4463pro.c, 175 :: 		spi_write( 9, app_command_buf );
0x1A2E	0x4611    MOV	R1, R2
0x1A30	0x2009    MOVS	R0, #9
0x1A32	0xF7FEFF5F  BL	_spi_write+0
;driverrf4463pro.c, 176 :: 		strncpy(app_command_buf,cleanBuffer,20);  // Clean buffer
0x1A36	0xA906    ADD	R1, SP, #24
0x1A38	0xA801    ADD	R0, SP, #4
0x1A3A	0x2214    MOVS	R2, #20
0x1A3C	0xB212    SXTH	R2, R2
0x1A3E	0xF7FEFF81  BL	_strncpy+0
;driverrf4463pro.c, 179 :: 		app_command_buf[ 0 ] = 0x11;
0x1A42	0xAA01    ADD	R2, SP, #4
0x1A44	0x2011    MOVS	R0, #17
0x1A46	0x7010    STRB	R0, [R2, #0]
;driverrf4463pro.c, 180 :: 		app_command_buf[ 1 ] = 0x12;        // command = 0x1200
0x1A48	0x1C51    ADDS	R1, R2, #1
0x1A4A	0x2012    MOVS	R0, #18
0x1A4C	0x7008    STRB	R0, [R1, #0]
;driverrf4463pro.c, 181 :: 		app_command_buf[ 2 ] = 0x01;        // Total 1 Parameters
0x1A4E	0x1C91    ADDS	R1, R2, #2
0x1A50	0x2001    MOVS	R0, #1
0x1A52	0x7008    STRB	R0, [R1, #0]
;driverrf4463pro.c, 182 :: 		app_command_buf[ 3 ] = 0x00;        // command = 0x1200
0x1A54	0x1CD1    ADDS	R1, R2, #3
0x1A56	0x2000    MOVS	R0, #0
0x1A58	0x7008    STRB	R0, [R1, #0]
;driverrf4463pro.c, 183 :: 		app_command_buf[ 4 ] = 0x81;        // 1?cRC ??,CRC = itu-c, enable crc
0x1A5A	0x1D11    ADDS	R1, R2, #4
0x1A5C	0x2081    MOVS	R0, #129
0x1A5E	0x7008    STRB	R0, [R1, #0]
;driverrf4463pro.c, 184 :: 		spi_write( 5, app_command_buf );
0x1A60	0x4611    MOV	R1, R2
0x1A62	0x2005    MOVS	R0, #5
0x1A64	0xF7FEFF46  BL	_spi_write+0
;driverrf4463pro.c, 185 :: 		strncpy(app_command_buf,cleanBuffer,20);  // Clean buffer
0x1A68	0xA906    ADD	R1, SP, #24
0x1A6A	0xA801    ADD	R0, SP, #4
0x1A6C	0x2214    MOVS	R2, #20
0x1A6E	0xB212    SXTH	R2, R2
0x1A70	0xF7FEFF68  BL	_strncpy+0
;driverrf4463pro.c, 188 :: 		app_command_buf[ 0 ] = 0x11;
0x1A74	0xAA01    ADD	R2, SP, #4
0x1A76	0x2011    MOVS	R0, #17
0x1A78	0x7010    STRB	R0, [R2, #0]
;driverrf4463pro.c, 189 :: 		app_command_buf[ 1 ] = 0x12;        // command = 0x1206
0x1A7A	0x1C51    ADDS	R1, R2, #1
0x1A7C	0x2012    MOVS	R0, #18
0x1A7E	0x7008    STRB	R0, [R1, #0]
;driverrf4463pro.c, 190 :: 		app_command_buf[ 2 ] = 0x01;        // Total 1Parameters
0x1A80	0x1C91    ADDS	R1, R2, #2
0x1A82	0x2001    MOVS	R0, #1
0x1A84	0x7008    STRB	R0, [R1, #0]
;driverrf4463pro.c, 191 :: 		app_command_buf[ 3 ] = 0x06;        // command = 0x1206
0x1A86	0x1CD1    ADDS	R1, R2, #3
0x1A88	0x2006    MOVS	R0, #6
0x1A8A	0x7008    STRB	R0, [R1, #0]
;driverrf4463pro.c, 192 :: 		app_command_buf[ 4 ] = 0x02;        //  tx = rx = 120d--1220 (tx packet,ph enable, not 4fsk, After receiving a packet of data,RX off,CRC Do not flip ,CRC MSB, data MSB
0x1A8C	0x1D11    ADDS	R1, R2, #4
0x1A8E	0x2002    MOVS	R0, #2
0x1A90	0x7008    STRB	R0, [R1, #0]
;driverrf4463pro.c, 193 :: 		spi_write( 5, app_command_buf );
0x1A92	0x4611    MOV	R1, R2
0x1A94	0x2005    MOVS	R0, #5
0x1A96	0xF7FEFF2D  BL	_spi_write+0
;driverrf4463pro.c, 194 :: 		strncpy(app_command_buf,cleanBuffer,20);  // Clean buffer
0x1A9A	0xA906    ADD	R1, SP, #24
0x1A9C	0xA801    ADD	R0, SP, #4
0x1A9E	0x2214    MOVS	R2, #20
0x1AA0	0xB212    SXTH	R2, R2
0x1AA2	0xF7FEFF4F  BL	_strncpy+0
;driverrf4463pro.c, 197 :: 		app_command_buf[ 0 ] = 0x11;
0x1AA6	0xAA01    ADD	R2, SP, #4
0x1AA8	0x2011    MOVS	R0, #17
0x1AAA	0x7010    STRB	R0, [R2, #0]
;driverrf4463pro.c, 198 :: 		app_command_buf[ 1 ] = 0x12;        // command = 0x1208
0x1AAC	0x1C51    ADDS	R1, R2, #1
0x1AAE	0x2012    MOVS	R0, #18
0x1AB0	0x7008    STRB	R0, [R1, #0]
;driverrf4463pro.c, 199 :: 		app_command_buf[ 2 ] = 0x03;        // Total 3 Parameters
0x1AB2	0x1C91    ADDS	R1, R2, #2
0x1AB4	0x2003    MOVS	R0, #3
0x1AB6	0x7008    STRB	R0, [R1, #0]
;driverrf4463pro.c, 200 :: 		app_command_buf[ 3 ] = 0x08;        // command = 0x1208
0x1AB8	0x1CD1    ADDS	R1, R2, #3
0x1ABA	0x2008    MOVS	R0, #8
0x1ABC	0x7008    STRB	R0, [R1, #0]
;driverrf4463pro.c, 201 :: 		app_command_buf[ 4 ] = 0x00;        // Length Field = LSB,  length Only 1 byte,length Not put In FiFo, fixed packet length mode
0x1ABE	0x1D11    ADDS	R1, R2, #4
0x1AC0	0x2000    MOVS	R0, #0
0x1AC2	0x7008    STRB	R0, [R1, #0]
;driverrf4463pro.c, 202 :: 		app_command_buf[ 5 ] = 0x00;        // Used for variable packet length mode, which defines which Field contains length Filed
0x1AC4	0x1D51    ADDS	R1, R2, #5
0x1AC6	0x2000    MOVS	R0, #0
0x1AC8	0x7008    STRB	R0, [R1, #0]
;driverrf4463pro.c, 203 :: 		app_command_buf[ 6 ] = 0x00;        // Used for variable packet length mode, adjust the length of variable packet length
0x1ACA	0x1D91    ADDS	R1, R2, #6
0x1ACC	0x2000    MOVS	R0, #0
0x1ACE	0x7008    STRB	R0, [R1, #0]
;driverrf4463pro.c, 204 :: 		spi_write( 7, app_command_buf );
0x1AD0	0x4611    MOV	R1, R2
0x1AD2	0x2007    MOVS	R0, #7
0x1AD4	0xF7FEFF0E  BL	_spi_write+0
;driverrf4463pro.c, 205 :: 		strncpy(app_command_buf,cleanBuffer,20);  // Clean buffer
0x1AD8	0xA906    ADD	R1, SP, #24
0x1ADA	0xA801    ADD	R0, SP, #4
0x1ADC	0x2214    MOVS	R2, #20
0x1ADE	0xB212    SXTH	R2, R2
0x1AE0	0xF7FEFF30  BL	_strncpy+0
;driverrf4463pro.c, 208 :: 		app_command_buf[ 0 ]  = 0x11;
0x1AE4	0xAA01    ADD	R2, SP, #4
0x1AE6	0x2011    MOVS	R0, #17
0x1AE8	0x7010    STRB	R0, [R2, #0]
;driverrf4463pro.c, 209 :: 		app_command_buf[ 1 ]  = 0x12;       // 0x120d
0x1AEA	0x1C51    ADDS	R1, R2, #1
0x1AEC	0x2012    MOVS	R0, #18
0x1AEE	0x7008    STRB	R0, [R1, #0]
;driverrf4463pro.c, 210 :: 		app_command_buf[ 2 ]  = 0x0c;       // Total 12 Parameters
0x1AF0	0x1C91    ADDS	R1, R2, #2
0x1AF2	0x200C    MOVS	R0, #12
0x1AF4	0x7008    STRB	R0, [R1, #0]
;driverrf4463pro.c, 211 :: 		app_command_buf[ 3 ]  = 0x0d;       // 0x120d
0x1AF6	0x1CD1    ADDS	R1, R2, #3
0x1AF8	0x200D    MOVS	R0, #13
0x1AFA	0x7008    STRB	R0, [R1, #0]
;driverrf4463pro.c, 212 :: 		app_command_buf[ 4 ]  = 0x00;       //  Field 1 length (?4?)
0x1AFC	0x1D11    ADDS	R1, R2, #4
0x1AFE	0x2000    MOVS	R0, #0
0x1B00	0x7008    STRB	R0, [R1, #0]
;driverrf4463pro.c, 213 :: 		app_command_buf[ 5 ]  = payload_length;   //  field 1 length, (? 8?), ?Total14???
0x1B02	0x1D51    ADDS	R1, R2, #5
0x1B04	0x2042    MOVS	R0, #66
0x1B06	0x7008    STRB	R0, [R1, #0]
;driverrf4463pro.c, 214 :: 		app_command_buf[ 6 ]  = 0x04;       // field 1 Is not 4FSK,manchest, whiting, PN9,
0x1B08	0x1D91    ADDS	R1, R2, #6
0x1B0A	0x2004    MOVS	R0, #4
0x1B0C	0x7008    STRB	R0, [R1, #0]
;driverrf4463pro.c, 215 :: 		app_command_buf[ 7 ]  = 0xaa;       // field 1 crc enble, check enbale, There are also launchingCRC,cRC?Seed ?CRC_seed?????
0x1B0E	0x1DD1    ADDS	R1, R2, #7
0x1B10	0x20AA    MOVS	R0, #170
0x1B12	0x7008    STRB	R0, [R1, #0]
;driverrf4463pro.c, 216 :: 		app_command_buf[ 8 ]  = 0x00;       //  field 2 length(?4?)
0x1B14	0xF2020108  ADDW	R1, R2, #8
0x1B18	0x2000    MOVS	R0, #0
0x1B1A	0x7008    STRB	R0, [R1, #0]
;driverrf4463pro.c, 217 :: 		app_command_buf[ 9 ]  = 0x00;           //  field 2 length, (? 8?), length = 0 Means thisfield did not use
0x1B1C	0xF2020109  ADDW	R1, R2, #9
0x1B20	0x2000    MOVS	R0, #0
0x1B22	0x7008    STRB	R0, [R1, #0]
;driverrf4463pro.c, 218 :: 		app_command_buf[ 10 ] = 0x00;       // field 2 Is not 4FSK,manchest, whiting, PN9
0x1B24	0xF202010A  ADDW	R1, R2, #10
0x1B28	0x2000    MOVS	R0, #0
0x1B2A	0x7008    STRB	R0, [R1, #0]
;driverrf4463pro.c, 219 :: 		app_command_buf[ 11 ] = 0x00;       //  field 2 ?CRCSet up
0x1B2C	0xF202010B  ADDW	R1, R2, #11
0x1B30	0x2000    MOVS	R0, #0
0x1B32	0x7008    STRB	R0, [R1, #0]
;driverrf4463pro.c, 220 :: 		app_command_buf[ 12 ] = 0x00;       //  field 3 length, (? 8?), length = 0 Means thisfield did not use
0x1B34	0xF202010C  ADDW	R1, R2, #12
0x1B38	0x2000    MOVS	R0, #0
0x1B3A	0x7008    STRB	R0, [R1, #0]
;driverrf4463pro.c, 221 :: 		app_command_buf[ 13 ] = 0x00;           //  field 3 length, (? 8?), length = 0 Means thisfield did not use
0x1B3C	0xF202010D  ADDW	R1, R2, #13
0x1B40	0x2000    MOVS	R0, #0
0x1B42	0x7008    STRB	R0, [R1, #0]
;driverrf4463pro.c, 222 :: 		app_command_buf[ 14 ] = 0x00;       //  field 3 Is not 4FSK,manchest, whiting, PN9
0x1B44	0xF202010E  ADDW	R1, R2, #14
0x1B48	0x2000    MOVS	R0, #0
0x1B4A	0x7008    STRB	R0, [R1, #0]
;driverrf4463pro.c, 223 :: 		app_command_buf[ 15 ] = 0x00;       //  field 3 ?CRCSet up
0x1B4C	0xF202010F  ADDW	R1, R2, #15
0x1B50	0x2000    MOVS	R0, #0
0x1B52	0x7008    STRB	R0, [R1, #0]
;driverrf4463pro.c, 224 :: 		spi_write( 16, app_command_buf );
0x1B54	0x4611    MOV	R1, R2
0x1B56	0x2010    MOVS	R0, #16
0x1B58	0xF7FEFECC  BL	_spi_write+0
;driverrf4463pro.c, 225 :: 		strncpy(app_command_buf,cleanBuffer,20);  // Clean buffer
0x1B5C	0xA906    ADD	R1, SP, #24
0x1B5E	0xA801    ADD	R0, SP, #4
0x1B60	0x2214    MOVS	R2, #20
0x1B62	0xB212    SXTH	R2, R2
0x1B64	0xF7FEFEEE  BL	_strncpy+0
;driverrf4463pro.c, 228 :: 		app_command_buf[ 0 ]  = 0x11;
0x1B68	0xAA01    ADD	R2, SP, #4
0x1B6A	0x2011    MOVS	R0, #17
0x1B6C	0x7010    STRB	R0, [R2, #0]
;driverrf4463pro.c, 229 :: 		app_command_buf[ 1 ]  = 0x12;       // 0x1219
0x1B6E	0x1C51    ADDS	R1, R2, #1
0x1B70	0x2012    MOVS	R0, #18
0x1B72	0x7008    STRB	R0, [R1, #0]
;driverrf4463pro.c, 230 :: 		app_command_buf[ 2 ]  = 0x08;       // Total 8Parameters
0x1B74	0x1C91    ADDS	R1, R2, #2
0x1B76	0x2008    MOVS	R0, #8
0x1B78	0x7008    STRB	R0, [R1, #0]
;driverrf4463pro.c, 231 :: 		app_command_buf[ 3 ]  = 0x19;       // 0x1219
0x1B7A	0x1CD1    ADDS	R1, R2, #3
0x1B7C	0x2019    MOVS	R0, #25
0x1B7E	0x7008    STRB	R0, [R1, #0]
;driverrf4463pro.c, 232 :: 		app_command_buf[ 4 ]  = 0x00;       // field4 length(?4?)
0x1B80	0x1D11    ADDS	R1, R2, #4
0x1B82	0x2000    MOVS	R0, #0
0x1B84	0x7008    STRB	R0, [R1, #0]
;driverrf4463pro.c, 233 :: 		app_command_buf[ 5 ]  = 0x00;       // field 4 length, (? 8?), length = 0 Means this field did not use
0x1B86	0x1D51    ADDS	R1, R2, #5
0x1B88	0x2000    MOVS	R0, #0
0x1B8A	0x7008    STRB	R0, [R1, #0]
;driverrf4463pro.c, 234 :: 		app_command_buf[ 6 ]  = 0x00;       // field 4 Is not 4FSK,manchest, whiting, PN9
0x1B8C	0x1D91    ADDS	R1, R2, #6
0x1B8E	0x2000    MOVS	R0, #0
0x1B90	0x7008    STRB	R0, [R1, #0]
;driverrf4463pro.c, 235 :: 		app_command_buf[ 7 ]  = 0x00;       // field 4 ?CRCSet up
0x1B92	0x1DD1    ADDS	R1, R2, #7
0x1B94	0x2000    MOVS	R0, #0
0x1B96	0x7008    STRB	R0, [R1, #0]
;driverrf4463pro.c, 236 :: 		app_command_buf[ 8 ]  = 0x00;       // field5 length(?4?)
0x1B98	0xF2020108  ADDW	R1, R2, #8
0x1B9C	0x2000    MOVS	R0, #0
0x1B9E	0x7008    STRB	R0, [R1, #0]
;driverrf4463pro.c, 237 :: 		app_command_buf[ 9 ]  = 0x00;       // field 5 length, (? 8?), length = 0 Means this field did not use
0x1BA0	0xF2020109  ADDW	R1, R2, #9
0x1BA4	0x2000    MOVS	R0, #0
0x1BA6	0x7008    STRB	R0, [R1, #0]
;driverrf4463pro.c, 238 :: 		app_command_buf[ 10 ] = 0x00;       // field 5 Is not 4FSK,manchest, whiting, PN9
0x1BA8	0xF202010A  ADDW	R1, R2, #10
0x1BAC	0x2000    MOVS	R0, #0
0x1BAE	0x7008    STRB	R0, [R1, #0]
;driverrf4463pro.c, 239 :: 		app_command_buf[ 11 ] = 0x00;       // field 5 ?CRCSet up
0x1BB0	0xF202010B  ADDW	R1, R2, #11
0x1BB4	0x2000    MOVS	R0, #0
0x1BB6	0x7008    STRB	R0, [R1, #0]
;driverrf4463pro.c, 240 :: 		spi_write( 12, app_command_buf );
0x1BB8	0x4611    MOV	R1, R2
0x1BBA	0x200C    MOVS	R0, #12
0x1BBC	0xF7FEFE9A  BL	_spi_write+0
;driverrf4463pro.c, 241 :: 		strncpy(app_command_buf,cleanBuffer,20);  // Clean buffer
0x1BC0	0xA906    ADD	R1, SP, #24
0x1BC2	0xA801    ADD	R0, SP, #4
0x1BC4	0x2214    MOVS	R2, #20
0x1BC6	0xB212    SXTH	R2, R2
0x1BC8	0xF7FEFEBC  BL	_strncpy+0
;driverrf4463pro.c, 244 :: 		spi_write( 0x10, RF_MODEM_MOD_TYPE_12_data );   // //  2FSK ,  module source = PH fifo, disable manchest, tx, rx Do not flip, deviation Do not flip
0x1BCC	0x492F    LDR	R1, [PC, #188]
0x1BCE	0x2010    MOVS	R0, #16
0x1BD0	0xF7FEFE90  BL	_spi_write+0
;driverrf4463pro.c, 245 :: 		strncpy(app_command_buf,cleanBuffer,20);  // Clean buffer
0x1BD4	0xA906    ADD	R1, SP, #24
0x1BD6	0xA801    ADD	R0, SP, #4
0x1BD8	0x2214    MOVS	R2, #20
0x1BDA	0xB212    SXTH	R2, R2
0x1BDC	0xF7FEFEB2  BL	_strncpy+0
;driverrf4463pro.c, 248 :: 		app_command_buf[0] = 0x11;
0x1BE0	0xAA01    ADD	R2, SP, #4
0x1BE2	0x2011    MOVS	R0, #17
0x1BE4	0x7010    STRB	R0, [R2, #0]
;driverrf4463pro.c, 249 :: 		app_command_buf[1]  = 0x20;    // 0x200c
0x1BE6	0x1C51    ADDS	R1, R2, #1
0x1BE8	0x2020    MOVS	R0, #32
0x1BEA	0x7008    STRB	R0, [R1, #0]
;driverrf4463pro.c, 250 :: 		app_command_buf[2]  = 0x01;    // Total 1Parameters
0x1BEC	0x1C91    ADDS	R1, R2, #2
0x1BEE	0x2001    MOVS	R0, #1
0x1BF0	0x7008    STRB	R0, [R1, #0]
;driverrf4463pro.c, 251 :: 		app_command_buf[3]  = 0x0c;   // 0x200c
0x1BF2	0x1CD1    ADDS	R1, R2, #3
0x1BF4	0x200C    MOVS	R0, #12
0x1BF6	0x7008    STRB	R0, [R1, #0]
;driverrf4463pro.c, 253 :: 		if ( freq3 < 8 ) {
0x1BF8	0x4825    LDR	R0, [PC, #148]
0x1BFA	0x7800    LDRB	R0, [R0, #0]
0x1BFC	0x2808    CMP	R0, #8
0x1BFE	0xD216    BCS	L_vRF4463Init62
;driverrf4463pro.c, 254 :: 		if ( rate >= dr_256k ) {
0x1C00	0x4824    LDR	R0, [PC, #144]
0x1C02	0x7800    LDRB	R0, [R0, #0]
0x1C04	0x2808    CMP	R0, #8
0x1C06	0xD304    BCC	L_vRF4463Init63
;driverrf4463pro.c, 255 :: 		app_command_buf[ 4 ] = 0x4f;
0x1C08	0xA801    ADD	R0, SP, #4
0x1C0A	0x1D01    ADDS	R1, R0, #4
0x1C0C	0x204F    MOVS	R0, #79
0x1C0E	0x7008    STRB	R0, [R1, #0]
;driverrf4463pro.c, 256 :: 		}
0x1C10	0xE00C    B	L_vRF4463Init64
L_vRF4463Init63:
;driverrf4463pro.c, 257 :: 		else if ( rate >= dr_19p2 ) {
0x1C12	0x4820    LDR	R0, [PC, #128]
0x1C14	0x7800    LDRB	R0, [R0, #0]
0x1C16	0x2804    CMP	R0, #4
0x1C18	0xD304    BCC	L_vRF4463Init65
;driverrf4463pro.c, 258 :: 		app_command_buf[ 4 ]  = 0x5e;
0x1C1A	0xA801    ADD	R0, SP, #4
0x1C1C	0x1D01    ADDS	R1, R0, #4
0x1C1E	0x205E    MOVS	R0, #94
0x1C20	0x7008    STRB	R0, [R1, #0]
;driverrf4463pro.c, 259 :: 		}
0x1C22	0xE003    B	L_vRF4463Init66
L_vRF4463Init65:
;driverrf4463pro.c, 261 :: 		app_command_buf[ 4 ]  = 0xd2;
0x1C24	0xA801    ADD	R0, SP, #4
0x1C26	0x1D01    ADDS	R1, R0, #4
0x1C28	0x20D2    MOVS	R0, #210
0x1C2A	0x7008    STRB	R0, [R1, #0]
;driverrf4463pro.c, 262 :: 		}
L_vRF4463Init66:
L_vRF4463Init64:
;driverrf4463pro.c, 263 :: 		}
0x1C2C	0xE015    B	L_vRF4463Init67
L_vRF4463Init62:
;driverrf4463pro.c, 265 :: 		if ( rate >= dr_115p2 ) {
0x1C2E	0x4819    LDR	R0, [PC, #100]
0x1C30	0x7800    LDRB	R0, [R0, #0]
0x1C32	0x2807    CMP	R0, #7
0x1C34	0xD304    BCC	L_vRF4463Init68
;driverrf4463pro.c, 266 :: 		app_command_buf[ 4 ]  = 0x69;        // 15k
0x1C36	0xA801    ADD	R0, SP, #4
0x1C38	0x1D01    ADDS	R1, R0, #4
0x1C3A	0x2069    MOVS	R0, #105
0x1C3C	0x7008    STRB	R0, [R1, #0]
;driverrf4463pro.c, 267 :: 		}
0x1C3E	0xE00C    B	L_vRF4463Init69
L_vRF4463Init68:
;driverrf4463pro.c, 268 :: 		else if ( rate >= dr_19p2 ) {
0x1C40	0x4814    LDR	R0, [PC, #80]
0x1C42	0x7800    LDRB	R0, [R0, #0]
0x1C44	0x2804    CMP	R0, #4
0x1C46	0xD304    BCC	L_vRF4463Init70
;driverrf4463pro.c, 269 :: 		app_command_buf[ 4 ]  = 0x5e;        // 10k
0x1C48	0xA801    ADD	R0, SP, #4
0x1C4A	0x1D01    ADDS	R1, R0, #4
0x1C4C	0x205E    MOVS	R0, #94
0x1C4E	0x7008    STRB	R0, [R1, #0]
;driverrf4463pro.c, 270 :: 		}
0x1C50	0xE003    B	L_vRF4463Init71
L_vRF4463Init70:
;driverrf4463pro.c, 272 :: 		app_command_buf[ 4 ]  = 0x18; // 8k
0x1C52	0xA801    ADD	R0, SP, #4
0x1C54	0x1D01    ADDS	R1, R0, #4
0x1C56	0x2018    MOVS	R0, #24
0x1C58	0x7008    STRB	R0, [R1, #0]
;driverrf4463pro.c, 273 :: 		}
L_vRF4463Init71:
L_vRF4463Init69:
;driverrf4463pro.c, 274 :: 		}
L_vRF4463Init67:
;driverrf4463pro.c, 275 :: 		spi_write( 5, app_command_buf );
0x1C5A	0xA801    ADD	R0, SP, #4
0x1C5C	0x4601    MOV	R1, R0
0x1C5E	0x2005    MOVS	R0, #5
0x1C60	0xF7FEFE48  BL	_spi_write+0
;driverrf4463pro.c, 276 :: 		strncpy(app_command_buf,cleanBuffer,20);  // Clean buffer
0x1C64	0xA906    ADD	R1, SP, #24
0x1C66	0xA801    ADD	R0, SP, #4
0x1C68	0x2214    MOVS	R2, #20
0x1C6A	0xB212    SXTH	R2, R2
0x1C6C	0xF7FEFE6A  BL	_strncpy+0
;driverrf4463pro.c, 279 :: 		spi_write( 0x0C, RF_MODEM_TX_RAMP_DELAY_8_data );            // Without this Parameters,Not needed
0x1C70	0x4909    LDR	R1, [PC, #36]
0x1C72	0x200C    MOVS	R0, #12
0x1C74	0xF7FEFE3E  BL	_spi_write+0
;driverrf4463pro.c, 280 :: 		spi_write( 0x0D, RF_MODEM_BCR_OSR_1_9_data );                // Without this Parameters,Not needed
0x1C78	0x4908    LDR	R1, [PC, #32]
0x1C7A	0x200D    MOVS	R0, #13
0x1C7C	0xF7FEFE3A  BL	_spi_write+0
;driverrf4463pro.c, 281 :: 		spi_write( 0x0B, RF_MODEM_AFC_GEAR_7_data );                // Without this Parameters,Not needed
0x1C80	0xF000B80E  B	#28
0x1C84	0x019D2000  	_mode+0
0x1C88	0x32180000  	_RF_FRR_CTL_A_MODE_4_data+0
0x1C8C	0x00AC2000  	_RF_MODEM_MOD_TYPE_12_data+0
0x1C90	0x019C2000  	_freq3+0
0x1C94	0x01572000  	_rate+0
0x1C98	0x00BC2000  	_RF_MODEM_TX_RAMP_DELAY_8_data+0
0x1C9C	0x01212000  	_RF_MODEM_BCR_OSR_1_9_data+0
0x1CA0	0x4964    LDR	R1, [PC, #400]
0x1CA2	0x200B    MOVS	R0, #11
0x1CA4	0xF7FEFE26  BL	_spi_write+0
;driverrf4463pro.c, 282 :: 		spi_write( 0x05, RF_MODEM_AGC_CONTROL_1_data );                // Without this Parameters,Not needed
0x1CA8	0x4963    LDR	R1, [PC, #396]
0x1CAA	0x2005    MOVS	R0, #5
0x1CAC	0xF7FEFE22  BL	_spi_write+0
;driverrf4463pro.c, 283 :: 		spi_write( 0x0D, RF_MODEM_AGC_WINDOW_SIZE_9_data );        // Without this Parameters,Not needed
0x1CB0	0x4962    LDR	R1, [PC, #392]
0x1CB2	0x200D    MOVS	R0, #13
0x1CB4	0xF7FEFE1E  BL	_spi_write+0
;driverrf4463pro.c, 284 :: 		spi_write( 0x0F, RF_MODEM_OOK_CNT1_11_data );                // Without this Parameters,Not needed
0x1CB8	0x4961    LDR	R1, [PC, #388]
0x1CBA	0x200F    MOVS	R0, #15
0x1CBC	0xF7FEFE1A  BL	_spi_write+0
;driverrf4463pro.c, 287 :: 		app_command_buf[ 0 ] = 0x11;    // Set Properties
0x1CC0	0xAA01    ADD	R2, SP, #4
0x1CC2	0x2011    MOVS	R0, #17
0x1CC4	0x7010    STRB	R0, [R2, #0]
;driverrf4463pro.c, 288 :: 		app_command_buf[ 1 ] = 0x20;    // Group
0x1CC6	0x1C51    ADDS	R1, R2, #1
0x1CC8	0x2020    MOVS	R0, #32
0x1CCA	0x7008    STRB	R0, [R1, #0]
;driverrf4463pro.c, 289 :: 		app_command_buf[ 2 ] = 0x01;    // Total 1, Parameters
0x1CCC	0x1C91    ADDS	R1, R2, #2
0x1CCE	0x2001    MOVS	R0, #1
0x1CD0	0x7008    STRB	R0, [R1, #0]
;driverrf4463pro.c, 290 :: 		app_command_buf[ 3 ] = 0x4C;    // Register 0x4C
0x1CD2	0x1CD1    ADDS	R1, R2, #3
0x1CD4	0x204C    MOVS	R0, #76
0x1CD6	0x7008    STRB	R0, [R1, #0]
;driverrf4463pro.c, 291 :: 		app_command_buf[ 4 ] = 0x01;    // Data
0x1CD8	0x1D11    ADDS	R1, R2, #4
0x1CDA	0x2001    MOVS	R0, #1
0x1CDC	0x7008    STRB	R0, [R1, #0]
;driverrf4463pro.c, 292 :: 		spi_write( 5, app_command_buf );
0x1CDE	0x4611    MOV	R1, R2
0x1CE0	0x2005    MOVS	R0, #5
0x1CE2	0xF7FEFE07  BL	_spi_write+0
;driverrf4463pro.c, 294 :: 		strncpy(app_command_buf,cleanBuffer,20);  // Clean buffer
0x1CE6	0xA906    ADD	R1, SP, #24
0x1CE8	0xA801    ADD	R0, SP, #4
0x1CEA	0x2214    MOVS	R2, #20
0x1CEC	0xB212    SXTH	R2, R2
0x1CEE	0xF7FEFE29  BL	_strncpy+0
;driverrf4463pro.c, 314 :: 		spi_write( 0x10, RF_MODEM_CHFLT_RX1_CHFLT_COE13_7_0_12_data );  // Without this Parameters,Not needed
0x1CF2	0x4954    LDR	R1, [PC, #336]
0x1CF4	0x2010    MOVS	R0, #16
0x1CF6	0xF7FEFDFD  BL	_spi_write+0
;driverrf4463pro.c, 315 :: 		spi_write( 0x10, RF_MODEM_CHFLT_RX1_CHFLT_COE1_7_0_12_data );   // Without this Parameters,Not needed
0x1CFA	0x4953    LDR	R1, [PC, #332]
0x1CFC	0x2010    MOVS	R0, #16
0x1CFE	0xF7FEFDF9  BL	_spi_write+0
;driverrf4463pro.c, 316 :: 		spi_write( 0x10, RF_MODEM_CHFLT_RX2_CHFLT_COE7_7_0_12_data );   // Without this Parameters,Not needed
0x1D02	0x4952    LDR	R1, [PC, #328]
0x1D04	0x2010    MOVS	R0, #16
0x1D06	0xF7FEFDF5  BL	_spi_write+0
;driverrf4463pro.c, 319 :: 		app_command_buf[ 0 ]  = 0x11;
0x1D0A	0xAA01    ADD	R2, SP, #4
0x1D0C	0x2011    MOVS	R0, #17
0x1D0E	0x7010    STRB	R0, [R2, #0]
;driverrf4463pro.c, 320 :: 		app_command_buf[ 1 ]  = 0x22;    // 0x2200
0x1D10	0x1C51    ADDS	R1, R2, #1
0x1D12	0x2022    MOVS	R0, #34
0x1D14	0x7008    STRB	R0, [R1, #0]
;driverrf4463pro.c, 321 :: 		app_command_buf[ 2 ]  = 0x04;    // Total 4Parameters
0x1D16	0x1C91    ADDS	R1, R2, #2
0x1D18	0x2004    MOVS	R0, #4
0x1D1A	0x7008    STRB	R0, [R1, #0]
;driverrf4463pro.c, 322 :: 		app_command_buf[ 3 ]  = 0x00;   // 0x2200
0x1D1C	0x1CD1    ADDS	R1, R2, #3
0x1D1E	0x2000    MOVS	R0, #0
0x1D20	0x7008    STRB	R0, [R1, #0]
;driverrf4463pro.c, 323 :: 		app_command_buf[ 4 ]  = 0x08;  //0x10;   //   PA mode  = default , ??Class E mode,?Is not Switch Current mode  ????????
0x1D22	0x1D11    ADDS	R1, R2, #4
0x1D24	0x2008    MOVS	R0, #8
0x1D26	0x7008    STRB	R0, [R1, #0]
;driverrf4463pro.c, 350 :: 		if ( power > 0 || power < 127 ) {
0x1D28	0x4849    LDR	R0, [PC, #292]
0x1D2A	0x7800    LDRB	R0, [R0, #0]
0x1D2C	0x2800    CMP	R0, #0
0x1D2E	0xD804    BHI	L__vRF4463Init322
0x1D30	0x4847    LDR	R0, [PC, #284]
0x1D32	0x7800    LDRB	R0, [R0, #0]
0x1D34	0x287F    CMP	R0, #127
0x1D36	0xD300    BCC	L__vRF4463Init321
0x1D38	0xE005    B	L_vRF4463Init74
L__vRF4463Init322:
L__vRF4463Init321:
;driverrf4463pro.c, 351 :: 		app_command_buf[ 5 ]  = power;   //  Set to maximum power
0x1D3A	0xA801    ADD	R0, SP, #4
0x1D3C	0x1D41    ADDS	R1, R0, #5
0x1D3E	0x4844    LDR	R0, [PC, #272]
0x1D40	0x7800    LDRB	R0, [R0, #0]
0x1D42	0x7008    STRB	R0, [R1, #0]
;driverrf4463pro.c, 352 :: 		}
0x1D44	0xE003    B	L_vRF4463Init75
L_vRF4463Init74:
;driverrf4463pro.c, 355 :: 		app_command_buf[ 5 ]  = 127;
0x1D46	0xA801    ADD	R0, SP, #4
0x1D48	0x1D41    ADDS	R1, R0, #5
0x1D4A	0x207F    MOVS	R0, #127
0x1D4C	0x7008    STRB	R0, [R1, #0]
;driverrf4463pro.c, 356 :: 		}
L_vRF4463Init75:
;driverrf4463pro.c, 357 :: 		app_command_buf[ 6 ] = 0x00; //???????? 0x00;   // CLK duty = 50%, other = Default
0x1D4E	0xA801    ADD	R0, SP, #4
0x1D50	0x1D81    ADDS	R1, R0, #6
0x1D52	0x2000    MOVS	R0, #0
0x1D54	0x7008    STRB	R0, [R1, #0]
;driverrf4463pro.c, 361 :: 		if ( ( rate <= dr_115p2 )||( rate == dr_500 ) ) {
0x1D56	0x483F    LDR	R0, [PC, #252]
0x1D58	0x7800    LDRB	R0, [R0, #0]
0x1D5A	0x2807    CMP	R0, #7
0x1D5C	0xD904    BLS	L__vRF4463Init324
0x1D5E	0x483D    LDR	R0, [PC, #244]
0x1D60	0x7800    LDRB	R0, [R0, #0]
0x1D62	0x280A    CMP	R0, #10
0x1D64	0xD000    BEQ	L__vRF4463Init323
0x1D66	0xE004    B	L_vRF4463Init78
L__vRF4463Init324:
L__vRF4463Init323:
;driverrf4463pro.c, 362 :: 		app_command_buf[ 7 ]  = 0x3d;  // ???????? 0x5d;   // PA ramp time = default
0x1D68	0xA801    ADD	R0, SP, #4
0x1D6A	0x1DC1    ADDS	R1, R0, #7
0x1D6C	0x203D    MOVS	R0, #61
0x1D6E	0x7008    STRB	R0, [R1, #0]
;driverrf4463pro.c, 363 :: 		}
0x1D70	0xE003    B	L_vRF4463Init79
L_vRF4463Init78:
;driverrf4463pro.c, 365 :: 		app_command_buf[ 7 ]  = 0x5d;
0x1D72	0xA801    ADD	R0, SP, #4
0x1D74	0x1DC1    ADDS	R1, R0, #7
0x1D76	0x205D    MOVS	R0, #93
0x1D78	0x7008    STRB	R0, [R1, #0]
;driverrf4463pro.c, 366 :: 		}
L_vRF4463Init79:
;driverrf4463pro.c, 367 :: 		spi_write( 8, app_command_buf );
0x1D7A	0xA801    ADD	R0, SP, #4
0x1D7C	0x4601    MOV	R1, R0
0x1D7E	0x2008    MOVS	R0, #8
0x1D80	0xF7FEFDB8  BL	_spi_write+0
;driverrf4463pro.c, 369 :: 		strncpy(app_command_buf,cleanBuffer,20);  // Clean buffer
0x1D84	0xA906    ADD	R1, SP, #24
0x1D86	0xA801    ADD	R0, SP, #4
0x1D88	0x2214    MOVS	R2, #20
0x1D8A	0xB212    SXTH	R2, R2
0x1D8C	0xF7FEFDDA  BL	_strncpy+0
;driverrf4463pro.c, 371 :: 		spi_write( 0x0B , RF_SYNTH_PFDCP_CPFF_7_data );      // Without this Parameters,Not needed
0x1D90	0x4931    LDR	R1, [PC, #196]
0x1D92	0x200B    MOVS	R0, #11
0x1D94	0xF7FEFDAE  BL	_spi_write+0
;driverrf4463pro.c, 372 :: 		strncpy(app_command_buf,cleanBuffer,20);  // Clean buffer
0x1D98	0xA906    ADD	R1, SP, #24
0x1D9A	0xA801    ADD	R0, SP, #4
0x1D9C	0x2214    MOVS	R2, #20
0x1D9E	0xB212    SXTH	R2, R2
0x1DA0	0xF7FEFDD0  BL	_strncpy+0
;driverrf4463pro.c, 374 :: 		app_command_buf[ 0 ]  = 0x11;
0x1DA4	0xAA01    ADD	R2, SP, #4
0x1DA6	0x2011    MOVS	R0, #17
0x1DA8	0x7010    STRB	R0, [R2, #0]
;driverrf4463pro.c, 375 :: 		app_command_buf[ 1 ]  = 0x30;    // 0x3000
0x1DAA	0x1C51    ADDS	R1, R2, #1
0x1DAC	0x2030    MOVS	R0, #48
0x1DAE	0x7008    STRB	R0, [R1, #0]
;driverrf4463pro.c, 376 :: 		app_command_buf[ 2 ]  = 0x0c;    // Total 12 Parameters
0x1DB0	0x1C91    ADDS	R1, R2, #2
0x1DB2	0x200C    MOVS	R0, #12
0x1DB4	0x7008    STRB	R0, [R1, #0]
;driverrf4463pro.c, 377 :: 		app_command_buf[ 3 ]  = 0x00;    // 0x3000
0x1DB6	0x1CD1    ADDS	R1, R2, #3
0x1DB8	0x2000    MOVS	R0, #0
0x1DBA	0x7008    STRB	R0, [R1, #0]
;driverrf4463pro.c, 378 :: 		app_command_buf[ 4 ]  = System_Lo;     // 0x00;   //  match 1 Value of
0x1DBC	0x1D11    ADDS	R1, R2, #4
0x1DBE	0x2001    MOVS	R0, #1
0x1DC0	0x7008    STRB	R0, [R1, #0]
;driverrf4463pro.c, 379 :: 		app_command_buf[ 5 ]  = 0xff;    //  match 1 mask
0x1DC2	0x1D51    ADDS	R1, R2, #5
0x1DC4	0x20FF    MOVS	R0, #255
0x1DC6	0x7008    STRB	R0, [R1, #0]
;driverrf4463pro.c, 380 :: 		app_command_buf[ 6 ]  = 0x40;    // enable match 1, match 1 The distance between the value of and the synchronization word, 0 = match
0x1DC8	0x1D91    ADDS	R1, R2, #6
0x1DCA	0x2040    MOVS	R0, #64
0x1DCC	0x7008    STRB	R0, [R1, #0]
;driverrf4463pro.c, 381 :: 		app_command_buf[ 7 ]  = System_Hi;     //  match 2 Value of
0x1DCE	0x1DD1    ADDS	R1, R2, #7
0x1DD0	0x2001    MOVS	R0, #1
0x1DD2	0x7008    STRB	R0, [R1, #0]
;driverrf4463pro.c, 382 :: 		app_command_buf[ 8 ]  = 0xff;    //  match 2 mask
0x1DD4	0xF2020108  ADDW	R1, R2, #8
0x1DD8	0x20FF    MOVS	R0, #255
0x1DDA	0x7008    STRB	R0, [R1, #0]
;driverrf4463pro.c, 383 :: 		app_command_buf[ 9 ]  = 0x01;    // enable match 2, match 2 The distance between the value of and the synchronization word  , and function
0x1DDC	0xF2020109  ADDW	R1, R2, #9
0x1DE0	0x2001    MOVS	R0, #1
0x1DE2	0x7008    STRB	R0, [R1, #0]
;driverrf4463pro.c, 384 :: 		app_command_buf[ 10 ] = System_Higer;     //     match 3 Value of
0x1DE4	0xF202010A  ADDW	R1, R2, #10
0x1DE8	0x2001    MOVS	R0, #1
0x1DEA	0x7008    STRB	R0, [R1, #0]
;driverrf4463pro.c, 385 :: 		app_command_buf[ 11 ] = 0xff;;   //  match 3 mask
0x1DEC	0xF202010B  ADDW	R1, R2, #11
0x1DF0	0x20FF    MOVS	R0, #255
0x1DF2	0x7008    STRB	R0, [R1, #0]
;driverrf4463pro.c, 386 :: 		app_command_buf[ 12 ] = 0x02;;   // enable match 3, match 3 The distance between the value of and the synchronization word    and function
0x1DF4	0xF202010C  ADDW	R1, R2, #12
0x1DF8	0x2002    MOVS	R0, #2
0x1DFA	0x7008    STRB	R0, [R1, #0]
;driverrf4463pro.c, 387 :: 		app_command_buf[ 13 ] = Systema_Higest;     //   match 4 Value of
0x1DFC	0xF202010D  ADDW	R1, R2, #13
0x1E00	0x2001    MOVS	R0, #1
0x1E02	0x7008    STRB	R0, [R1, #0]
;driverrf4463pro.c, 388 :: 		app_command_buf[ 14 ] = 0xff;    //   match 4 mask
0x1E04	0xF202010E  ADDW	R1, R2, #14
0x1E08	0x20FF    MOVS	R0, #255
0x1E0A	0x7008    STRB	R0, [R1, #0]
;driverrf4463pro.c, 389 :: 		app_command_buf[ 15 ] = 0x03;    //  enable match 4, match 4 The distance between the value of and the synchronization word    and function
0x1E0C	0xF202010F  ADDW	R1, R2, #15
0x1E10	0x2003    MOVS	R0, #3
0x1E12	0x7008    STRB	R0, [R1, #0]
;driverrf4463pro.c, 390 :: 		spi_write( 16, app_command_buf );
0x1E14	0x4611    MOV	R1, R2
0x1E16	0x2010    MOVS	R0, #16
0x1E18	0xF7FEFD6C  BL	_spi_write+0
;driverrf4463pro.c, 391 :: 		strncpy(app_command_buf,cleanBuffer,20);  // Clean buffer
0x1E1C	0xA906    ADD	R1, SP, #24
0x1E1E	0xA801    ADD	R0, SP, #4
0x1E20	0x2214    MOVS	R2, #20
0x1E22	0xB212    SXTH	R2, R2
0x1E24	0xF7FEFD8E  BL	_strncpy+0
;driverrf4463pro.c, 392 :: 		rf_init_freq();     // FUNCION DE FRECUENCIA ( REVISAR PARAMETROS )
0x1E28	0xF7FEFEAC  BL	_rf_init_freq+0
;driverrf4463pro.c, 393 :: 		}
L_end_vRF4463Init:
0x1E2C	0xF8DDE000  LDR	LR, [SP, #0]
0x1E30	0xB00B    ADD	SP, SP, #44
0x1E32	0x4770    BX	LR
0x1E34	0x00C82000  	_RF_MODEM_AFC_GEAR_7_data+0
0x1E38	0x32270000  	_RF_MODEM_AGC_CONTROL_1_data+0
0x1E3C	0x01142000  	_RF_MODEM_AGC_WINDOW_SIZE_9_data+0
0x1E40	0x00D52000  	_RF_MODEM_OOK_CNT1_11_data+0
0x1E44	0x00E42000  	_RF_MODEM_CHFLT_RX1_CHFLT_COE13_7_0_12_data+0
0x1E48	0x00F42000  	_RF_MODEM_CHFLT_RX1_CHFLT_COE1_7_0_12_data+0
0x1E4C	0x01042000  	_RF_MODEM_CHFLT_RX2_CHFLT_COE7_7_0_12_data+0
0x1E50	0x019E2000  	_power+0
0x1E54	0x01572000  	_rate+0
0x1E58	0x012E2000  	_RF_SYNTH_PFDCP_CPFF_7_data+0
; end of _vRF4463Init
_vRF4463GPIO_SET:
;driverrf4463pro.c, 399 :: 		void vRF4463GPIO_SET( unsigned char ucData ) {
; ucData start address is: 0 (R0)
0x0868	0xB083    SUB	SP, SP, #12
0x086A	0xF8CDE000  STR	LR, [SP, #0]
; ucData end address is: 0 (R0)
; ucData start address is: 0 (R0)
;driverrf4463pro.c, 402 :: 		ucAppCommandBuf[0] = 0x13;     // gpio Set up
0x086E	0xAA01    ADD	R2, SP, #4
0x0870	0x2113    MOVS	R1, #19
0x0872	0x7011    STRB	R1, [R2, #0]
;driverrf4463pro.c, 404 :: 		switch ( ucData ) {
0x0874	0xE01F    B	L_vRF4463GPIO_SET80
; ucData end address is: 0 (R0)
;driverrf4463pro.c, 405 :: 		case tx_normal:
L_vRF4463GPIO_SET82:
;driverrf4463pro.c, 406 :: 		case rx_normal: ucAppCommandBuf[ 1 ] = 3;                 // GPIO0=1
L_vRF4463GPIO_SET83:
0x0876	0xAB01    ADD	R3, SP, #4
0x0878	0x1C5A    ADDS	R2, R3, #1
0x087A	0x2103    MOVS	R1, #3
0x087C	0x7011    STRB	R1, [R2, #0]
;driverrf4463pro.c, 407 :: 		ucAppCommandBuf[ 2 ] = 2;                // GPIO1=0
0x087E	0x1C9A    ADDS	R2, R3, #2
0x0880	0x2102    MOVS	R1, #2
0x0882	0x7011    STRB	R1, [R2, #0]
;driverrf4463pro.c, 408 :: 		break;
0x0884	0xE021    B	L_vRF4463GPIO_SET81
;driverrf4463pro.c, 410 :: 		case tx_test:   ucAppCommandBuf[ 1 ] = 3;                 // GPIO0=1
L_vRF4463GPIO_SET84:
0x0886	0xAB01    ADD	R3, SP, #4
0x0888	0x1C5A    ADDS	R2, R3, #1
0x088A	0x2103    MOVS	R1, #3
0x088C	0x7011    STRB	R1, [R2, #0]
;driverrf4463pro.c, 411 :: 		ucAppCommandBuf[ 2 ] = 3;                // GPIO1=1
0x088E	0x1C9A    ADDS	R2, R3, #2
0x0890	0x2103    MOVS	R1, #3
0x0892	0x7011    STRB	R1, [R2, #0]
;driverrf4463pro.c, 412 :: 		break;
0x0894	0xE019    B	L_vRF4463GPIO_SET81
;driverrf4463pro.c, 414 :: 		case rx_test:   ucAppCommandBuf[ 1 ] = 2;                 // GPIO0=0
L_vRF4463GPIO_SET85:
0x0896	0xAB01    ADD	R3, SP, #4
0x0898	0x1C5A    ADDS	R2, R3, #1
0x089A	0x2102    MOVS	R1, #2
0x089C	0x7011    STRB	R1, [R2, #0]
;driverrf4463pro.c, 415 :: 		ucAppCommandBuf[ 2 ] = 20;                // GPIO1=RX DATA
0x089E	0x1C9A    ADDS	R2, R3, #2
0x08A0	0x2114    MOVS	R1, #20
0x08A2	0x7011    STRB	R1, [R2, #0]
;driverrf4463pro.c, 416 :: 		break;
0x08A4	0xE011    B	L_vRF4463GPIO_SET81
;driverrf4463pro.c, 418 :: 		case rf_off:    ucAppCommandBuf[ 1 ] = 2;                 // GPIO0=0
L_vRF4463GPIO_SET86:
0x08A6	0xAB01    ADD	R3, SP, #4
0x08A8	0x1C5A    ADDS	R2, R3, #1
0x08AA	0x2102    MOVS	R1, #2
0x08AC	0x7011    STRB	R1, [R2, #0]
;driverrf4463pro.c, 419 :: 		ucAppCommandBuf[ 2 ] = 2;                // GPIO1=0
0x08AE	0x1C9A    ADDS	R2, R3, #2
0x08B0	0x2102    MOVS	R1, #2
0x08B2	0x7011    STRB	R1, [R2, #0]
;driverrf4463pro.c, 420 :: 		break;
0x08B4	0xE009    B	L_vRF4463GPIO_SET81
;driverrf4463pro.c, 421 :: 		}
L_vRF4463GPIO_SET80:
; ucData start address is: 0 (R0)
0x08B6	0x2800    CMP	R0, #0
0x08B8	0xD0DD    BEQ	L_vRF4463GPIO_SET82
0x08BA	0x2801    CMP	R0, #1
0x08BC	0xD0DB    BEQ	L_vRF4463GPIO_SET83
0x08BE	0x2802    CMP	R0, #2
0x08C0	0xD0E1    BEQ	L_vRF4463GPIO_SET84
0x08C2	0x2803    CMP	R0, #3
0x08C4	0xD0E7    BEQ	L_vRF4463GPIO_SET85
0x08C6	0x2804    CMP	R0, #4
0x08C8	0xD0ED    BEQ	L_vRF4463GPIO_SET86
; ucData end address is: 0 (R0)
L_vRF4463GPIO_SET81:
;driverrf4463pro.c, 423 :: 		ucAppCommandBuf[ 3 ]  = 0x21;     //0x20;   //  gpio2, h = tx mode
0x08CA	0xAB01    ADD	R3, SP, #4
0x08CC	0x1CDA    ADDS	R2, R3, #3
0x08CE	0x2121    MOVS	R1, #33
0x08D0	0x7011    STRB	R1, [R2, #0]
;driverrf4463pro.c, 424 :: 		ucAppCommandBuf[ 4 ]  = 0x20;     // 0x14;  //   gpio3
0x08D2	0x1D1A    ADDS	R2, R3, #4
0x08D4	0x2120    MOVS	R1, #32
0x08D6	0x7011    STRB	R1, [R2, #0]
;driverrf4463pro.c, 425 :: 		ucAppCommandBuf[ 5 ]  = 0x27;     // nIRQ
0x08D8	0x1D5A    ADDS	R2, R3, #5
0x08DA	0x2127    MOVS	R1, #39
0x08DC	0x7011    STRB	R1, [R2, #0]
;driverrf4463pro.c, 426 :: 		ucAppCommandBuf[ 6 ]  = 0x0b;     // sdo
0x08DE	0x1D9A    ADDS	R2, R3, #6
0x08E0	0x210B    MOVS	R1, #11
0x08E2	0x7011    STRB	R1, [R2, #0]
;driverrf4463pro.c, 427 :: 		spi_write( 7, ucAppCommandBuf );
0x08E4	0x4619    MOV	R1, R3
0x08E6	0x2007    MOVS	R0, #7
0x08E8	0xF000F804  BL	_spi_write+0
;driverrf4463pro.c, 428 :: 		}
L_end_vRF4463GPIO_SET:
0x08EC	0xF8DDE000  LDR	LR, [SP, #0]
0x08F0	0xB003    ADD	SP, SP, #12
0x08F2	0x4770    BX	LR
; end of _vRF4463GPIO_SET
_spi_write:
;driverrf4463pro.c, 785 :: 		void spi_write( unsigned char tx_length, unsigned char *p ) {
; p start address is: 4 (R1)
; tx_length start address is: 0 (R0)
0x08F4	0xB081    SUB	SP, SP, #4
0x08F6	0xF8CDE000  STR	LR, [SP, #0]
0x08FA	0x460A    MOV	R2, R1
0x08FC	0xB2C1    UXTB	R1, R0
; p end address is: 4 (R1)
; tx_length end address is: 0 (R0)
; tx_length start address is: 4 (R1)
; p start address is: 8 (R2)
;driverrf4463pro.c, 788 :: 		i = 0;
; i start address is: 0 (R0)
0x08FE	0x2000    MOVS	R0, #0
; tx_length end address is: 4 (R1)
; p end address is: 8 (R2)
; i end address is: 0 (R0)
0x0900	0xB2CD    UXTB	R5, R1
0x0902	0x4614    MOV	R4, R2
;driverrf4463pro.c, 789 :: 		while ( i != 0xFF ) {
L_spi_write109:
; i start address is: 0 (R0)
; p start address is: 16 (R4)
; tx_length start address is: 20 (R5)
0x0904	0xF1B00FFF  CMP	R0, #255
0x0908	0xD002    BEQ	L_spi_write110
; i end address is: 0 (R0)
;driverrf4463pro.c, 790 :: 		i = check_cts();
0x090A	0xF7FFFD93  BL	_check_cts+0
; i start address is: 0 (R0)
;driverrf4463pro.c, 791 :: 		}
; i end address is: 0 (R0)
0x090E	0xE7F9    B	L_spi_write109
L_spi_write110:
;driverrf4463pro.c, 794 :: 		nSEL = 0;                              // habilita escritura
0x0910	0x2300    MOVS	R3, #0
0x0912	0xB25B    SXTB	R3, R3
0x0914	0x4A0A    LDR	R2, [PC, #40]
0x0916	0x6013    STR	R3, [R2, #0]
;driverrf4463pro.c, 796 :: 		for ( i = 0; i < tx_length; i++ ) {
; i start address is: 0 (R0)
0x0918	0x2000    MOVS	R0, #0
; tx_length end address is: 20 (R5)
; i end address is: 0 (R0)
0x091A	0xB2EB    UXTB	R3, R5
0x091C	0xB2C5    UXTB	R5, R0
L_spi_write111:
; i start address is: 20 (R5)
; tx_length start address is: 12 (R3)
; p start address is: 16 (R4)
; p end address is: 16 (R4)
0x091E	0x429D    CMP	R5, R3
0x0920	0xD206    BCS	L_spi_write112
; p end address is: 16 (R4)
;driverrf4463pro.c, 797 :: 		j = *( p + i );
; p start address is: 16 (R4)
0x0922	0x1962    ADDS	R2, R4, R5
;driverrf4463pro.c, 798 :: 		ucRf4463SPIByte( j );
0x0924	0x7810    LDRB	R0, [R2, #0]
0x0926	0xF7FFFD39  BL	_ucRf4463SPIByte+0
;driverrf4463pro.c, 796 :: 		for ( i = 0; i < tx_length; i++ ) {
0x092A	0x1C6D    ADDS	R5, R5, #1
0x092C	0xB2ED    UXTB	R5, R5
;driverrf4463pro.c, 799 :: 		}
; tx_length end address is: 12 (R3)
; p end address is: 16 (R4)
; i end address is: 20 (R5)
0x092E	0xE7F6    B	L_spi_write111
L_spi_write112:
;driverrf4463pro.c, 801 :: 		nSEL = 1;                              // desabilita escritura
0x0930	0x2301    MOVS	R3, #1
0x0932	0xB25B    SXTB	R3, R3
0x0934	0x4A02    LDR	R2, [PC, #8]
0x0936	0x6013    STR	R3, [R2, #0]
;driverrf4463pro.c, 802 :: 		}
L_end_spi_write:
0x0938	0xF8DDE000  LDR	LR, [SP, #0]
0x093C	0xB001    ADD	SP, SP, #4
0x093E	0x4770    BX	LR
0x0940	0x81B04221  	GPIOB_ODRbits+0
; end of _spi_write
_check_cts:
;driverrf4463pro.c, 807 :: 		unsigned char check_cts( void ) {           // This Command follows the Command and reads the response
0x0434	0xB081    SUB	SP, SP, #4
0x0436	0xF8CDE000  STR	LR, [SP, #0]
;driverrf4463pro.c, 810 :: 		nSEL = 1;
0x043A	0x2101    MOVS	R1, #1
0x043C	0xB249    SXTB	R1, R1
0x043E	0x480A    LDR	R0, [PC, #40]
0x0440	0x6001    STR	R1, [R0, #0]
;driverrf4463pro.c, 812 :: 		nSEL = 0;
0x0442	0x2100    MOVS	R1, #0
0x0444	0xB249    SXTB	R1, R1
0x0446	0x4808    LDR	R0, [PC, #32]
0x0448	0x6001    STR	R1, [R0, #0]
;driverrf4463pro.c, 813 :: 		ucRf4463SPIByte( 0x44 );
0x044A	0x2044    MOVS	R0, #68
0x044C	0xF7FFFFA6  BL	_ucRf4463SPIByte+0
;driverrf4463pro.c, 814 :: 		i = ucRf4463SPIByte( 0 );
0x0450	0x2000    MOVS	R0, #0
0x0452	0xF7FFFFA3  BL	_ucRf4463SPIByte+0
;driverrf4463pro.c, 815 :: 		nSEL = 1;
0x0456	0x2201    MOVS	R2, #1
0x0458	0xB252    SXTB	R2, R2
0x045A	0x4903    LDR	R1, [PC, #12]
0x045C	0x600A    STR	R2, [R1, #0]
;driverrf4463pro.c, 816 :: 		return ( i );
;driverrf4463pro.c, 817 :: 		}
L_end_check_cts:
0x045E	0xF8DDE000  LDR	LR, [SP, #0]
0x0462	0xB001    ADD	SP, SP, #4
0x0464	0x4770    BX	LR
0x0466	0xBF00    NOP
0x0468	0x81B04221  	GPIOB_ODRbits+0
; end of _check_cts
_strncpy:
;__Lib_CString.c, 173 :: 		
; size start address is: 8 (R2)
; from start address is: 4 (R1)
; to start address is: 0 (R0)
0x0944	0xB081    SUB	SP, SP, #4
; size end address is: 8 (R2)
; from end address is: 4 (R1)
; to end address is: 0 (R0)
; to start address is: 0 (R0)
; from start address is: 4 (R1)
; size start address is: 8 (R2)
;__Lib_CString.c, 176 :: 		
; cp start address is: 24 (R6)
0x0946	0x4606    MOV	R6, R0
; from end address is: 4 (R1)
; size end address is: 8 (R2)
; cp end address is: 24 (R6)
; to end address is: 0 (R0)
0x0948	0xB214    SXTH	R4, R2
0x094A	0x460A    MOV	R2, R1
;__Lib_CString.c, 177 :: 		
L_strncpy45:
; cp start address is: 24 (R6)
; size start address is: 16 (R4)
; from start address is: 8 (R2)
; to start address is: 0 (R0)
0x094C	0xB16C    CBZ	R4, L__strncpy125
;__Lib_CString.c, 178 :: 		
0x094E	0x1E61    SUBS	R1, R4, #1
0x0950	0xB209    SXTH	R1, R1
; size end address is: 16 (R4)
; size start address is: 4 (R1)
;__Lib_CString.c, 180 :: 		
0x0952	0x4635    MOV	R5, R6
0x0954	0x1C76    ADDS	R6, R6, #1
0x0956	0x4614    MOV	R4, R2
0x0958	0x1C52    ADDS	R2, R2, #1
0x095A	0x7823    LDRB	R3, [R4, #0]
0x095C	0x702B    STRB	R3, [R5, #0]
0x095E	0x782B    LDRB	R3, [R5, #0]
0x0960	0xB90B    CBNZ	R3, L_strncpy47
; from end address is: 8 (R2)
;__Lib_CString.c, 181 :: 		
0x0962	0x4632    MOV	R2, R6
0x0964	0xE003    B	L_strncpy46
L_strncpy47:
;__Lib_CString.c, 182 :: 		
; from start address is: 8 (R2)
; cp end address is: 24 (R6)
; from end address is: 8 (R2)
; size end address is: 4 (R1)
0x0966	0xB20C    SXTH	R4, R1
0x0968	0xE7F0    B	L_strncpy45
L__strncpy125:
;__Lib_CString.c, 177 :: 		
0x096A	0x4632    MOV	R2, R6
0x096C	0xB221    SXTH	R1, R4
;__Lib_CString.c, 182 :: 		
L_strncpy46:
;__Lib_CString.c, 183 :: 		
; cp start address is: 8 (R2)
; size start address is: 4 (R1)
; size start address is: 4 (R1)
; to end address is: 0 (R0)
; size end address is: 4 (R1)
; cp end address is: 8 (R2)
L_strncpy48:
; size start address is: 4 (R1)
; cp start address is: 8 (R2)
; to start address is: 0 (R0)
0x096E	0xB20C    SXTH	R4, R1
0x0970	0x1E4B    SUBS	R3, R1, #1
0x0972	0xB219    SXTH	R1, R3
; size end address is: 4 (R1)
0x0974	0xB11C    CBZ	R4, L_strncpy49
; size end address is: 4 (R1)
;__Lib_CString.c, 184 :: 		
; size start address is: 4 (R1)
0x0976	0x2300    MOVS	R3, #0
0x0978	0x7013    STRB	R3, [R2, #0]
0x097A	0x1C52    ADDS	R2, R2, #1
; size end address is: 4 (R1)
; cp end address is: 8 (R2)
0x097C	0xE7F7    B	L_strncpy48
L_strncpy49:
;__Lib_CString.c, 186 :: 		
; to end address is: 0 (R0)
;__Lib_CString.c, 187 :: 		
L_end_strncpy:
0x097E	0xB001    ADD	SP, SP, #4
0x0980	0x4770    BX	LR
; end of _strncpy
_rf_init_freq:
;driverrf4463pro.c, 654 :: 		void rf_init_freq ( void ) {
0x0B84	0xB087    SUB	SP, SP, #28
0x0B86	0xF8CDE000  STR	LR, [SP, #0]
;driverrf4463pro.c, 660 :: 		ulFrequency = ( freq3 * 100) + ( freq2 * 10) + freq1;
0x0B8A	0x4865    LDR	R0, [PC, #404]
0x0B8C	0x7801    LDRB	R1, [R0, #0]
0x0B8E	0x2064    MOVS	R0, #100
0x0B90	0xB200    SXTH	R0, R0
0x0B92	0xFB01F200  MUL	R2, R1, R0
0x0B96	0xB212    SXTH	R2, R2
0x0B98	0x4862    LDR	R0, [PC, #392]
0x0B9A	0x7801    LDRB	R1, [R0, #0]
0x0B9C	0x200A    MOVS	R0, #10
0x0B9E	0xB200    SXTH	R0, R0
0x0BA0	0x4348    MULS	R0, R1, R0
0x0BA2	0xB200    SXTH	R0, R0
0x0BA4	0x1812    ADDS	R2, R2, R0
0x0BA6	0x4860    LDR	R0, [PC, #384]
0x0BA8	0x7800    LDRB	R0, [R0, #0]
0x0BAA	0x1812    ADDS	R2, R2, R0
; ulFrequency start address is: 8 (R2)
0x0BAC	0xB212    SXTH	R2, R2
;driverrf4463pro.c, 662 :: 		ulFrequency = ( ulFrequency * 10000);          //915.0 MHz??
0x0BAE	0xF2427010  MOVW	R0, #10000
0x0BB2	0xFB02F100  MUL	R1, R2, R0
0x0BB6	0x460A    MOV	R2, R1
;driverrf4463pro.c, 664 :: 		if ( ulFrequency >= 7600000 ) {
0x0BB8	0x485C    LDR	R0, [PC, #368]
0x0BBA	0x4281    CMP	R1, R0
0x0BBC	0xD309    BCC	L_rf_init_freq95
;driverrf4463pro.c, 665 :: 		ucOUTDIV = 4;
0x0BBE	0x2004    MOVS	R0, #4
0x0BC0	0xF88D0004  STRB	R0, [SP, #4]
;driverrf4463pro.c, 666 :: 		ucBAND = 0;
0x0BC4	0x2000    MOVS	R0, #0
0x0BC6	0xF88D0006  STRB	R0, [SP, #6]
;driverrf4463pro.c, 667 :: 		ucVCO = 0xFF;
0x0BCA	0x20FF    MOVS	R0, #255
0x0BCC	0xF88D0005  STRB	R0, [SP, #5]
;driverrf4463pro.c, 668 :: 		}
0x0BD0	0xE03C    B	L_rf_init_freq96
L_rf_init_freq95:
;driverrf4463pro.c, 671 :: 		else if ( ulFrequency >= 5460000 ) {
0x0BD2	0x4857    LDR	R0, [PC, #348]
0x0BD4	0x4282    CMP	R2, R0
0x0BD6	0xD309    BCC	L_rf_init_freq97
;driverrf4463pro.c, 672 :: 		ucOUTDIV = 6;
0x0BD8	0x2006    MOVS	R0, #6
0x0BDA	0xF88D0004  STRB	R0, [SP, #4]
;driverrf4463pro.c, 673 :: 		ucBAND   = 1;
0x0BDE	0x2001    MOVS	R0, #1
0x0BE0	0xF88D0006  STRB	R0, [SP, #6]
;driverrf4463pro.c, 674 :: 		ucVCO    = 0xFE;
0x0BE4	0x20FE    MOVS	R0, #254
0x0BE6	0xF88D0005  STRB	R0, [SP, #5]
;driverrf4463pro.c, 675 :: 		}
0x0BEA	0xE02F    B	L_rf_init_freq98
L_rf_init_freq97:
;driverrf4463pro.c, 678 :: 		else if ( ulFrequency >= 3850000 ) {
0x0BEC	0x4851    LDR	R0, [PC, #324]
0x0BEE	0x4282    CMP	R2, R0
0x0BF0	0xD309    BCC	L_rf_init_freq99
;driverrf4463pro.c, 679 :: 		ucOUTDIV = 8;
0x0BF2	0x2008    MOVS	R0, #8
0x0BF4	0xF88D0004  STRB	R0, [SP, #4]
;driverrf4463pro.c, 680 :: 		ucBAND   = 2;
0x0BF8	0x2002    MOVS	R0, #2
0x0BFA	0xF88D0006  STRB	R0, [SP, #6]
;driverrf4463pro.c, 681 :: 		ucVCO    = 0xFE;
0x0BFE	0x20FE    MOVS	R0, #254
0x0C00	0xF88D0005  STRB	R0, [SP, #5]
;driverrf4463pro.c, 682 :: 		}
0x0C04	0xE022    B	L_rf_init_freq100
L_rf_init_freq99:
;driverrf4463pro.c, 685 :: 		else if ( ulFrequency >= 2730000 ) {
0x0C06	0x484C    LDR	R0, [PC, #304]
0x0C08	0x4282    CMP	R2, R0
0x0C0A	0xD309    BCC	L_rf_init_freq101
;driverrf4463pro.c, 686 :: 		ucOUTDIV = 12;
0x0C0C	0x200C    MOVS	R0, #12
0x0C0E	0xF88D0004  STRB	R0, [SP, #4]
;driverrf4463pro.c, 687 :: 		ucBAND   = 3;
0x0C12	0x2003    MOVS	R0, #3
0x0C14	0xF88D0006  STRB	R0, [SP, #6]
;driverrf4463pro.c, 688 :: 		ucVCO    = 0xFD;
0x0C18	0x20FD    MOVS	R0, #253
0x0C1A	0xF88D0005  STRB	R0, [SP, #5]
;driverrf4463pro.c, 689 :: 		}
0x0C1E	0xE015    B	L_rf_init_freq102
L_rf_init_freq101:
;driverrf4463pro.c, 692 :: 		else if ( ulFrequency >= 1940000 ) {
0x0C20	0x4846    LDR	R0, [PC, #280]
0x0C22	0x4282    CMP	R2, R0
0x0C24	0xD309    BCC	L_rf_init_freq103
;driverrf4463pro.c, 693 :: 		ucOUTDIV = 16;
0x0C26	0x2010    MOVS	R0, #16
0x0C28	0xF88D0004  STRB	R0, [SP, #4]
;driverrf4463pro.c, 694 :: 		ucBAND   = 4;
0x0C2C	0x2004    MOVS	R0, #4
0x0C2E	0xF88D0006  STRB	R0, [SP, #6]
;driverrf4463pro.c, 695 :: 		ucVCO    = 0xFC;
0x0C32	0x20FC    MOVS	R0, #252
0x0C34	0xF88D0005  STRB	R0, [SP, #5]
;driverrf4463pro.c, 696 :: 		}
0x0C38	0xE008    B	L_rf_init_freq104
L_rf_init_freq103:
;driverrf4463pro.c, 700 :: 		ucOUTDIV = 24;
0x0C3A	0x2018    MOVS	R0, #24
0x0C3C	0xF88D0004  STRB	R0, [SP, #4]
;driverrf4463pro.c, 701 :: 		ucBAND   = 5;
0x0C40	0x2005    MOVS	R0, #5
0x0C42	0xF88D0006  STRB	R0, [SP, #6]
;driverrf4463pro.c, 702 :: 		ucVCO    = 0xFA;
0x0C46	0x20FA    MOVS	R0, #250
0x0C48	0xF88D0005  STRB	R0, [SP, #5]
;driverrf4463pro.c, 703 :: 		}
L_rf_init_freq104:
L_rf_init_freq102:
L_rf_init_freq100:
L_rf_init_freq98:
L_rf_init_freq96:
;driverrf4463pro.c, 705 :: 		ucDIV = ucOUTDIV / 2;
0x0C4C	0xF89D0004  LDRB	R0, [SP, #4]
0x0C50	0x0840    LSRS	R0, R0, #1
0x0C52	0xB2C0    UXTB	R0, R0
;driverrf4463pro.c, 707 :: 		ulData = ( ulFrequency * ucDIV ) / 3;          // ucDIV = 88.5 = 88   //// UCdiv = 2
0x0C54	0xFB02F100  MUL	R1, R2, R0
; ulFrequency end address is: 8 (R2)
0x0C58	0x2003    MOVS	R0, #3
0x0C5A	0xFBB1F2F0  UDIV	R2, R1, R0
;driverrf4463pro.c, 708 :: 		ucINTE = ( ulData / 100000) - 1;               // ulData = 6 000 000  //// ULdATA = 9 000 000
0x0C5E	0x4838    LDR	R0, [PC, #224]
0x0C60	0xFBB2F0F0  UDIV	R0, R2, R0
0x0C64	0x1E40    SUBS	R0, R0, #1
; ucINTE start address is: 24 (R6)
0x0C66	0xB2C6    UXTB	R6, R0
;driverrf4463pro.c, 709 :: 		ulFRAC = ( ulData - ( ucINTE + 1 ) * 100000 ) * 16384 / 3125;         // ulFRAC = 15 728 640
0x0C68	0xB2C0    UXTB	R0, R0
0x0C6A	0x1C41    ADDS	R1, R0, #1
0x0C6C	0xB209    SXTH	R1, R1
0x0C6E	0x4834    LDR	R0, [PC, #208]
0x0C70	0x4348    MULS	R0, R1, R0
0x0C72	0x1A10    SUB	R0, R2, R0
0x0C74	0x0381    LSLS	R1, R0, #14
0x0C76	0xF6404035  MOVW	R0, #3125
0x0C7A	0xFBB1F0F0  UDIV	R0, R1, R0
;driverrf4463pro.c, 710 :: 		ulFRAC = ulFRAC + 0x80000;
0x0C7E	0xF5002000  ADD	R0, R0, #524288
;driverrf4463pro.c, 712 :: 		ucFRAC_0 = ulFRAC;
; ucFRAC_0 start address is: 28 (R7)
0x0C82	0xB2C7    UXTB	R7, R0
;driverrf4463pro.c, 713 :: 		ulFRAC >>= 8;
0x0C84	0x0A00    LSRS	R0, R0, #8
;driverrf4463pro.c, 714 :: 		ucFRAC_1 = ulFRAC;
; ucFRAC_1 start address is: 32 (R8)
0x0C86	0xFA5FF880  UXTB	R8, R0
;driverrf4463pro.c, 715 :: 		ulFRAC >>= 8;
0x0C8A	0x0A00    LSRS	R0, R0, #8
;driverrf4463pro.c, 716 :: 		ucFRAC_2 = ulFRAC;
; ucFRAC_2 start address is: 36 (R9)
0x0C8C	0xFA5FF980  UXTB	R9, R0
;driverrf4463pro.c, 720 :: 		app_command_buf[ 0 ] = 0x11;           // SET property    MODEM_CLKGEN_BAND
0x0C90	0xF10D0207  ADD	R2, SP, #7
0x0C94	0x2011    MOVS	R0, #17
0x0C96	0x7010    STRB	R0, [R2, #0]
;driverrf4463pro.c, 721 :: 		app_command_buf[ 1 ] = 0x20;           // Group  // 0x2051
0x0C98	0x1C51    ADDS	R1, R2, #1
0x0C9A	0x2020    MOVS	R0, #32
0x0C9C	0x7008    STRB	R0, [R1, #0]
;driverrf4463pro.c, 722 :: 		app_command_buf[ 2 ] = 0x01;           // Num Arguments // Total 1 Parameters
0x0C9E	0x1C91    ADDS	R1, R2, #2
0x0CA0	0x2001    MOVS	R0, #1
0x0CA2	0x7008    STRB	R0, [R1, #0]
;driverrf4463pro.c, 723 :: 		app_command_buf[ 3 ] = 0x51;           // Number  // 0x2051
0x0CA4	0x1CD1    ADDS	R1, R2, #3
0x0CA6	0x2051    MOVS	R0, #81
0x0CA8	0x7008    STRB	R0, [R1, #0]
;driverrf4463pro.c, 724 :: 		app_command_buf[ 4 ] = 0x08 | ucBAND;  // Argumento  //  high performance mode , clk outpu = osc /4
0x0CAA	0x1D11    ADDS	R1, R2, #4
0x0CAC	0xF89D0006  LDRB	R0, [SP, #6]
0x0CB0	0xF0400008  ORR	R0, R0, #8
0x0CB4	0x7008    STRB	R0, [R1, #0]
;driverrf4463pro.c, 725 :: 		spi_write( 5, app_command_buf );
0x0CB6	0x4611    MOV	R1, R2
0x0CB8	0x2005    MOVS	R0, #5
0x0CBA	0xF7FFFE1B  BL	_spi_write+0
;driverrf4463pro.c, 727 :: 		app_command_buf[ 0 ]  = 0x11;
0x0CBE	0xF10D0207  ADD	R2, SP, #7
0x0CC2	0x2011    MOVS	R0, #17
0x0CC4	0x7010    STRB	R0, [R2, #0]
;driverrf4463pro.c, 728 :: 		app_command_buf[ 1 ]  = 0x40;    // 0x4000         FREQ_CONTROL_INTE
0x0CC6	0x1C51    ADDS	R1, R2, #1
0x0CC8	0x2040    MOVS	R0, #64
0x0CCA	0x7008    STRB	R0, [R1, #0]
;driverrf4463pro.c, 729 :: 		app_command_buf[ 2 ]  = 0x08;    // Total 8 Parameters
0x0CCC	0x1C91    ADDS	R1, R2, #2
0x0CCE	0x2008    MOVS	R0, #8
0x0CD0	0x7008    STRB	R0, [R1, #0]
;driverrf4463pro.c, 730 :: 		app_command_buf[ 3 ]  = 0x00;   // 0x4000
0x0CD2	0x1CD1    ADDS	R1, R2, #3
0x0CD4	0x2000    MOVS	R0, #0
0x0CD6	0x7008    STRB	R0, [R1, #0]
;driverrf4463pro.c, 731 :: 		app_command_buf[ 4 ]  = ucINTE;   //  default value
0x0CD8	0x1D10    ADDS	R0, R2, #4
0x0CDA	0x7006    STRB	R6, [R0, #0]
; ucINTE end address is: 24 (R6)
;driverrf4463pro.c, 732 :: 		app_command_buf[ 5 ]  = ucFRAC_2;   //  defaul value
0x0CDC	0x1D50    ADDS	R0, R2, #5
0x0CDE	0xF8809000  STRB	R9, [R0, #0]
; ucFRAC_2 end address is: 36 (R9)
;driverrf4463pro.c, 733 :: 		app_command_buf[ 6 ]  = ucFRAC_1;   //  default value
0x0CE2	0x1D90    ADDS	R0, R2, #6
0x0CE4	0xF8808000  STRB	R8, [R0, #0]
; ucFRAC_1 end address is: 32 (R8)
;driverrf4463pro.c, 734 :: 		app_command_buf[ 7 ]  = ucFRAC_0;   // frac ,from WDS
0x0CE8	0x1DD0    ADDS	R0, R2, #7
0x0CEA	0x7007    STRB	R7, [R0, #0]
; ucFRAC_0 end address is: 28 (R7)
;driverrf4463pro.c, 735 :: 		app_command_buf[ 8 ]  = step_250K_step1;   // channel step1  from wds  // al parecer aqu� esta el ancho del canal
0x0CEC	0xF2020108  ADDW	R1, R2, #8
0x0CF0	0x2022    MOVS	R0, #34
0x0CF2	0x7008    STRB	R0, [R1, #0]
;driverrf4463pro.c, 736 :: 		app_command_buf[ 9 ]  = step_250K_step0;   // channel step0  from wds
0x0CF4	0xF2020109  ADDW	R1, R2, #9
0x0CF8	0x2022    MOVS	R0, #34
0x0CFA	0x7008    STRB	R0, [R1, #0]
;driverrf4463pro.c, 737 :: 		app_command_buf[ 10 ] = 0x20;  //  from wds Without this Values
0x0CFC	0xF202010A  ADDW	R1, R2, #10
0x0D00	0x2020    MOVS	R0, #32
0x0D02	0x7008    STRB	R0, [R1, #0]
;driverrf4463pro.c, 738 :: 		app_command_buf[ 11 ] = ucVCO;    // from wds Without this Values
0x0D04	0xF202010B  ADDW	R1, R2, #11
0x0D08	0xF89D0005  LDRB	R0, [SP, #5]
0x0D0C	0x7008    STRB	R0, [R1, #0]
;driverrf4463pro.c, 739 :: 		spi_write( 12, app_command_buf );
0x0D0E	0x4611    MOV	R1, R2
0x0D10	0x200C    MOVS	R0, #12
0x0D12	0xF7FFFDEF  BL	_spi_write+0
;driverrf4463pro.c, 741 :: 		}
L_end_rf_init_freq:
0x0D16	0xF8DDE000  LDR	LR, [SP, #0]
0x0D1A	0xB007    ADD	SP, SP, #28
0x0D1C	0x4770    BX	LR
0x0D1E	0xBF00    NOP
0x0D20	0x019C2000  	_freq3+0
0x0D24	0x019F2000  	_freq2+0
0x0D28	0x01A02000  	_freq1+0
0x0D2C	0xF7800073  	#7600000
0x0D30	0x50200053  	#5460000
0x0D34	0xBF10003A  	#3850000
0x0D38	0xA8100029  	#2730000
0x0D3C	0x9A20001D  	#1940000
0x0D40	0x86A00001  	#100000
; end of _rf_init_freq
_vRF4463ClearInterrupts:
;driverrf4463pro.c, 445 :: 		void vRF4463ClearInterrupts( void ) {
0x14FC	0xB082    SUB	SP, SP, #8
0x14FE	0xF8CDE000  STR	LR, [SP, #0]
;driverrf4463pro.c, 448 :: 		p[ 0 ] = GET_INT_STATUS;
0x1502	0xAA01    ADD	R2, SP, #4
0x1504	0x2020    MOVS	R0, #32
0x1506	0x7010    STRB	R0, [R2, #0]
;driverrf4463pro.c, 449 :: 		p[ 1 ] = 0;               // clr  PH pending
0x1508	0x1C51    ADDS	R1, R2, #1
0x150A	0x2000    MOVS	R0, #0
0x150C	0x7008    STRB	R0, [R1, #0]
;driverrf4463pro.c, 450 :: 		p[ 2 ] = 0;               // clr modem_pending
0x150E	0x1C91    ADDS	R1, R2, #2
0x1510	0x2000    MOVS	R0, #0
0x1512	0x7008    STRB	R0, [R1, #0]
;driverrf4463pro.c, 451 :: 		p[ 3 ] = 0;               // clr chip pending
0x1514	0x1CD1    ADDS	R1, R2, #3
0x1516	0x2000    MOVS	R0, #0
0x1518	0x7008    STRB	R0, [R1, #0]
;driverrf4463pro.c, 452 :: 		spi_write( 4, p );
0x151A	0x4611    MOV	R1, R2
0x151C	0x2004    MOVS	R0, #4
0x151E	0xF7FFF9E9  BL	_spi_write+0
;driverrf4463pro.c, 453 :: 		spi_read( 9, GET_INT_STATUS );
0x1522	0x2120    MOVS	R1, #32
0x1524	0x2009    MOVS	R0, #9
0x1526	0xF7FFFADF  BL	_spi_read+0
;driverrf4463pro.c, 454 :: 		}
L_end_vRF4463ClearInterrupts:
0x152A	0xF8DDE000  LDR	LR, [SP, #0]
0x152E	0xB002    ADD	SP, SP, #8
0x1530	0x4770    BX	LR
; end of _vRF4463ClearInterrupts
_spi_read:
;driverrf4463pro.c, 822 :: 		void spi_read( unsigned char data_length, unsigned char api_command ) {
; api_command start address is: 4 (R1)
; data_length start address is: 0 (R0)
0x0AE8	0xB083    SUB	SP, SP, #12
0x0AEA	0xF8CDE000  STR	LR, [SP, #0]
; api_command end address is: 4 (R1)
; data_length end address is: 0 (R0)
; data_length start address is: 0 (R0)
; api_command start address is: 4 (R1)
;driverrf4463pro.c, 826 :: 		p[ 0 ] = api_command;
0x0AEE	0xAA01    ADD	R2, SP, #4
0x0AF0	0x7011    STRB	R1, [R2, #0]
; api_command end address is: 4 (R1)
;driverrf4463pro.c, 827 :: 		i = 0;
; i start address is: 4 (R1)
0x0AF2	0x2100    MOVS	R1, #0
; data_length end address is: 0 (R0)
; i end address is: 4 (R1)
0x0AF4	0xB2C6    UXTB	R6, R0
0x0AF6	0xB2C8    UXTB	R0, R1
;driverrf4463pro.c, 828 :: 		while ( i != 0xFF ) {
L_spi_read114:
; i start address is: 0 (R0)
; data_length start address is: 24 (R6)
0x0AF8	0xF1B00FFF  CMP	R0, #255
0x0AFC	0xD002    BEQ	L_spi_read115
; i end address is: 0 (R0)
;driverrf4463pro.c, 829 :: 		i = check_cts();                // Check if you can send Command
0x0AFE	0xF7FFFC99  BL	_check_cts+0
; i start address is: 0 (R0)
;driverrf4463pro.c, 830 :: 		}
; i end address is: 0 (R0)
0x0B02	0xE7F9    B	L_spi_read114
L_spi_read115:
;driverrf4463pro.c, 832 :: 		spi_write( 1, p );    // Send Command
0x0B04	0xAA01    ADD	R2, SP, #4
0x0B06	0x4611    MOV	R1, R2
0x0B08	0x2001    MOVS	R0, #1
0x0B0A	0xF7FFFEF3  BL	_spi_write+0
;driverrf4463pro.c, 834 :: 		i = 0;
; i start address is: 0 (R0)
0x0B0E	0x2000    MOVS	R0, #0
; data_length end address is: 24 (R6)
; i end address is: 0 (R0)
0x0B10	0xB2F4    UXTB	R4, R6
;driverrf4463pro.c, 835 :: 		while ( i != 0xFF ) {
L_spi_read116:
; i start address is: 0 (R0)
; data_length start address is: 16 (R4)
0x0B12	0xF1B00FFF  CMP	R0, #255
0x0B16	0xD002    BEQ	L_spi_read117
; i end address is: 0 (R0)
;driverrf4463pro.c, 836 :: 		i = check_cts();        //Check whether the data can be read
0x0B18	0xF7FFFC8C  BL	_check_cts+0
; i start address is: 0 (R0)
;driverrf4463pro.c, 837 :: 		}
; i end address is: 0 (R0)
0x0B1C	0xE7F9    B	L_spi_read116
L_spi_read117:
;driverrf4463pro.c, 839 :: 		nSEL = 1;
0x0B1E	0x2301    MOVS	R3, #1
0x0B20	0xB25B    SXTB	R3, R3
0x0B22	0x4A16    LDR	R2, [PC, #88]
0x0B24	0x6013    STR	R3, [R2, #0]
;driverrf4463pro.c, 841 :: 		nSEL = 0;
0x0B26	0x2300    MOVS	R3, #0
0x0B28	0xB25B    SXTB	R3, R3
0x0B2A	0x4A14    LDR	R2, [PC, #80]
0x0B2C	0x6013    STR	R3, [R2, #0]
;driverrf4463pro.c, 842 :: 		ucRf4463SPIByte( 0x44 );
0x0B2E	0x2044    MOVS	R0, #68
0x0B30	0xF7FFFC34  BL	_ucRf4463SPIByte+0
;driverrf4463pro.c, 843 :: 		for ( i = 0; i < data_length; i++ ) {        // Read data
; i start address is: 0 (R0)
0x0B34	0x2000    MOVS	R0, #0
; data_length end address is: 16 (R4)
; i end address is: 0 (R0)
0x0B36	0xB2E3    UXTB	R3, R4
0x0B38	0xB2C4    UXTB	R4, R0
L_spi_read118:
; i start address is: 16 (R4)
; data_length start address is: 12 (R3)
0x0B3A	0x429C    CMP	R4, R3
0x0B3C	0xD215    BCS	L_spi_read119
;driverrf4463pro.c, 844 :: 		spi_read_buf[ i ] = ucRf4463SPIByte( 0x00 );             // 0x00
0x0B3E	0x4A10    LDR	R2, [PC, #64]
0x0B40	0x1912    ADDS	R2, R2, R4
0x0B42	0x9202    STR	R2, [SP, #8]
0x0B44	0x2000    MOVS	R0, #0
0x0B46	0xF7FFFC29  BL	_ucRf4463SPIByte+0
0x0B4A	0x9A02    LDR	R2, [SP, #8]
0x0B4C	0x7010    STRB	R0, [R2, #0]
;driverrf4463pro.c, 845 :: 		Delay_ms(10);
0x0B4E	0xF24D47BF  MOVW	R7, #54463
0x0B52	0xF2C00701  MOVT	R7, #1
0x0B56	0xBF00    NOP
0x0B58	0xBF00    NOP
L_spi_read121:
0x0B5A	0x1E7F    SUBS	R7, R7, #1
0x0B5C	0xD1FD    BNE	L_spi_read121
0x0B5E	0xBF00    NOP
0x0B60	0xBF00    NOP
0x0B62	0xBF00    NOP
;driverrf4463pro.c, 843 :: 		for ( i = 0; i < data_length; i++ ) {        // Read data
0x0B64	0x1C64    ADDS	R4, R4, #1
0x0B66	0xB2E4    UXTB	R4, R4
;driverrf4463pro.c, 846 :: 		}
; data_length end address is: 12 (R3)
; i end address is: 16 (R4)
0x0B68	0xE7E7    B	L_spi_read118
L_spi_read119:
;driverrf4463pro.c, 847 :: 		nSEL = 1;
0x0B6A	0x2301    MOVS	R3, #1
0x0B6C	0xB25B    SXTB	R3, R3
0x0B6E	0x4A03    LDR	R2, [PC, #12]
0x0B70	0x6013    STR	R3, [R2, #0]
;driverrf4463pro.c, 848 :: 		}
L_end_spi_read:
0x0B72	0xF8DDE000  LDR	LR, [SP, #0]
0x0B76	0xB003    ADD	SP, SP, #12
0x0B78	0x4770    BX	LR
0x0B7A	0xBF00    NOP
0x0B7C	0x81B04221  	GPIOB_ODRbits+0
0x0B80	0x01422000  	_spi_read_buf+0
; end of _spi_read
_vRF4463PartInfo:
;driverrf4463pro.c, 456 :: 		void vRF4463PartInfo( void ) {  // Solicitud totalmente operativa
0x1560	0xB084    SUB	SP, SP, #16
0x1562	0xF8CDE000  STR	LR, [SP, #0]
;driverrf4463pro.c, 459 :: 		p[ 0 ] = PART_INFO;
0x1566	0xA901    ADD	R1, SP, #4
0x1568	0x2001    MOVS	R0, #1
0x156A	0x7008    STRB	R0, [R1, #0]
;driverrf4463pro.c, 463 :: 		spi_write( 1, p );
0x156C	0x2001    MOVS	R0, #1
0x156E	0xF7FFF9C1  BL	_spi_write+0
;driverrf4463pro.c, 464 :: 		spi_read( 9, PART_INFO );
0x1572	0x2101    MOVS	R1, #1
0x1574	0x2009    MOVS	R0, #9
0x1576	0xF7FFFAB7  BL	_spi_read+0
;driverrf4463pro.c, 465 :: 		}
L_end_vRF4463PartInfo:
0x157A	0xF8DDE000  LDR	LR, [SP, #0]
0x157E	0xB004    ADD	SP, SP, #16
0x1580	0x4770    BX	LR
; end of _vRF4463PartInfo
_UART1_Write_Text:
;__Lib_UART_123_45.c, 75 :: 		
; uart_text start address is: 0 (R0)
0x2064	0xB081    SUB	SP, SP, #4
0x2066	0xF8CDE000  STR	LR, [SP, #0]
; uart_text end address is: 0 (R0)
; uart_text start address is: 0 (R0)
;__Lib_UART_123_45.c, 76 :: 		
0x206A	0x4601    MOV	R1, R0
; uart_text end address is: 0 (R0)
0x206C	0x4803    LDR	R0, [PC, #12]
0x206E	0xF7FEFEA9  BL	__Lib_UART_123_45_UARTx_Write_Text+0
;__Lib_UART_123_45.c, 77 :: 		
L_end_UART1_Write_Text:
0x2072	0xF8DDE000  LDR	LR, [SP, #0]
0x2076	0xB001    ADD	SP, SP, #4
0x2078	0x4770    BX	LR
0x207A	0xBF00    NOP
0x207C	0x38004001  	USART1_SR+0
; end of _UART1_Write_Text
__Lib_UART_123_45_UARTx_Write_Text:
;__Lib_UART_123_45.c, 64 :: 		
; uart_text start address is: 4 (R1)
; UART_Base start address is: 0 (R0)
0x0DC4	0xB081    SUB	SP, SP, #4
0x0DC6	0xF8CDE000  STR	LR, [SP, #0]
; uart_text end address is: 4 (R1)
; UART_Base end address is: 0 (R0)
; UART_Base start address is: 0 (R0)
; uart_text start address is: 4 (R1)
;__Lib_UART_123_45.c, 65 :: 		
; counter start address is: 24 (R6)
0x0DCA	0x2600    MOVS	R6, #0
;__Lib_UART_123_45.c, 67 :: 		
0x0DCC	0x780A    LDRB	R2, [R1, #0]
; data_ start address is: 12 (R3)
0x0DCE	0xB2D3    UXTB	R3, R2
; UART_Base end address is: 0 (R0)
; uart_text end address is: 4 (R1)
; data_ end address is: 12 (R3)
; counter end address is: 24 (R6)
0x0DD0	0x4605    MOV	R5, R0
0x0DD2	0xB2D8    UXTB	R0, R3
0x0DD4	0x460C    MOV	R4, R1
;__Lib_UART_123_45.c, 68 :: 		
L___Lib_UART_123_45_UARTx_Write_Text2:
; data_ start address is: 0 (R0)
; UART_Base start address is: 20 (R5)
; uart_text start address is: 16 (R4)
; counter start address is: 24 (R6)
; uart_text start address is: 16 (R4)
; uart_text end address is: 16 (R4)
; UART_Base start address is: 20 (R5)
; UART_Base end address is: 20 (R5)
0x0DD6	0xB150    CBZ	R0, L___Lib_UART_123_45_UARTx_Write_Text3
; uart_text end address is: 16 (R4)
; UART_Base end address is: 20 (R5)
;__Lib_UART_123_45.c, 69 :: 		
; UART_Base start address is: 20 (R5)
; uart_text start address is: 16 (R4)
0x0DD8	0xB2C1    UXTB	R1, R0
; data_ end address is: 0 (R0)
0x0DDA	0x4628    MOV	R0, R5
0x0DDC	0xF7FFFAF8  BL	__Lib_UART_123_45_UARTx_Write+0
;__Lib_UART_123_45.c, 70 :: 		
0x0DE0	0x1C72    ADDS	R2, R6, #1
0x0DE2	0xB2D2    UXTB	R2, R2
0x0DE4	0xB2D6    UXTB	R6, R2
;__Lib_UART_123_45.c, 71 :: 		
0x0DE6	0x18A2    ADDS	R2, R4, R2
0x0DE8	0x7812    LDRB	R2, [R2, #0]
; data_ start address is: 0 (R0)
0x0DEA	0xB2D0    UXTB	R0, R2
;__Lib_UART_123_45.c, 72 :: 		
; uart_text end address is: 16 (R4)
; UART_Base end address is: 20 (R5)
; counter end address is: 24 (R6)
; data_ end address is: 0 (R0)
0x0DEC	0xE7F3    B	L___Lib_UART_123_45_UARTx_Write_Text2
L___Lib_UART_123_45_UARTx_Write_Text3:
;__Lib_UART_123_45.c, 73 :: 		
L_end_UARTx_Write_Text:
0x0DEE	0xF8DDE000  LDR	LR, [SP, #0]
0x0DF2	0xB001    ADD	SP, SP, #4
0x0DF4	0x4770    BX	LR
; end of __Lib_UART_123_45_UARTx_Write_Text
__Lib_UART_123_45_UARTx_Write:
;__Lib_UART_123_45.c, 35 :: 		
; _data start address is: 4 (R1)
; UART_Base start address is: 0 (R0)
0x03D0	0xB081    SUB	SP, SP, #4
; _data end address is: 4 (R1)
; UART_Base end address is: 0 (R0)
; UART_Base start address is: 0 (R0)
; _data start address is: 4 (R1)
0x03D2	0xF8AD1000  STRH	R1, [SP, #0]
; UART_Base end address is: 0 (R0)
; _data end address is: 4 (R1)
0x03D6	0x4601    MOV	R1, R0
0x03D8	0xF8BD0000  LDRH	R0, [SP, #0]
;__Lib_UART_123_45.c, 36 :: 		
L___Lib_UART_123_45_UARTx_Write0:
; _data start address is: 0 (R0)
; UART_Base start address is: 4 (R1)
0x03DC	0x680B    LDR	R3, [R1, #0]
0x03DE	0xF3C312C0  UBFX	R2, R3, #7, #1
0x03E2	0xB902    CBNZ	R2, L___Lib_UART_123_45_UARTx_Write1
;__Lib_UART_123_45.c, 37 :: 		
0x03E4	0xE7FA    B	L___Lib_UART_123_45_UARTx_Write0
L___Lib_UART_123_45_UARTx_Write1:
;__Lib_UART_123_45.c, 38 :: 		
0x03E6	0x1D0A    ADDS	R2, R1, #4
; UART_Base end address is: 4 (R1)
0x03E8	0x6010    STR	R0, [R2, #0]
; _data end address is: 0 (R0)
;__Lib_UART_123_45.c, 39 :: 		
L_end_UARTx_Write:
0x03EA	0xB001    ADD	SP, SP, #4
0x03EC	0x4770    BX	LR
; end of __Lib_UART_123_45_UARTx_Write
_spi_read_fifo:
;driverrf4463pro.c, 904 :: 		void spi_read_fifo( void ) {
0x20D8	0xB082    SUB	SP, SP, #8
0x20DA	0xF8CDE000  STR	LR, [SP, #0]
;driverrf4463pro.c, 907 :: 		i = 0;
; i start address is: 0 (R0)
0x20DE	0x2000    MOVS	R0, #0
; i end address is: 0 (R0)
;driverrf4463pro.c, 908 :: 		while ( i != 0xFF ) {
L_spi_read_fifo138:
; i start address is: 0 (R0)
0x20E0	0xF1B00FFF  CMP	R0, #255
0x20E4	0xD002    BEQ	L_spi_read_fifo139
; i end address is: 0 (R0)
;driverrf4463pro.c, 909 :: 		i = check_cts();                   // Check if you can send Command
0x20E6	0xF7FEF9A5  BL	_check_cts+0
; i start address is: 0 (R0)
;driverrf4463pro.c, 910 :: 		}
; i end address is: 0 (R0)
0x20EA	0xE7F9    B	L_spi_read_fifo138
L_spi_read_fifo139:
;driverrf4463pro.c, 912 :: 		nSEL = 1;
0x20EC	0x2101    MOVS	R1, #1
0x20EE	0xB249    SXTB	R1, R1
0x20F0	0x480F    LDR	R0, [PC, #60]
0x20F2	0x6001    STR	R1, [R0, #0]
;driverrf4463pro.c, 914 :: 		nSEL = 0;
0x20F4	0x2100    MOVS	R1, #0
0x20F6	0xB249    SXTB	R1, R1
0x20F8	0x480D    LDR	R0, [PC, #52]
0x20FA	0x6001    STR	R1, [R0, #0]
;driverrf4463pro.c, 915 :: 		ucRf4463SPIByte( READ_RX_FIFO );
0x20FC	0x2077    MOVS	R0, #119
0x20FE	0xF7FEF94D  BL	_ucRf4463SPIByte+0
;driverrf4463pro.c, 916 :: 		for ( i = 0; i < payload_length; i++ ) {
; i start address is: 12 (R3)
0x2102	0x2300    MOVS	R3, #0
; i end address is: 12 (R3)
L_spi_read_fifo140:
; i start address is: 12 (R3)
0x2104	0x2B42    CMP	R3, #66
0x2106	0xD20A    BCS	L_spi_read_fifo141
;driverrf4463pro.c, 917 :: 		rx_buf[ i ] = ucRf4463SPIByte( 0xFF );      // Receive 10 test data
0x2108	0x480A    LDR	R0, [PC, #40]
0x210A	0x18C0    ADDS	R0, R0, R3
0x210C	0x9001    STR	R0, [SP, #4]
0x210E	0x20FF    MOVS	R0, #255
0x2110	0xF7FEF944  BL	_ucRf4463SPIByte+0
0x2114	0x9901    LDR	R1, [SP, #4]
0x2116	0x7008    STRB	R0, [R1, #0]
;driverrf4463pro.c, 916 :: 		for ( i = 0; i < payload_length; i++ ) {
0x2118	0x1C5B    ADDS	R3, R3, #1
0x211A	0xB2DB    UXTB	R3, R3
;driverrf4463pro.c, 918 :: 		}
; i end address is: 12 (R3)
0x211C	0xE7F2    B	L_spi_read_fifo140
L_spi_read_fifo141:
;driverrf4463pro.c, 919 :: 		nSEL = 1;
0x211E	0x2101    MOVS	R1, #1
0x2120	0xB249    SXTB	R1, R1
0x2122	0x4803    LDR	R0, [PC, #12]
0x2124	0x6001    STR	R1, [R0, #0]
;driverrf4463pro.c, 920 :: 		}
L_end_spi_read_fifo:
0x2126	0xF8DDE000  LDR	LR, [SP, #0]
0x212A	0xB002    ADD	SP, SP, #8
0x212C	0x4770    BX	LR
0x212E	0xBF00    NOP
0x2130	0x81B04221  	GPIOB_ODRbits+0
0x2134	0x015A2000  	_rx_buf+0
; end of _spi_read_fifo
_vRF4463FifoReset:
;driverrf4463pro.c, 433 :: 		void vRF4463FifoReset( void ) {
0x1F18	0xB082    SUB	SP, SP, #8
0x1F1A	0xF8CDE000  STR	LR, [SP, #0]
;driverrf4463pro.c, 436 :: 		p[ 0 ] = FIFO_INFO;
0x1F1E	0xAA01    ADD	R2, SP, #4
0x1F20	0x2015    MOVS	R0, #21
0x1F22	0x7010    STRB	R0, [R2, #0]
;driverrf4463pro.c, 437 :: 		p[ 1 ] = 0x03;   // reset tx ,rx fifo
0x1F24	0x1C51    ADDS	R1, R2, #1
0x1F26	0x2003    MOVS	R0, #3
0x1F28	0x7008    STRB	R0, [R1, #0]
;driverrf4463pro.c, 438 :: 		spi_write( 2, p );
0x1F2A	0x4611    MOV	R1, R2
0x1F2C	0x2002    MOVS	R0, #2
0x1F2E	0xF7FEFCE1  BL	_spi_write+0
;driverrf4463pro.c, 439 :: 		}
L_end_vRF4463FifoReset:
0x1F32	0xF8DDE000  LDR	LR, [SP, #0]
0x1F36	0xB002    ADD	SP, SP, #8
0x1F38	0x4770    BX	LR
; end of _vRF4463FifoReset
_vRF4463TxData:
;driverrf4463pro.c, 584 :: 		void vRF4463TxData( void ) {
0x1F3C	0xB086    SUB	SP, SP, #24
0x1F3E	0xF8CDE000  STR	LR, [SP, #0]
;driverrf4463pro.c, 587 :: 		ucRF4463IRQ = 0;
0x1F42	0x2100    MOVS	R1, #0
0x1F44	0x481D    LDR	R0, [PC, #116]
0x1F46	0x7001    STRB	R1, [R0, #0]
;driverrf4463pro.c, 589 :: 		Flag.is_tx = 1;
0x1F48	0x2101    MOVS	R1, #1
0x1F4A	0xB249    SXTB	R1, R1
0x1F4C	0x481C    LDR	R0, [PC, #112]
0x1F4E	0x6001    STR	R1, [R0, #0]
;driverrf4463pro.c, 593 :: 		vRF4463FifoReset();            // fifo_reset();  // Buffer empty
0x1F50	0xF7FFFFE2  BL	_vRF4463FifoReset+0
;driverrf4463pro.c, 594 :: 		spi_write_fifo();              // Fill the buffer with data
0x1F54	0xF7FEFEF6  BL	_spi_write_fifo+0
;driverrf4463pro.c, 595 :: 		vRF4463EnableTxInterrupt();    // enable_tx_interrupt();
0x1F58	0xF7FEFDA8  BL	_vRF4463EnableTxInterrupt+0
;driverrf4463pro.c, 596 :: 		vRF4463ClearInterrupts();       // clr_interrupt();  // Clear interrupt factor
0x1F5C	0xF7FFFACE  BL	_vRF4463ClearInterrupts+0
;driverrf4463pro.c, 597 :: 		vRF4463TxStart();              // tx_start();    // Enter launch mode, start launch
0x1F60	0xF7FEFD2E  BL	_vRF4463TxStart+0
;driverrf4463pro.c, 598 :: 		rf_timeout = 0;
0x1F64	0x2100    MOVS	R1, #0
0x1F66	0x4817    LDR	R0, [PC, #92]
0x1F68	0x8001    STRH	R1, [R0, #0]
;driverrf4463pro.c, 600 :: 		Flag.rf_reach_timeout = 0;
0x1F6A	0x2100    MOVS	R1, #0
0x1F6C	0xB249    SXTB	R1, R1
0x1F6E	0x4816    LDR	R0, [PC, #88]
0x1F70	0x6001    STR	R1, [R0, #0]
;driverrf4463pro.c, 602 :: 		if ( ucRF4463IRQ ) {
0x1F72	0x4812    LDR	R0, [PC, #72]
0x1F74	0x7800    LDRB	R0, [R0, #0]
0x1F76	0xB150    CBZ	R0, L_vRF4463TxData89
;driverrf4463pro.c, 603 :: 		UART1_Write_Text( "[ UART1 ] TX INT\r\n" );
0x1F78	0xF10D0B04  ADD	R11, SP, #4
0x1F7C	0xF10B0A13  ADD	R10, R11, #19
0x1F80	0xF8DFC048  LDR	R12, [PC, #72]
0x1F84	0xF7FFF954  BL	___CC2DW+0
0x1F88	0xA801    ADD	R0, SP, #4
0x1F8A	0xF000F86B  BL	_UART1_Write_Text+0
;driverrf4463pro.c, 604 :: 		}
L_vRF4463TxData89:
;driverrf4463pro.c, 607 :: 		while ( nIRQ ) {     //nIRQ
L_vRF4463TxData90:
0x1F8E	0x4810    LDR	R0, [PC, #64]
0x1F90	0x6800    LDR	R0, [R0, #0]
0x1F92	0xB140    CBZ	R0, L_vRF4463TxData91
;driverrf4463pro.c, 610 :: 		if ( Flag.rf_reach_timeout ) {
0x1F94	0x490C    LDR	R1, [PC, #48]
0x1F96	0x6808    LDR	R0, [R1, #0]
0x1F98	0xB120    CBZ	R0, L_vRF4463TxData92
;driverrf4463pro.c, 611 :: 		VRF4463SDNReset();
0x1F9A	0xF7FFFF61  BL	_VRF4463SDNReset+0
;driverrf4463pro.c, 612 :: 		vRF4463Init();        //SI4463_init();  // RF Module initialization
0x1F9E	0xF7FFFAF1  BL	_vRF4463Init+0
;driverrf4463pro.c, 613 :: 		break;                // Forced out
0x1FA2	0xE000    B	L_vRF4463TxData91
;driverrf4463pro.c, 614 :: 		}
L_vRF4463TxData92:
;driverrf4463pro.c, 615 :: 		}
0x1FA4	0xE7F3    B	L_vRF4463TxData90
L_vRF4463TxData91:
;driverrf4463pro.c, 617 :: 		tx_cnt++;
0x1FA6	0x490B    LDR	R1, [PC, #44]
0x1FA8	0x6808    LDR	R0, [R1, #0]
0x1FAA	0x1C40    ADDS	R0, R0, #1
0x1FAC	0x6008    STR	R0, [R1, #0]
;driverrf4463pro.c, 619 :: 		vRF4463RxInit();          // rx_init();                //rf After the transmission is completed, enter the receiving mode
0x1FAE	0xF7FEFCE9  BL	_vRF4463RxInit+0
;driverrf4463pro.c, 620 :: 		}
L_end_vRF4463TxData:
0x1FB2	0xF8DDE000  LDR	LR, [SP, #0]
0x1FB6	0xB006    ADD	SP, SP, #24
0x1FB8	0x4770    BX	LR
0x1FBA	0xBF00    NOP
0x1FBC	0x00A72000  	DriverRF4463PROMain_ucRF4463IRQ+0
0x1FC0	0x2AC42200  	_Flag+0
0x1FC4	0x01582000  	_rf_timeout+0
0x1FC8	0x2AC82200  	_Flag+0
0x1FCC	0x31D20000  	?ICS?lstr1_DriverRF4463PROMain+0
0x1FD0	0x01304222  	GPIOC_IDRbits+0
0x1FD4	0x00A82000  	_tx_cnt+0
; end of _vRF4463TxData
_spi_write_fifo:
;driverrf4463pro.c, 875 :: 		void spi_write_fifo( void ) {
0x0D44	0xB081    SUB	SP, SP, #4
0x0D46	0xF8CDE000  STR	LR, [SP, #0]
;driverrf4463pro.c, 878 :: 		i = 0;
; i start address is: 0 (R0)
0x0D4A	0x2000    MOVS	R0, #0
; i end address is: 0 (R0)
;driverrf4463pro.c, 879 :: 		while ( i != 0xFF ) {
L_spi_write_fifo128:
; i start address is: 0 (R0)
0x0D4C	0xF1B00FFF  CMP	R0, #255
0x0D50	0xD002    BEQ	L_spi_write_fifo129
; i end address is: 0 (R0)
;driverrf4463pro.c, 880 :: 		i = check_cts();                // Check if you can send Command
0x0D52	0xF7FFFB6F  BL	_check_cts+0
; i start address is: 0 (R0)
;driverrf4463pro.c, 881 :: 		}
; i end address is: 0 (R0)
0x0D56	0xE7F9    B	L_spi_write_fifo128
L_spi_write_fifo129:
;driverrf4463pro.c, 883 :: 		nSEL = 1;
0x0D58	0x2101    MOVS	R1, #1
0x0D5A	0xB249    SXTB	R1, R1
0x0D5C	0x4815    LDR	R0, [PC, #84]
0x0D5E	0x6001    STR	R1, [R0, #0]
;driverrf4463pro.c, 885 :: 		nSEL = 0;
0x0D60	0x2100    MOVS	R1, #0
0x0D62	0xB249    SXTB	R1, R1
0x0D64	0x4813    LDR	R0, [PC, #76]
0x0D66	0x6001    STR	R1, [R0, #0]
;driverrf4463pro.c, 886 :: 		ucRf4463SPIByte( WRITE_TX_FIFO );
0x0D68	0x2066    MOVS	R0, #102
0x0D6A	0xF7FFFB17  BL	_ucRf4463SPIByte+0
;driverrf4463pro.c, 888 :: 		if ( mode == tx_test_mode) {
0x0D6E	0x4812    LDR	R0, [PC, #72]
0x0D70	0x7800    LDRB	R0, [R0, #0]
0x0D72	0x2802    CMP	R0, #2
0x0D74	0xD10B    BNE	L_spi_write_fifo130
;driverrf4463pro.c, 889 :: 		for ( i = 0; i < payload_length; i++ ) {
; i start address is: 12 (R3)
0x0D76	0x2300    MOVS	R3, #0
; i end address is: 12 (R3)
L_spi_write_fifo131:
; i start address is: 12 (R3)
0x0D78	0x2B42    CMP	R3, #66
0x0D7A	0xD207    BCS	L_spi_write_fifo132
;driverrf4463pro.c, 890 :: 		ucRf4463SPIByte( tx_test_aa_data[ i ] );   // Send 10 test data
0x0D7C	0x480F    LDR	R0, [PC, #60]
0x0D7E	0x18C0    ADDS	R0, R0, R3
0x0D80	0x7800    LDRB	R0, [R0, #0]
0x0D82	0xF7FFFB0B  BL	_ucRf4463SPIByte+0
;driverrf4463pro.c, 889 :: 		for ( i = 0; i < payload_length; i++ ) {
0x0D86	0x1C5B    ADDS	R3, R3, #1
0x0D88	0xB2DB    UXTB	R3, R3
;driverrf4463pro.c, 891 :: 		}
; i end address is: 12 (R3)
0x0D8A	0xE7F5    B	L_spi_write_fifo131
L_spi_write_fifo132:
;driverrf4463pro.c, 892 :: 		}
0x0D8C	0xE00A    B	L_spi_write_fifo134
L_spi_write_fifo130:
;driverrf4463pro.c, 894 :: 		for ( i = 0; i < payload_length; i++ ) {
; i start address is: 12 (R3)
0x0D8E	0x2300    MOVS	R3, #0
; i end address is: 12 (R3)
L_spi_write_fifo135:
; i start address is: 12 (R3)
0x0D90	0x2B42    CMP	R3, #66
0x0D92	0xD207    BCS	L_spi_write_fifo136
;driverrf4463pro.c, 895 :: 		ucRf4463SPIByte( tx_ph_data[ i ] );
0x0D94	0x480A    LDR	R0, [PC, #40]
0x0D96	0x18C0    ADDS	R0, R0, R3
0x0D98	0x7800    LDRB	R0, [R0, #0]
0x0D9A	0xF7FFFAFF  BL	_ucRf4463SPIByte+0
;driverrf4463pro.c, 894 :: 		for ( i = 0; i < payload_length; i++ ) {
0x0D9E	0x1C5B    ADDS	R3, R3, #1
0x0DA0	0xB2DB    UXTB	R3, R3
;driverrf4463pro.c, 896 :: 		}
; i end address is: 12 (R3)
0x0DA2	0xE7F5    B	L_spi_write_fifo135
L_spi_write_fifo136:
;driverrf4463pro.c, 897 :: 		}
L_spi_write_fifo134:
;driverrf4463pro.c, 898 :: 		nSEL = 1;
0x0DA4	0x2101    MOVS	R1, #1
0x0DA6	0xB249    SXTB	R1, R1
0x0DA8	0x4802    LDR	R0, [PC, #8]
0x0DAA	0x6001    STR	R1, [R0, #0]
;driverrf4463pro.c, 899 :: 		}
L_end_spi_write_fifo:
0x0DAC	0xF8DDE000  LDR	LR, [SP, #0]
0x0DB0	0xB001    ADD	SP, SP, #4
0x0DB2	0x4770    BX	LR
0x0DB4	0x81B04221  	GPIOB_ODRbits+0
0x0DB8	0x019D2000  	_mode+0
0x0DBC	0x31F50000  	_tx_test_aa_data+0
0x0DC0	0x314B0000  	_tx_ph_data+0
; end of _spi_write_fifo
_vRF4463EnableTxInterrupt:
;driverrf4463pro.c, 486 :: 		void vRF4463EnableTxInterrupt( void ) {
0x0AAC	0xB083    SUB	SP, SP, #12
0x0AAE	0xF8CDE000  STR	LR, [SP, #0]
;driverrf4463pro.c, 489 :: 		p[ 0 ] = 0x11;
0x0AB2	0xAA01    ADD	R2, SP, #4
0x0AB4	0x2011    MOVS	R0, #17
0x0AB6	0x7010    STRB	R0, [R2, #0]
;driverrf4463pro.c, 490 :: 		p[ 1 ] = 0x01;            // 0x0100
0x0AB8	0x1C51    ADDS	R1, R2, #1
0x0ABA	0x2001    MOVS	R0, #1
0x0ABC	0x7008    STRB	R0, [R1, #0]
;driverrf4463pro.c, 491 :: 		p[ 2 ] = 0x02;            // 2Parameters
0x0ABE	0x1C91    ADDS	R1, R2, #2
0x0AC0	0x2002    MOVS	R0, #2
0x0AC2	0x7008    STRB	R0, [R1, #0]
;driverrf4463pro.c, 492 :: 		p[ 3 ] = 0x00;            // 0x0100
0x0AC4	0x1CD1    ADDS	R1, R2, #3
0x0AC6	0x2000    MOVS	R0, #0
0x0AC8	0x7008    STRB	R0, [R1, #0]
;driverrf4463pro.c, 493 :: 		p[ 4 ] = 0x01;            // Ph  int
0x0ACA	0x1D11    ADDS	R1, R2, #4
0x0ACC	0x2001    MOVS	R0, #1
0x0ACE	0x7008    STRB	R0, [R1, #0]
;driverrf4463pro.c, 494 :: 		p[ 5 ] = 0x20;            //  enable  packet sent interrupt
0x0AD0	0x1D51    ADDS	R1, R2, #5
0x0AD2	0x2020    MOVS	R0, #32
0x0AD4	0x7008    STRB	R0, [R1, #0]
;driverrf4463pro.c, 495 :: 		spi_write( 0x06, p );     // enable  packet receive interrupt
0x0AD6	0x4611    MOV	R1, R2
0x0AD8	0x2006    MOVS	R0, #6
0x0ADA	0xF7FFFF0B  BL	_spi_write+0
;driverrf4463pro.c, 496 :: 		}
L_end_vRF4463EnableTxInterrupt:
0x0ADE	0xF8DDE000  LDR	LR, [SP, #0]
0x0AE2	0xB003    ADD	SP, SP, #12
0x0AE4	0x4770    BX	LR
; end of _vRF4463EnableTxInterrupt
_vRF4463TxStart:
;driverrf4463pro.c, 512 :: 		void vRF4463TxStart( void ) {
0x09C0	0xB083    SUB	SP, SP, #12
0x09C2	0xF8CDE000  STR	LR, [SP, #0]
;driverrf4463pro.c, 515 :: 		p[ 0 ] = START_TX ;       // start Command
0x09C6	0xAA01    ADD	R2, SP, #4
0x09C8	0x2031    MOVS	R0, #49
0x09CA	0x7010    STRB	R0, [R2, #0]
;driverrf4463pro.c, 516 :: 		p[ 1 ] = freq_channel;    // channel 0
0x09CC	0x1C51    ADDS	R1, R2, #1
0x09CE	0x2001    MOVS	R0, #1
0x09D0	0x7008    STRB	R0, [R1, #0]
;driverrf4463pro.c, 517 :: 		p[ 2 ] = 0x30;            // Back after launch Readymode, Do not retransmit, launch immediately
0x09D2	0x1C91    ADDS	R1, R2, #2
0x09D4	0x2030    MOVS	R0, #48
0x09D6	0x7008    STRB	R0, [R1, #0]
;driverrf4463pro.c, 518 :: 		p[ 3 ] = 0;
0x09D8	0x1CD1    ADDS	R1, R2, #3
0x09DA	0x2000    MOVS	R0, #0
0x09DC	0x7008    STRB	R0, [R1, #0]
;driverrf4463pro.c, 519 :: 		p[ 4 ] = 0;               //payload_length; // Total to transmit 10 bytes
0x09DE	0x1D11    ADDS	R1, R2, #4
0x09E0	0x2000    MOVS	R0, #0
0x09E2	0x7008    STRB	R0, [R1, #0]
;driverrf4463pro.c, 520 :: 		spi_write( 5, p );
0x09E4	0x4611    MOV	R1, R2
0x09E6	0x2005    MOVS	R0, #5
0x09E8	0xF7FFFF84  BL	_spi_write+0
;driverrf4463pro.c, 521 :: 		}
L_end_vRF4463TxStart:
0x09EC	0xF8DDE000  LDR	LR, [SP, #0]
0x09F0	0xB003    ADD	SP, SP, #12
0x09F2	0x4770    BX	LR
; end of _vRF4463TxStart
_vRF4463RxInit:
;driverrf4463pro.c, 567 :: 		void vRF4463RxInit( void ) {
0x0984	0xB081    SUB	SP, SP, #4
0x0986	0xF8CDE000  STR	LR, [SP, #0]
;driverrf4463pro.c, 568 :: 		Flag.is_tx = 0;
0x098A	0x2100    MOVS	R1, #0
0x098C	0xB249    SXTB	R1, R1
0x098E	0x480A    LDR	R0, [PC, #40]
0x0990	0x6001    STR	R1, [R0, #0]
;driverrf4463pro.c, 569 :: 		vRF4463FifoReset();           // fifo_reset();  // Buffer empty
0x0992	0xF001FAC1  BL	_vRF4463FifoReset+0
;driverrf4463pro.c, 570 :: 		vRF4463EnableRxInterrupt();   // enable_rx_interrupt();
0x0996	0xF7FFFED7  BL	_vRF4463EnableRxInterrupt+0
;driverrf4463pro.c, 571 :: 		vRF4463ClearInterrupts();      // clr_interrupt();  // Clear interrupt factor
0x099A	0xF000FDAF  BL	_vRF4463ClearInterrupts+0
;driverrf4463pro.c, 573 :: 		if ( mode == rx_test_mode ) {
0x099E	0x4807    LDR	R0, [PC, #28]
0x09A0	0x7800    LDRB	R0, [R0, #0]
0x09A2	0x2803    CMP	R0, #3
0x09A4	0xD102    BNE	L_vRF4463RxInit87
;driverrf4463pro.c, 574 :: 		vRF4463RxStartTest();      // rx_start_test();
0x09A6	0xF7FFFF35  BL	_vRF4463RxStartTest+0
;driverrf4463pro.c, 575 :: 		}
0x09AA	0xE001    B	L_vRF4463RxInit88
L_vRF4463RxInit87:
;driverrf4463pro.c, 577 :: 		vRF4463RxStart();        // rx_start();    // Enter receiving mode, after receiving data, return to Readymode
0x09AC	0xF7FFFD5E  BL	_vRF4463RxStart+0
;driverrf4463pro.c, 578 :: 		}
L_vRF4463RxInit88:
;driverrf4463pro.c, 579 :: 		}
L_end_vRF4463RxInit:
0x09B0	0xF8DDE000  LDR	LR, [SP, #0]
0x09B4	0xB001    ADD	SP, SP, #4
0x09B6	0x4770    BX	LR
0x09B8	0x2AC42200  	_Flag+0
0x09BC	0x019D2000  	_mode+0
; end of _vRF4463RxInit
_vRF4463EnableRxInterrupt:
;driverrf4463pro.c, 470 :: 		void vRF4463EnableRxInterrupt( void ) {
0x0748	0xB083    SUB	SP, SP, #12
0x074A	0xF8CDE000  STR	LR, [SP, #0]
;driverrf4463pro.c, 473 :: 		p[ 0 ] = 0x11;
0x074E	0xAA01    ADD	R2, SP, #4
0x0750	0x2011    MOVS	R0, #17
0x0752	0x7010    STRB	R0, [R2, #0]
;driverrf4463pro.c, 474 :: 		p[ 1 ] = 0x01;            // 0x0100
0x0754	0x1C51    ADDS	R1, R2, #1
0x0756	0x2001    MOVS	R0, #1
0x0758	0x7008    STRB	R0, [R1, #0]
;driverrf4463pro.c, 475 :: 		p[ 2 ] = 0x03;            // 3Parameters
0x075A	0x1C91    ADDS	R1, R2, #2
0x075C	0x2003    MOVS	R0, #3
0x075E	0x7008    STRB	R0, [R1, #0]
;driverrf4463pro.c, 476 :: 		p[ 3 ] = 0x00;            // 0100
0x0760	0x1CD1    ADDS	R1, R2, #3
0x0762	0x2000    MOVS	R0, #0
0x0764	0x7008    STRB	R0, [R1, #0]
;driverrf4463pro.c, 477 :: 		p[ 4 ] = 0x03;            // ph, modem int       0x03;
0x0766	0x1D11    ADDS	R1, R2, #4
0x0768	0x2003    MOVS	R0, #3
0x076A	0x7008    STRB	R0, [R1, #0]
;driverrf4463pro.c, 478 :: 		p[ 5 ] = 0x18;            // 0x10;   // Pack received int
0x076C	0x1D51    ADDS	R1, R2, #5
0x076E	0x2018    MOVS	R0, #24
0x0770	0x7008    STRB	R0, [R1, #0]
;driverrf4463pro.c, 479 :: 		p[ 6 ] = 0x00;            //preamble int, sync int setting
0x0772	0x1D91    ADDS	R1, R2, #6
0x0774	0x2000    MOVS	R0, #0
0x0776	0x7008    STRB	R0, [R1, #0]
;driverrf4463pro.c, 480 :: 		spi_write( 0x07, p );     // enable  packet receive interrupt
0x0778	0x4611    MOV	R1, R2
0x077A	0x2007    MOVS	R0, #7
0x077C	0xF000F8BA  BL	_spi_write+0
;driverrf4463pro.c, 481 :: 		}
L_end_vRF4463EnableRxInterrupt:
0x0780	0xF8DDE000  LDR	LR, [SP, #0]
0x0784	0xB003    ADD	SP, SP, #12
0x0786	0x4770    BX	LR
; end of _vRF4463EnableRxInterrupt
_vRF4463RxStartTest:
;driverrf4463pro.c, 545 :: 		void vRF4463RxStartTest( void ) {
0x0814	0xB083    SUB	SP, SP, #12
0x0816	0xF8CDE000  STR	LR, [SP, #0]
;driverrf4463pro.c, 548 :: 		LED_GREEN = 1;
0x081A	0x2101    MOVS	R1, #1
0x081C	0xB249    SXTB	R1, R1
0x081E	0x4811    LDR	R0, [PC, #68]
0x0820	0x6001    STR	R1, [R0, #0]
;driverrf4463pro.c, 550 :: 		p[ 0 ] = START_RX;        // start Command
0x0822	0xAA01    ADD	R2, SP, #4
0x0824	0x2032    MOVS	R0, #50
0x0826	0x7010    STRB	R0, [R2, #0]
;driverrf4463pro.c, 551 :: 		p[ 1 ] = freq_channel;    // channel 0
0x0828	0x1C51    ADDS	R1, R2, #1
0x082A	0x2001    MOVS	R0, #1
0x082C	0x7008    STRB	R0, [R1, #0]
;driverrf4463pro.c, 552 :: 		p[ 2 ] = 0x00;            // Enter receiving mode immediately
0x082E	0x1C91    ADDS	R1, R2, #2
0x0830	0x2000    MOVS	R0, #0
0x0832	0x7008    STRB	R0, [R1, #0]
;driverrf4463pro.c, 553 :: 		p[ 3 ] = 0;
0x0834	0x1CD1    ADDS	R1, R2, #3
0x0836	0x2000    MOVS	R0, #0
0x0838	0x7008    STRB	R0, [R1, #0]
;driverrf4463pro.c, 555 :: 		p[ 4 ] = 0;
0x083A	0x1D11    ADDS	R1, R2, #4
0x083C	0x2000    MOVS	R0, #0
0x083E	0x7008    STRB	R0, [R1, #0]
;driverrf4463pro.c, 556 :: 		p[ 5 ] = 0;               // unchanged after preamble timeout
0x0840	0x1D51    ADDS	R1, R2, #5
0x0842	0x2000    MOVS	R0, #0
0x0844	0x7008    STRB	R0, [R1, #0]
;driverrf4463pro.c, 559 :: 		p[ 6 ] = 0x08;
0x0846	0x1D91    ADDS	R1, R2, #6
0x0848	0x2008    MOVS	R0, #8
0x084A	0x7008    STRB	R0, [R1, #0]
;driverrf4463pro.c, 560 :: 		p[ 7 ] = 0x08;
0x084C	0x1DD1    ADDS	R1, R2, #7
0x084E	0x2008    MOVS	R0, #8
0x0850	0x7008    STRB	R0, [R1, #0]
;driverrf4463pro.c, 561 :: 		spi_write( 8, p );
0x0852	0x4611    MOV	R1, R2
0x0854	0x2008    MOVS	R0, #8
0x0856	0xF000F84D  BL	_spi_write+0
;driverrf4463pro.c, 562 :: 		}
L_end_vRF4463RxStartTest:
0x085A	0xF8DDE000  LDR	LR, [SP, #0]
0x085E	0xB003    ADD	SP, SP, #12
0x0860	0x4770    BX	LR
0x0862	0xBF00    NOP
0x0864	0x019C4222  	GPIOC_ODRbits+0
; end of _vRF4463RxStartTest
_vRF4463RxStart:
;driverrf4463pro.c, 526 :: 		void vRF4463RxStart( void ) {
0x046C	0xB083    SUB	SP, SP, #12
0x046E	0xF8CDE000  STR	LR, [SP, #0]
;driverrf4463pro.c, 529 :: 		p[ 0 ] = START_RX ;       // start Command
0x0472	0xAA01    ADD	R2, SP, #4
0x0474	0x2032    MOVS	R0, #50
0x0476	0x7010    STRB	R0, [R2, #0]
;driverrf4463pro.c, 530 :: 		p[ 1 ] = freq_channel;    // channel 0
0x0478	0x1C51    ADDS	R1, R2, #1
0x047A	0x2001    MOVS	R0, #1
0x047C	0x7008    STRB	R0, [R1, #0]
;driverrf4463pro.c, 531 :: 		p[ 2 ] = 0x00;            // Enter receiving mode immediately
0x047E	0x1C91    ADDS	R1, R2, #2
0x0480	0x2000    MOVS	R0, #0
0x0482	0x7008    STRB	R0, [R1, #0]
;driverrf4463pro.c, 532 :: 		p[ 3 ] = 0;
0x0484	0x1CD1    ADDS	R1, R2, #3
0x0486	0x2000    MOVS	R0, #0
0x0488	0x7008    STRB	R0, [R1, #0]
;driverrf4463pro.c, 533 :: 		p[ 4 ] = 0;               // payload_length; // Total to receive 10 bytes
0x048A	0x1D11    ADDS	R1, R2, #4
0x048C	0x2000    MOVS	R0, #0
0x048E	0x7008    STRB	R0, [R1, #0]
;driverrf4463pro.c, 534 :: 		p[ 5 ] = 0;               // unchanged after preamble timeout
0x0490	0x1D51    ADDS	R1, R2, #5
0x0492	0x2000    MOVS	R0, #0
0x0494	0x7008    STRB	R0, [R1, #0]
;driverrf4463pro.c, 537 :: 		p[ 6 ] = 0x08;
0x0496	0x1D91    ADDS	R1, R2, #6
0x0498	0x2008    MOVS	R0, #8
0x049A	0x7008    STRB	R0, [R1, #0]
;driverrf4463pro.c, 538 :: 		p[ 7 ] = 0x08;
0x049C	0x1DD1    ADDS	R1, R2, #7
0x049E	0x2008    MOVS	R0, #8
0x04A0	0x7008    STRB	R0, [R1, #0]
;driverrf4463pro.c, 539 :: 		spi_write( 8, p );
0x04A2	0x4611    MOV	R1, R2
0x04A4	0x2008    MOVS	R0, #8
0x04A6	0xF000FA25  BL	_spi_write+0
;driverrf4463pro.c, 540 :: 		}
L_end_vRF4463RxStart:
0x04AA	0xF8DDE000  LDR	LR, [SP, #0]
0x04AE	0xB003    ADD	SP, SP, #12
0x04B0	0x4770    BX	LR
; end of _vRF4463RxStart
_vRF4463TxCont:
;driverrf4463pro.c, 625 :: 		void vRF4463TxCont( void ) {
0x1110	0xB081    SUB	SP, SP, #4
0x1112	0xF8CDE000  STR	LR, [SP, #0]
;driverrf4463pro.c, 628 :: 		LED_RED = 1;
0x1116	0x2101    MOVS	R1, #1
0x1118	0xB249    SXTB	R1, R1
0x111A	0x480F    LDR	R0, [PC, #60]
0x111C	0x6001    STR	R1, [R0, #0]
;driverrf4463pro.c, 629 :: 		vRF4463FifoReset();                     //  fifo_reset();  // Buffer empty
0x111E	0xF000FEFB  BL	_vRF4463FifoReset+0
;driverrf4463pro.c, 630 :: 		spi_write_fifo();                       // Fill the buffer with data
0x1122	0xF7FFFE0F  BL	_spi_write_fifo+0
;driverrf4463pro.c, 631 :: 		vRF4463EnableTxInterrupt();             //  enable_tx_interrupt();
0x1126	0xF7FFFCC1  BL	_vRF4463EnableTxInterrupt+0
;driverrf4463pro.c, 632 :: 		vRF4463ClearInterrupts();               //  clr_interrupt();  // Clear interrupt factor
0x112A	0xF000F9E7  BL	_vRF4463ClearInterrupts+0
;driverrf4463pro.c, 633 :: 		vRF4463TxStart();                       //  tx_start();    // Enter launch mode, start launch
0x112E	0xF7FFFC47  BL	_vRF4463TxStart+0
;driverrf4463pro.c, 634 :: 		rf_timeout = 0;
0x1132	0x2100    MOVS	R1, #0
0x1134	0x4809    LDR	R0, [PC, #36]
0x1136	0x8001    STRH	R1, [R0, #0]
;driverrf4463pro.c, 635 :: 		Flag.rf_reach_timeout = 0;
0x1138	0x2100    MOVS	R1, #0
0x113A	0xB249    SXTB	R1, R1
0x113C	0x4808    LDR	R0, [PC, #32]
0x113E	0x6001    STR	R1, [R0, #0]
;driverrf4463pro.c, 637 :: 		ucRF4463IRQ = 0;
0x1140	0x2100    MOVS	R1, #0
0x1142	0x4808    LDR	R0, [PC, #32]
0x1144	0x7001    STRB	R1, [R0, #0]
;driverrf4463pro.c, 640 :: 		while( nIRQ ) {          //nIRQ ) {
L_vRF4463TxCont93:
0x1146	0x4808    LDR	R0, [PC, #32]
0x1148	0x6800    LDR	R0, [R0, #0]
0x114A	0xB100    CBZ	R0, L_vRF4463TxCont94
;driverrf4463pro.c, 648 :: 		}
0x114C	0xE7FB    B	L_vRF4463TxCont93
L_vRF4463TxCont94:
;driverrf4463pro.c, 649 :: 		}
L_end_vRF4463TxCont:
0x114E	0xF8DDE000  LDR	LR, [SP, #0]
0x1152	0xB001    ADD	SP, SP, #4
0x1154	0x4770    BX	LR
0x1156	0xBF00    NOP
0x1158	0x01984222  	GPIOC_ODRbits+0
0x115C	0x01582000  	_rf_timeout+0
0x1160	0x2AC82200  	_Flag+0
0x1164	0x00A72000  	DriverRF4463PROMain_ucRF4463IRQ+0
0x1168	0x01304222  	GPIOC_IDRbits+0
; end of _vRF4463TxCont
__UnsignedIntegralToFloat:
;__Lib_MathDouble.c, 262 :: 		
0x1328	0xB081    SUB	SP, SP, #4
;__Lib_MathDouble.c, 264 :: 		
0x132A	0x2800    CMP	R0, #0
;__Lib_MathDouble.c, 265 :: 		
0x132C	0xBF08    IT	EQ
;__Lib_MathDouble.c, 267 :: 		
0x132E	0xE00F    BEQ	__me_lab_end
;__Lib_MathDouble.c, 269 :: 		
0x1330	0xB502    PUSH	(R1, R14)
;__Lib_MathDouble.c, 271 :: 		
0x1332	0xF04F029E  MOV	R2, #158
;__Lib_MathDouble.c, 272 :: 		
0x1336	0xD402    BMI	__me_label_cont
;__Lib_MathDouble.c, 274 :: 		
__me_loop:
0x1338	0x1E52    SUBS	R2, R2, #1
;__Lib_MathDouble.c, 275 :: 		
0x133A	0x0040    LSLS	R0, R0, #1
;__Lib_MathDouble.c, 277 :: 		
0x133C	0xD5FC    BPL	__me_loop
;__Lib_MathDouble.c, 279 :: 		
__me_label_cont:
0x133E	0x3080    ADDS	R0, #128
;__Lib_MathDouble.c, 280 :: 		
0x1340	0xBF2C    ITE	CS
;__Lib_MathDouble.c, 281 :: 		
0x1342	0x1C52    ADDCS	R2, R2, #1
;__Lib_MathDouble.c, 282 :: 		
0x1344	0x0040    LSLCC	R0, R0, #1
;__Lib_MathDouble.c, 284 :: 		
0x1346	0x0A40    LSRS	R0, R0, #9
;__Lib_MathDouble.c, 285 :: 		
0x1348	0xEA4050C2  ORR	R0, R0, R2, LSL #23
;__Lib_MathDouble.c, 287 :: 		
0x134C	0xE8BD4002  POP	(R1, R14)
;__Lib_MathDouble.c, 288 :: 		
__me_lab_end:
;__Lib_MathDouble.c, 290 :: 		
L_end__UnsignedIntegralToFloat:
0x1350	0xB001    ADD	SP, SP, #4
0x1352	0x4770    BX	LR
; end of __UnsignedIntegralToFloat
__Div_FP:
;__Lib_MathDouble.c, 743 :: 		
0x1354	0xB081    SUB	SP, SP, #4
;__Lib_MathDouble.c, 745 :: 		
0x1356	0xB5FA    PUSH	(R1, R3, R4, R5, R6, R7, R14)
;__Lib_MathDouble.c, 746 :: 		
0x1358	0xEA900602  EORS	R6, R0, R2, LSL #0
;__Lib_MathDouble.c, 747 :: 		
0x135C	0xBF4C    ITE	MI
;__Lib_MathDouble.c, 748 :: 		
0x135E	0xF04F4600  MOVMI	R6, #-2147483648
;__Lib_MathDouble.c, 749 :: 		
0x1362	0xF04F0600  MOVPL	R6, #0
;__Lib_MathDouble.c, 751 :: 		
0x1366	0x0201    LSLS	R1, R0, #8
;__Lib_MathDouble.c, 752 :: 		
0x1368	0x0043    LSLS	R3, R0, #1
;__Lib_MathDouble.c, 753 :: 		
0x136A	0x0E1B    LSRS	R3, R3, #24
;__Lib_MathDouble.c, 754 :: 		
0x136C	0xBF12    ITEE	NE
;__Lib_MathDouble.c, 755 :: 		
0x136E	0xF0414100  ORRNE	R1, R1, #-2147483648
;__Lib_MathDouble.c, 757 :: 		
0x1372	0xF04F0000  MOVEQ	R0, #0
;__Lib_MathDouble.c, 759 :: 		
0x1376	0xE03B    BEQ	__me_lab_end
;__Lib_MathDouble.c, 761 :: 		
0x1378	0x2BFF    CMP	R3, #255
;__Lib_MathDouble.c, 762 :: 		
0x137A	0xD035    BEQ	__me_ovfl
;__Lib_MathDouble.c, 764 :: 		
0x137C	0xEA5F2402  LSLS	R4, R2, #8
;__Lib_MathDouble.c, 765 :: 		
0x1380	0xEA5F0542  LSLS	R5, R2, #1
;__Lib_MathDouble.c, 766 :: 		
0x1384	0xEA5F6515  LSRS	R5, R5, #24
;__Lib_MathDouble.c, 767 :: 		
0x1388	0xBF11    ITEEE	NE
;__Lib_MathDouble.c, 769 :: 		
0x138A	0xF0444400  ORRNE	R4, R4, #-2147483648
;__Lib_MathDouble.c, 770 :: 		
0x138E	0xF04F40FF  MOVEQ	R0, #2139095040
;__Lib_MathDouble.c, 771 :: 		
0x1392	0x4330    ORREQ	R0, R6
;__Lib_MathDouble.c, 773 :: 		
0x1394	0xE02C    BEQ	__me_lab_end
;__Lib_MathDouble.c, 775 :: 		
0x1396	0x2DFF    CMP	R5, #255
;__Lib_MathDouble.c, 776 :: 		
0x1398	0xD026    BEQ	__me_ovfl
;__Lib_MathDouble.c, 778 :: 		
0x139A	0x1B5B    SUBS	R3, R3, R5
;__Lib_MathDouble.c, 781 :: 		
0x139C	0x2000    MOVS	R0, #0
;__Lib_MathDouble.c, 782 :: 		
0x139E	0x2720    MOVS	R7, #32
;__Lib_MathDouble.c, 783 :: 		
0x13A0	0x0864    LSRS	R4, R4, #1
;__Lib_MathDouble.c, 784 :: 		
0x13A2	0x0849    LSRS	R1, R1, #1
;__Lib_MathDouble.c, 786 :: 		
__me_fdiv_:
;__Lib_MathDouble.c, 788 :: 		
0x13A4	0x42A1    CMP	R1, R4
;__Lib_MathDouble.c, 790 :: 		
0x13A6	0xEB400000  ADC	R0, R0, R0, LSL #0
;__Lib_MathDouble.c, 791 :: 		
0x13AA	0xBF28    IT	CS
;__Lib_MathDouble.c, 792 :: 		
0x13AC	0x1B09    SUBCS	R1, R1, R4
;__Lib_MathDouble.c, 793 :: 		
0x13AE	0x1E7F    SUBS	R7, R7, #1
;__Lib_MathDouble.c, 794 :: 		
0x13B0	0xD004    BEQ	__me_flb1_
;__Lib_MathDouble.c, 795 :: 		
0x13B2	0x2900    CMP	R1, #0
;__Lib_MathDouble.c, 796 :: 		
0x13B4	0xBF18    IT	NE
;__Lib_MathDouble.c, 797 :: 		
0x13B6	0x0049    LSLNE	R1, R1, #1
;__Lib_MathDouble.c, 798 :: 		
0x13B8	0xD1F4    BNE	__me_fdiv_
;__Lib_MathDouble.c, 800 :: 		
0x13BA	0x40B8    LSLS	R0, R7
;__Lib_MathDouble.c, 802 :: 		
__me_flb1_:
0x13BC	0xF0104F00  TST	R0, #-2147483648
;__Lib_MathDouble.c, 803 :: 		
0x13C0	0xBF04    ITT	EQ
;__Lib_MathDouble.c, 804 :: 		
0x13C2	0x0040    LSLEQ	R0, R0, #1
;__Lib_MathDouble.c, 805 :: 		
0x13C4	0xF1B30301  SUBSEQ	R3, R3, #1
;__Lib_MathDouble.c, 807 :: 		
0x13C8	0x3080    ADDS	R0, #128
;__Lib_MathDouble.c, 808 :: 		
0x13CA	0xBF2C    ITE	CS
;__Lib_MathDouble.c, 809 :: 		
0x13CC	0x1C5B    ADDCS	R3, R3, #1
;__Lib_MathDouble.c, 810 :: 		
0x13CE	0x0040    LSLCC	R0, R0, #1
;__Lib_MathDouble.c, 812 :: 		
__me_flb2_:
0x13D0	0x337F    ADDS	R3, #127
;__Lib_MathDouble.c, 813 :: 		
0x13D2	0xBFDC    ITT	LE
;__Lib_MathDouble.c, 814 :: 		
0x13D4	0xF04F0000  MOVLE	R0, #0
;__Lib_MathDouble.c, 816 :: 		
0x13D8	0xE00A    BLE	__me_lab_end
;__Lib_MathDouble.c, 818 :: 		
0x13DA	0x2BFF    CMP	R3, #255
;__Lib_MathDouble.c, 819 :: 		
0x13DC	0xD204    BCS	__me_ovfl
;__Lib_MathDouble.c, 821 :: 		
0x13DE	0x0A40    LSRS	R0, R0, #9
;__Lib_MathDouble.c, 822 :: 		
0x13E0	0xEA4050C3  ORR	R0, R0, R3, LSL #23
;__Lib_MathDouble.c, 823 :: 		
0x13E4	0x4330    ORRS	R0, R6
;__Lib_MathDouble.c, 826 :: 		
0x13E6	0xE003    B	__me_lab_end
;__Lib_MathDouble.c, 828 :: 		
__me_ovfl:
0x13E8	0x27FF    MOVS	R7, #255
;__Lib_MathDouble.c, 829 :: 		
0x13EA	0x05FF    LSLS	R7, R7, #23
;__Lib_MathDouble.c, 830 :: 		
0x13EC	0xEA560007  ORRS	R0, R6, R7, LSL #0
;__Lib_MathDouble.c, 831 :: 		
__me_lab_end:
;__Lib_MathDouble.c, 832 :: 		
0x13F0	0xE8BD40FA  POP	(R1, R3, R4, R5, R6, R7, R14)
;__Lib_MathDouble.c, 834 :: 		
L_end__Div_FP:
0x13F4	0xB001    ADD	SP, SP, #4
0x13F6	0x4770    BX	LR
; end of __Div_FP
__Sub_FP:
;__Lib_MathDouble.c, 539 :: 		
0x13F8	0xB081    SUB	SP, SP, #4
;__Lib_MathDouble.c, 541 :: 		
0x13FA	0xF0824200  EOR	R2, R2, #-2147483648
;__Lib_MathDouble.c, 542 :: 		
0x13FE	0xE92D41FA  PUSH	(R1, R3, R4, R5, R6, R7, R8, R14)
;__Lib_MathDouble.c, 544 :: 		
0x1402	0xEA4F2402  LSL	R4, R2, #8
;__Lib_MathDouble.c, 545 :: 		
0x1406	0xEA4F0542  LSL	R5, R2, #1
;__Lib_MathDouble.c, 546 :: 		
0x140A	0x0E2D    LSRS	R5, R5, #24
;__Lib_MathDouble.c, 547 :: 		
0x140C	0xD104    BNE	__me_lab1
;__Lib_MathDouble.c, 549 :: 		
0x140E	0x2C00    CMP	R4, #0
;__Lib_MathDouble.c, 550 :: 		
0x1410	0xBF18    IT	NE
;__Lib_MathDouble.c, 551 :: 		
0x1412	0xF04F0000  MOVNE	R0, #0
;__Lib_MathDouble.c, 553 :: 		
0x1416	0xE06C    B	__me_lab_end
;__Lib_MathDouble.c, 555 :: 		
__me_lab1:
0x1418	0xF0444400  ORR	R4, R4, #-2147483648
;__Lib_MathDouble.c, 557 :: 		
0x141C	0x2DFF    CMP	R5, #255
;__Lib_MathDouble.c, 559 :: 		
0x141E	0xD05F    BEQ	__me_ovfl1
;__Lib_MathDouble.c, 561 :: 		
0x1420	0xEA4F0494  LSR	R4, R4, #2
;__Lib_MathDouble.c, 562 :: 		
0x1424	0x2A00    CMP	R2, #0
;__Lib_MathDouble.c, 563 :: 		
0x1426	0xBF48    IT	MI
;__Lib_MathDouble.c, 564 :: 		
0x1428	0x4264    RSBMI	R4, R4, #0
;__Lib_MathDouble.c, 566 :: 		
0x142A	0xEA4F2100  LSL	R1, R0, #8
;__Lib_MathDouble.c, 567 :: 		
0x142E	0xEA4F0340  LSL	R3, R0, #1
;__Lib_MathDouble.c, 568 :: 		
0x1432	0x0E1B    LSRS	R3, R3, #24
;__Lib_MathDouble.c, 569 :: 		
0x1434	0xD105    BNE	__me_lab2
;__Lib_MathDouble.c, 571 :: 		
0x1436	0x2900    CMP	R1, #0
;__Lib_MathDouble.c, 572 :: 		
0x1438	0xBF14    ITE	NE
;__Lib_MathDouble.c, 573 :: 		
0x143A	0xF04F0000  MOVNE	R0, #0
;__Lib_MathDouble.c, 574 :: 		
0x143E	0x4610    MOVEQ	R0, R2
;__Lib_MathDouble.c, 576 :: 		
0x1440	0xE057    B	__me_lab_end
;__Lib_MathDouble.c, 578 :: 		
__me_lab2:
0x1442	0xF0414100  ORR	R1, R1, #-2147483648
;__Lib_MathDouble.c, 580 :: 		
0x1446	0x2BFF    CMP	R3, #255
;__Lib_MathDouble.c, 581 :: 		
0x1448	0xD04B    BEQ	__me_ovfl0
;__Lib_MathDouble.c, 583 :: 		
0x144A	0xEA4F0191  LSR	R1, R1, #2
;__Lib_MathDouble.c, 584 :: 		
0x144E	0x2800    CMP	R0, #0
;__Lib_MathDouble.c, 585 :: 		
0x1450	0xBF48    IT	MI
;__Lib_MathDouble.c, 586 :: 		
0x1452	0x4249    RSBMI	R1, R1, #0
;__Lib_MathDouble.c, 588 :: 		
0x1454	0x1B5E    SUBS	R6, R3, R5
;__Lib_MathDouble.c, 589 :: 		
0x1456	0xBF41    ITTTT	MI
;__Lib_MathDouble.c, 590 :: 		
0x1458	0x460F    MOVMI	R7, R1
;__Lib_MathDouble.c, 591 :: 		
0x145A	0x4621    MOVMI	R1, R4
;__Lib_MathDouble.c, 592 :: 		
0x145C	0x463C    MOVMI	R4, R7
;__Lib_MathDouble.c, 593 :: 		
0x145E	0x4276    RSBMI	R6, R6, #0
;__Lib_MathDouble.c, 594 :: 		
0x1460	0xBF48    IT	MI
;__Lib_MathDouble.c, 595 :: 		
0x1462	0x462B    MOVMI	R3, R5
;__Lib_MathDouble.c, 597 :: 		
0x1464	0x2E19    CMP	R6, #25
;__Lib_MathDouble.c, 598 :: 		
0x1466	0xBF47    ITTEE	MI
;__Lib_MathDouble.c, 599 :: 		
0x1468	0xFA44F706  ASRMI	R7, R4, R6
;__Lib_MathDouble.c, 600 :: 		
0x146C	0x19C9    ADDMI	R1, R1, R7
;__Lib_MathDouble.c, 601 :: 		
0x146E	0xF04F0800  MOVPL	R8, #0
;__Lib_MathDouble.c, 602 :: 		
0x1472	0xE003    BPL	__me_skip_sticky
;__Lib_MathDouble.c, 603 :: 		
0x1474	0xF1C6071C  RSB	R7, R6, #28
;__Lib_MathDouble.c, 604 :: 		
0x1478	0xFA04F807  LSL	R8, R4, R7
;__Lib_MathDouble.c, 606 :: 		
__me_skip_sticky:
;__Lib_MathDouble.c, 607 :: 		
0x147C	0x2900    CMP	R1, #0
;__Lib_MathDouble.c, 608 :: 		
0x147E	0xBF04    ITT	EQ
;__Lib_MathDouble.c, 609 :: 		
0x1480	0xF04F0000  MOVEQ	R0, #0
;__Lib_MathDouble.c, 611 :: 		
0x1484	0xE035    BEQ	__me_lab_end
;__Lib_MathDouble.c, 612 :: 		
0x1486	0xBF46    ITTE	MI
;__Lib_MathDouble.c, 613 :: 		
0x1488	0x4249    RSBMI	R1, R1, #0
;__Lib_MathDouble.c, 614 :: 		
0x148A	0xF04F0701  MOVMI	R7, #1
;__Lib_MathDouble.c, 615 :: 		
0x148E	0xF04F0700  MOVPL	R7, #0
;__Lib_MathDouble.c, 617 :: 		
__me_loop:
0x1492	0xF1A30301  SUB	R3, R3, #1
;__Lib_MathDouble.c, 618 :: 		
0x1496	0x0049    LSLS	R1, R1, #1
;__Lib_MathDouble.c, 619 :: 		
0x1498	0xD5FB    BPL	__me_loop
;__Lib_MathDouble.c, 621 :: 		
0x149A	0xF0110480  ANDS	R4, R1, #128
;__Lib_MathDouble.c, 622 :: 		
0x149E	0xD00D    BEQ	__me_no_round
;__Lib_MathDouble.c, 623 :: 		
0x14A0	0xF0010520  AND	R5, R1, #32
;__Lib_MathDouble.c, 624 :: 		
0x14A4	0xEA480805  ORR	R8, R8, R5, LSL #0
;__Lib_MathDouble.c, 625 :: 		
0x14A8	0x3180    ADDS	R1, #128
;__Lib_MathDouble.c, 626 :: 		
0x14AA	0xBF28    IT	CS
;__Lib_MathDouble.c, 627 :: 		
0x14AC	0x1C5B    ADDCS	R3, R3, #1
;__Lib_MathDouble.c, 628 :: 		
0x14AE	0xF0010440  AND	R4, R1, #64
;__Lib_MathDouble.c, 629 :: 		
0x14B2	0xEA580804  ORRS	R8, R8, R4, LSL #0
;__Lib_MathDouble.c, 630 :: 		
0x14B6	0xBF08    IT	EQ
;__Lib_MathDouble.c, 631 :: 		
0x14B8	0xF4217180  BICEQ	R1, R1, #256
;__Lib_MathDouble.c, 633 :: 		
__me_no_round:
;__Lib_MathDouble.c, 634 :: 		
0x14BC	0x1C9B    ADDS	R3, R3, #2
;__Lib_MathDouble.c, 635 :: 		
0x14BE	0xBFDC    ITT	LE
;__Lib_MathDouble.c, 636 :: 		
0x14C0	0xF04F0000  MOVLE	R0, #0
;__Lib_MathDouble.c, 638 :: 		
0x14C4	0xE015    BLE	__me_lab_end
;__Lib_MathDouble.c, 639 :: 		
0x14C6	0x2BFF    CMP	R3, #255
;__Lib_MathDouble.c, 640 :: 		
0x14C8	0xD20D    BCS	__me_ovfl
;__Lib_MathDouble.c, 642 :: 		
0x14CA	0xF02101FF  BIC	R1, R1, #255
;__Lib_MathDouble.c, 643 :: 		
0x14CE	0xEA4F0141  LSL	R1, R1, #1
;__Lib_MathDouble.c, 645 :: 		
0x14D2	0xEA4F2051  LSR	R0, R1, #9
;__Lib_MathDouble.c, 646 :: 		
0x14D6	0xEA4050C3  ORR	R0, R0, R3, LSL #23
;__Lib_MathDouble.c, 647 :: 		
0x14DA	0xEA4070C7  ORR	R0, R0, R7, LSL #31
;__Lib_MathDouble.c, 650 :: 		
0x14DE	0xE008    B	__me_lab_end
;__Lib_MathDouble.c, 652 :: 		
__me_ovfl1:
0x14E0	0x4610    MOV	R0, R2
;__Lib_MathDouble.c, 653 :: 		
__me_ovfl0:
0x14E2	0xEA4F77D0  LSR	R7, R0, #31
;__Lib_MathDouble.c, 654 :: 		
__me_ovfl:
0x14E6	0xEA4F77C7  LSL	R7, R7, #31
;__Lib_MathDouble.c, 655 :: 		
0x14EA	0x20FF    MOVS	R0, #255
;__Lib_MathDouble.c, 656 :: 		
0x14EC	0xEA4F50C0  LSL	R0, R0, #23
;__Lib_MathDouble.c, 657 :: 		
0x14F0	0x4338    ORRS	R0, R7
;__Lib_MathDouble.c, 658 :: 		
__me_lab_end:
;__Lib_MathDouble.c, 659 :: 		
0x14F2	0xE8BD41FA  POP	(R1, R3, R4, R5, R6, R7, R8, R14)
;__Lib_MathDouble.c, 661 :: 		
L_end__Sub_FP:
0x14F6	0xB001    ADD	SP, SP, #4
0x14F8	0x4770    BX	LR
; end of __Sub_FP
_getRSSI:
0x12B0	0xB086    SUB	SP, SP, #24
0x12B2	0xF8CDE000  STR	LR, [SP, #0]
;DriverRF4463PROMain.c, 297 :: 		ShortToStr(rssi,Value );
0x12B6	0x4819    LDR	R0, [PC, #100]
0x12B8	0x6800    LDR	R0, [R0, #0]
0x12BA	0xF7FFFBD5  BL	__FloatToSignedIntegral+0
0x12BE	0xB240    SXTB	R0, R0
0x12C0	0x4917    LDR	R1, [PC, #92]
0x12C2	0xF7FFFB97  BL	_ShortToStr+0
;DriverRF4463PROMain.c, 298 :: 		UART1_Write_Text("[ RSSI ] = ");
0x12C6	0xF10D0B04  ADD	R11, SP, #4
0x12CA	0xF10B0A0C  ADD	R10, R11, #12
0x12CE	0xF8DFC054  LDR	R12, [PC, #84]
0x12D2	0xF7FFFFAD  BL	___CC2DW+0
0x12D6	0xA801    ADD	R0, SP, #4
0x12D8	0xF000FEC4  BL	_UART1_Write_Text+0
;DriverRF4463PROMain.c, 299 :: 		UART1_Write_Text( Value );
0x12DC	0x4810    LDR	R0, [PC, #64]
0x12DE	0xF000FEC1  BL	_UART1_Write_Text+0
;DriverRF4463PROMain.c, 300 :: 		UART1_Write_Text(" dBm\r\n");
0x12E2	0x2020    MOVS	R0, #32
0x12E4	0xF88D0010  STRB	R0, [SP, #16]
0x12E8	0x2064    MOVS	R0, #100
0x12EA	0xF88D0011  STRB	R0, [SP, #17]
0x12EE	0x2042    MOVS	R0, #66
0x12F0	0xF88D0012  STRB	R0, [SP, #18]
0x12F4	0x206D    MOVS	R0, #109
0x12F6	0xF88D0013  STRB	R0, [SP, #19]
0x12FA	0x200D    MOVS	R0, #13
0x12FC	0xF88D0014  STRB	R0, [SP, #20]
0x1300	0x200A    MOVS	R0, #10
0x1302	0xF88D0015  STRB	R0, [SP, #21]
0x1306	0x2000    MOVS	R0, #0
0x1308	0xF88D0016  STRB	R0, [SP, #22]
0x130C	0xA804    ADD	R0, SP, #16
0x130E	0xF000FEA9  BL	_UART1_Write_Text+0
;DriverRF4463PROMain.c, 301 :: 		}
L_end_getRSSI:
0x1312	0xF8DDE000  LDR	LR, [SP, #0]
0x1316	0xB006    ADD	SP, SP, #24
0x1318	0x4770    BX	LR
0x131A	0xBF00    NOP
0x131C	0x01A42000  	_rssi+0
0x1320	0x01A82000  	_Value+0
0x1324	0x32030000  	?ICS?lstr34_DriverRF4463PROMain+0
; end of _getRSSI
__FloatToSignedIntegral:
;__Lib_MathDouble.c, 4 :: 		
0x0A68	0xB081    SUB	SP, SP, #4
;__Lib_MathDouble.c, 6 :: 		
0x0A6A	0xB506    PUSH	(R1, R2, R14)
;__Lib_MathDouble.c, 8 :: 		
0x0A6C	0xEA4F0240  LSL	R2, R0, #1
;__Lib_MathDouble.c, 9 :: 		
0x0A70	0xEA4F6212  LSR	R2, R2, #24
;__Lib_MathDouble.c, 11 :: 		
0x0A74	0x3A7F    SUBS	R2, #127
;__Lib_MathDouble.c, 12 :: 		
0x0A76	0xBF44    ITT	MI
;__Lib_MathDouble.c, 13 :: 		
0x0A78	0xF04F0000  MOVMI	R0, #0
;__Lib_MathDouble.c, 15 :: 		
0x0A7C	0xE011    BMI	__me_lab_end
;__Lib_MathDouble.c, 17 :: 		
0x0A7E	0xF1D2021F  RSBS	R2, R2, #31
;__Lib_MathDouble.c, 18 :: 		
0x0A82	0xD909    BLS	__me_ovfl
;__Lib_MathDouble.c, 20 :: 		
0x0A84	0xEA4F2100  LSL	R1, R0, #8
;__Lib_MathDouble.c, 21 :: 		
0x0A88	0xF0414100  ORR	R1, R1, #-2147483648
;__Lib_MathDouble.c, 23 :: 		
0x0A8C	0x40D1    LSRS	R1, R2
;__Lib_MathDouble.c, 25 :: 		
0x0A8E	0x2800    CMP	R0, #0
;__Lib_MathDouble.c, 26 :: 		
0x0A90	0xBF4C    ITE	MI
;__Lib_MathDouble.c, 27 :: 		
0x0A92	0x4248    RSBMI	R0, R1, #0
;__Lib_MathDouble.c, 28 :: 		
0x0A94	0x4608    MOVPL	R0, R1
;__Lib_MathDouble.c, 31 :: 		
0x0A96	0xE004    B	__me_lab_end
;__Lib_MathDouble.c, 33 :: 		
__me_ovfl:
0x0A98	0x2800    CMP	R0, #0
;__Lib_MathDouble.c, 34 :: 		
0x0A9A	0xF04F4000  MOV	R0, #-2147483648
;__Lib_MathDouble.c, 35 :: 		
0x0A9E	0xBF58    IT	PL
;__Lib_MathDouble.c, 36 :: 		
0x0AA0	0x1E40    SUBPL	R0, R0, #1
;__Lib_MathDouble.c, 37 :: 		
__me_lab_end:
;__Lib_MathDouble.c, 38 :: 		
0x0AA2	0xE8BD4006  POP	(R1, R2, R14)
;__Lib_MathDouble.c, 40 :: 		
L_end__FloatToSignedIntegral:
0x0AA6	0xB001    ADD	SP, SP, #4
0x0AA8	0x4770    BX	LR
; end of __FloatToSignedIntegral
_ShortToStr:
;__Lib_Conversions.c, 147 :: 		
; output start address is: 4 (R1)
; input start address is: 0 (R0)
0x09F4	0xB081    SUB	SP, SP, #4
0x09F6	0xF8CDE000  STR	LR, [SP, #0]
0x09FA	0x460E    MOV	R6, R1
; output end address is: 4 (R1)
; input end address is: 0 (R0)
; input start address is: 0 (R0)
; output start address is: 24 (R6)
;__Lib_Conversions.c, 152 :: 		
; negative start address is: 4 (R1)
0x09FC	0x2100    MOVS	R1, #0
;__Lib_Conversions.c, 153 :: 		
0x09FE	0xB242    SXTB	R2, R0
0x0A00	0xB292    UXTH	R2, R2
; inbyte start address is: 12 (R3)
0x0A02	0xB293    UXTH	R3, R2
;__Lib_Conversions.c, 154 :: 		
0x0A04	0x2800    CMP	R0, #0
0x0A06	0xDA05    BGE	L__ShortToStr414
; inbyte end address is: 12 (R3)
;__Lib_Conversions.c, 155 :: 		
0x0A08	0x1C49    ADDS	R1, R1, #1
0x0A0A	0xB289    UXTH	R1, R1
;__Lib_Conversions.c, 156 :: 		
0x0A0C	0x4240    RSBS	R0, R0, #0
0x0A0E	0xB280    UXTH	R0, R0
; input end address is: 0 (R0)
; inbyte start address is: 0 (R0)
; negative end address is: 4 (R1)
; inbyte end address is: 0 (R0)
0x0A10	0xB28F    UXTH	R7, R1
;__Lib_Conversions.c, 157 :: 		
0x0A12	0xE001    B	L_ShortToStr22
L__ShortToStr414:
;__Lib_Conversions.c, 154 :: 		
0x0A14	0xB298    UXTH	R0, R3
0x0A16	0xB28F    UXTH	R7, R1
;__Lib_Conversions.c, 157 :: 		
L_ShortToStr22:
;__Lib_Conversions.c, 158 :: 		
; inbyte start address is: 0 (R0)
; negative start address is: 28 (R7)
0x0A18	0x4631    MOV	R1, R6
0x0A1A	0xB2C0    UXTB	R0, R0
; inbyte end address is: 0 (R0)
0x0A1C	0xF7FFFE6C  BL	_ByteToStr+0
;__Lib_Conversions.c, 160 :: 		
; i start address is: 4 (R1)
0x0A20	0x2104    MOVS	R1, #4
; output end address is: 24 (R6)
; negative end address is: 28 (R7)
; i end address is: 4 (R1)
0x0A22	0x4634    MOV	R4, R6
0x0A24	0xB2B8    UXTH	R0, R7
;__Lib_Conversions.c, 161 :: 		
L_ShortToStr23:
; i start address is: 4 (R1)
; negative start address is: 0 (R0)
; output start address is: 16 (R4)
0x0A26	0x2900    CMP	R1, #0
0x0A28	0xD908    BLS	L_ShortToStr24
;__Lib_Conversions.c, 162 :: 		
0x0A2A	0x1863    ADDS	R3, R4, R1
0x0A2C	0x1E4A    SUBS	R2, R1, #1
0x0A2E	0xB292    UXTH	R2, R2
0x0A30	0x18A2    ADDS	R2, R4, R2
0x0A32	0x7812    LDRB	R2, [R2, #0]
0x0A34	0x701A    STRB	R2, [R3, #0]
;__Lib_Conversions.c, 163 :: 		
0x0A36	0x1E49    SUBS	R1, R1, #1
0x0A38	0xB289    UXTH	R1, R1
;__Lib_Conversions.c, 164 :: 		
; i end address is: 4 (R1)
0x0A3A	0xE7F4    B	L_ShortToStr23
L_ShortToStr24:
;__Lib_Conversions.c, 165 :: 		
0x0A3C	0x2220    MOVS	R2, #32
0x0A3E	0x7022    STRB	R2, [R4, #0]
;__Lib_Conversions.c, 166 :: 		
0x0A40	0xB170    CBZ	R0, L_ShortToStr25
; negative end address is: 0 (R0)
;__Lib_Conversions.c, 167 :: 		
; i start address is: 0 (R0)
0x0A42	0x2000    MOVS	R0, #0
; output end address is: 16 (R4)
; i end address is: 0 (R0)
0x0A44	0xB281    UXTH	R1, R0
0x0A46	0x4620    MOV	R0, R4
;__Lib_Conversions.c, 168 :: 		
L_ShortToStr26:
; i start address is: 4 (R1)
; output start address is: 0 (R0)
0x0A48	0x1842    ADDS	R2, R0, R1
0x0A4A	0x7812    LDRB	R2, [R2, #0]
0x0A4C	0x2A20    CMP	R2, #32
0x0A4E	0xD102    BNE	L_ShortToStr27
;__Lib_Conversions.c, 169 :: 		
0x0A50	0x1C49    ADDS	R1, R1, #1
0x0A52	0xB289    UXTH	R1, R1
0x0A54	0xE7F8    B	L_ShortToStr26
L_ShortToStr27:
;__Lib_Conversions.c, 170 :: 		
0x0A56	0x1E4A    SUBS	R2, R1, #1
0x0A58	0xB292    UXTH	R2, R2
; i end address is: 4 (R1)
;__Lib_Conversions.c, 171 :: 		
0x0A5A	0x1883    ADDS	R3, R0, R2
; output end address is: 0 (R0)
0x0A5C	0x222D    MOVS	R2, #45
0x0A5E	0x701A    STRB	R2, [R3, #0]
;__Lib_Conversions.c, 172 :: 		
L_ShortToStr25:
;__Lib_Conversions.c, 173 :: 		
L_end_ShortToStr:
0x0A60	0xF8DDE000  LDR	LR, [SP, #0]
0x0A64	0xB001    ADD	SP, SP, #4
0x0A66	0x4770    BX	LR
; end of _ShortToStr
_ByteToStr:
;__Lib_Conversions.c, 82 :: 		
; output start address is: 4 (R1)
; input start address is: 0 (R0)
0x06F8	0xB081    SUB	SP, SP, #4
0x06FA	0x460A    MOV	R2, R1
; output end address is: 4 (R1)
; input end address is: 0 (R0)
; input start address is: 0 (R0)
; output start address is: 8 (R2)
;__Lib_Conversions.c, 85 :: 		
; DigitPos start address is: 4 (R1)
0x06FC	0x2100    MOVS	R1, #0
; input end address is: 0 (R0)
; output end address is: 8 (R2)
; DigitPos end address is: 4 (R1)
0x06FE	0xB2C5    UXTB	R5, R0
0x0700	0x4610    MOV	R0, R2
L_ByteToStr0:
; DigitPos start address is: 4 (R1)
; output start address is: 0 (R0)
; input start address is: 20 (R5)
0x0702	0x2903    CMP	R1, #3
0x0704	0xD205    BCS	L_ByteToStr1
;__Lib_Conversions.c, 86 :: 		
0x0706	0x1843    ADDS	R3, R0, R1
0x0708	0x2220    MOVS	R2, #32
0x070A	0x701A    STRB	R2, [R3, #0]
;__Lib_Conversions.c, 85 :: 		
0x070C	0x1C49    ADDS	R1, R1, #1
0x070E	0xB2C9    UXTB	R1, R1
;__Lib_Conversions.c, 86 :: 		
0x0710	0xE7F7    B	L_ByteToStr0
L_ByteToStr1:
;__Lib_Conversions.c, 88 :: 		
0x0712	0x1843    ADDS	R3, R0, R1
0x0714	0x2200    MOVS	R2, #0
0x0716	0x701A    STRB	R2, [R3, #0]
0x0718	0x1E49    SUBS	R1, R1, #1
0x071A	0xB2C9    UXTB	R1, R1
; output end address is: 0 (R0)
; DigitPos end address is: 4 (R1)
;__Lib_Conversions.c, 90 :: 		
L_ByteToStr3:
;__Lib_Conversions.c, 91 :: 		
; DigitPos start address is: 4 (R1)
; input start address is: 20 (R5)
; output start address is: 0 (R0)
0x071C	0x1844    ADDS	R4, R0, R1
0x071E	0x230A    MOVS	R3, #10
0x0720	0xFBB5F2F3  UDIV	R2, R5, R3
0x0724	0xFB035212  MLS	R2, R3, R2, R5
0x0728	0xB2D2    UXTB	R2, R2
0x072A	0x3230    ADDS	R2, #48
0x072C	0x7022    STRB	R2, [R4, #0]
;__Lib_Conversions.c, 92 :: 		
0x072E	0x220A    MOVS	R2, #10
0x0730	0xFBB5F2F2  UDIV	R2, R5, R2
0x0734	0xB2D2    UXTB	R2, R2
0x0736	0xB2D5    UXTB	R5, R2
; input end address is: 20 (R5)
;__Lib_Conversions.c, 93 :: 		
0x0738	0xB902    CBNZ	R2, L_ByteToStr5
; output end address is: 0 (R0)
; input end address is: 20 (R5)
; DigitPos end address is: 4 (R1)
;__Lib_Conversions.c, 94 :: 		
0x073A	0xE002    B	L_ByteToStr4
L_ByteToStr5:
;__Lib_Conversions.c, 95 :: 		
; DigitPos start address is: 4 (R1)
; input start address is: 20 (R5)
; output start address is: 0 (R0)
0x073C	0x1E49    SUBS	R1, R1, #1
0x073E	0xB2C9    UXTB	R1, R1
;__Lib_Conversions.c, 96 :: 		
; output end address is: 0 (R0)
; input end address is: 20 (R5)
; DigitPos end address is: 4 (R1)
0x0740	0xE7EC    B	L_ByteToStr3
L_ByteToStr4:
;__Lib_Conversions.c, 97 :: 		
L_end_ByteToStr:
0x0742	0xB001    ADD	SP, SP, #4
0x0744	0x4770    BX	LR
; end of _ByteToStr
__Lib_System_105_107_InitialSetUpRCCRCC2:
;__Lib_System_105_107.c, 391 :: 		
0x22CC	0xB081    SUB	SP, SP, #4
0x22CE	0xF8CDE000  STR	LR, [SP, #0]
;__Lib_System_105_107.c, 395 :: 		
; ulRCC_CR start address is: 8 (R2)
0x22D2	0x4A4A    LDR	R2, [PC, #296]
;__Lib_System_105_107.c, 396 :: 		
; ulRCC_CFGR start address is: 12 (R3)
0x22D4	0x4B4A    LDR	R3, [PC, #296]
;__Lib_System_105_107.c, 397 :: 		
; ulRCC_CFGR2 start address is: 16 (R4)
0x22D6	0x4C4B    LDR	R4, [PC, #300]
;__Lib_System_105_107.c, 398 :: 		
; Fosc_kHz start address is: 20 (R5)
0x22D8	0x4D4B    LDR	R5, [PC, #300]
;__Lib_System_105_107.c, 407 :: 		
0x22DA	0xF00300F0  AND	R0, R3, #240
;__Lib_System_105_107.c, 408 :: 		
0x22DE	0x0901    LSRS	R1, R0, #4
;__Lib_System_105_107.c, 409 :: 		
0x22E0	0x484A    LDR	R0, [PC, #296]
0x22E2	0x1840    ADDS	R0, R0, R1
0x22E4	0x7800    LDRB	R0, [R0, #0]
; presc start address is: 0 (R0)
;__Lib_System_105_107.c, 411 :: 		
0x22E6	0xFA05F100  LSL	R1, R5, R0
; Fosc_kHz end address is: 20 (R5)
; presc end address is: 0 (R0)
; SYS_clk start address is: 20 (R5)
0x22EA	0x460D    MOV	R5, R1
;__Lib_System_105_107.c, 413 :: 		
0x22EC	0xF64B3080  MOVW	R0, #48000
0x22F0	0x4281    CMP	R1, R0
0x22F2	0xD906    BLS	L___Lib_System_105_107_InitialSetUpRCCRCC234
; SYS_clk end address is: 20 (R5)
;__Lib_System_105_107.c, 414 :: 		
0x22F4	0x4846    LDR	R0, [PC, #280]
0x22F6	0x6800    LDR	R0, [R0, #0]
0x22F8	0xF0400102  ORR	R1, R0, #2
0x22FC	0x4844    LDR	R0, [PC, #272]
0x22FE	0x6001    STR	R1, [R0, #0]
0x2300	0xE011    B	L___Lib_System_105_107_InitialSetUpRCCRCC235
L___Lib_System_105_107_InitialSetUpRCCRCC234:
;__Lib_System_105_107.c, 415 :: 		
; SYS_clk start address is: 20 (R5)
0x2302	0xF64550C0  MOVW	R0, #24000
0x2306	0x4285    CMP	R5, R0
0x2308	0xD906    BLS	L___Lib_System_105_107_InitialSetUpRCCRCC236
; SYS_clk end address is: 20 (R5)
;__Lib_System_105_107.c, 416 :: 		
0x230A	0x4841    LDR	R0, [PC, #260]
0x230C	0x6800    LDR	R0, [R0, #0]
0x230E	0xF0400101  ORR	R1, R0, #1
0x2312	0x483F    LDR	R0, [PC, #252]
0x2314	0x6001    STR	R1, [R0, #0]
0x2316	0xE006    B	L___Lib_System_105_107_InitialSetUpRCCRCC237
L___Lib_System_105_107_InitialSetUpRCCRCC236:
;__Lib_System_105_107.c, 418 :: 		
0x2318	0x483D    LDR	R0, [PC, #244]
0x231A	0x6801    LDR	R1, [R0, #0]
0x231C	0xF06F0007  MVN	R0, #7
0x2320	0x4001    ANDS	R1, R0
0x2322	0x483B    LDR	R0, [PC, #236]
0x2324	0x6001    STR	R1, [R0, #0]
L___Lib_System_105_107_InitialSetUpRCCRCC237:
L___Lib_System_105_107_InitialSetUpRCCRCC235:
;__Lib_System_105_107.c, 420 :: 		
0x2326	0xF7FEFF8D  BL	__Lib_System_105_107_SystemClockSetDefault+0
;__Lib_System_105_107.c, 422 :: 		
0x232A	0x483A    LDR	R0, [PC, #232]
0x232C	0x6003    STR	R3, [R0, #0]
;__Lib_System_105_107.c, 423 :: 		
0x232E	0x483A    LDR	R0, [PC, #232]
0x2330	0x6004    STR	R4, [R0, #0]
; ulRCC_CFGR2 end address is: 16 (R4)
;__Lib_System_105_107.c, 424 :: 		
0x2332	0x483A    LDR	R0, [PC, #232]
0x2334	0xEA020100  AND	R1, R2, R0, LSL #0
0x2338	0x4839    LDR	R0, [PC, #228]
0x233A	0x6001    STR	R1, [R0, #0]
;__Lib_System_105_107.c, 426 :: 		
0x233C	0xF0020001  AND	R0, R2, #1
0x2340	0xB140    CBZ	R0, L___Lib_System_105_107_InitialSetUpRCCRCC255
; ulRCC_CFGR end address is: 12 (R3)
; ulRCC_CR end address is: 8 (R2)
0x2342	0x4619    MOV	R1, R3
;__Lib_System_105_107.c, 427 :: 		
L___Lib_System_105_107_InitialSetUpRCCRCC239:
; ulRCC_CFGR start address is: 4 (R1)
; ulRCC_CR start address is: 8 (R2)
0x2344	0x4836    LDR	R0, [PC, #216]
0x2346	0x6800    LDR	R0, [R0, #0]
0x2348	0xF0000002  AND	R0, R0, #2
0x234C	0x2800    CMP	R0, #0
0x234E	0xD100    BNE	L___Lib_System_105_107_InitialSetUpRCCRCC240
;__Lib_System_105_107.c, 428 :: 		
0x2350	0xE7F8    B	L___Lib_System_105_107_InitialSetUpRCCRCC239
L___Lib_System_105_107_InitialSetUpRCCRCC240:
;__Lib_System_105_107.c, 429 :: 		
; ulRCC_CFGR end address is: 4 (R1)
0x2352	0xE000    B	L___Lib_System_105_107_InitialSetUpRCCRCC238
; ulRCC_CR end address is: 8 (R2)
L___Lib_System_105_107_InitialSetUpRCCRCC255:
;__Lib_System_105_107.c, 426 :: 		
0x2354	0x4619    MOV	R1, R3
;__Lib_System_105_107.c, 429 :: 		
L___Lib_System_105_107_InitialSetUpRCCRCC238:
;__Lib_System_105_107.c, 431 :: 		
; ulRCC_CFGR start address is: 4 (R1)
; ulRCC_CR start address is: 8 (R2)
0x2356	0xF4023080  AND	R0, R2, #65536
0x235A	0xB140    CBZ	R0, L___Lib_System_105_107_InitialSetUpRCCRCC256
; ulRCC_CR end address is: 8 (R2)
; ulRCC_CFGR end address is: 4 (R1)
0x235C	0x460B    MOV	R3, R1
;__Lib_System_105_107.c, 432 :: 		
L___Lib_System_105_107_InitialSetUpRCCRCC242:
; ulRCC_CR start address is: 8 (R2)
; ulRCC_CFGR start address is: 12 (R3)
0x235E	0x4830    LDR	R0, [PC, #192]
0x2360	0x6800    LDR	R0, [R0, #0]
0x2362	0xF4003000  AND	R0, R0, #131072
0x2366	0x2800    CMP	R0, #0
0x2368	0xD100    BNE	L___Lib_System_105_107_InitialSetUpRCCRCC243
;__Lib_System_105_107.c, 433 :: 		
0x236A	0xE7F8    B	L___Lib_System_105_107_InitialSetUpRCCRCC242
L___Lib_System_105_107_InitialSetUpRCCRCC243:
;__Lib_System_105_107.c, 434 :: 		
; ulRCC_CR end address is: 8 (R2)
0x236C	0xE000    B	L___Lib_System_105_107_InitialSetUpRCCRCC241
; ulRCC_CFGR end address is: 12 (R3)
L___Lib_System_105_107_InitialSetUpRCCRCC256:
;__Lib_System_105_107.c, 431 :: 		
0x236E	0x460B    MOV	R3, R1
;__Lib_System_105_107.c, 434 :: 		
L___Lib_System_105_107_InitialSetUpRCCRCC241:
;__Lib_System_105_107.c, 436 :: 		
; ulRCC_CR start address is: 8 (R2)
; ulRCC_CFGR start address is: 12 (R3)
0x2370	0xF0025080  AND	R0, R2, #268435456
0x2374	0xB168    CBZ	R0, L___Lib_System_105_107_InitialSetUpRCCRCC257
;__Lib_System_105_107.c, 437 :: 		
0x2376	0x482A    LDR	R0, [PC, #168]
0x2378	0x6800    LDR	R0, [R0, #0]
0x237A	0xF0405180  ORR	R1, R0, #268435456
0x237E	0x4828    LDR	R0, [PC, #160]
0x2380	0x6001    STR	R1, [R0, #0]
; ulRCC_CFGR end address is: 12 (R3)
; ulRCC_CR end address is: 8 (R2)
;__Lib_System_105_107.c, 438 :: 		
L___Lib_System_105_107_InitialSetUpRCCRCC245:
; ulRCC_CFGR start address is: 12 (R3)
; ulRCC_CR start address is: 8 (R2)
0x2382	0x4827    LDR	R0, [PC, #156]
0x2384	0x6800    LDR	R0, [R0, #0]
0x2386	0xF0005000  AND	R0, R0, #536870912
0x238A	0x2800    CMP	R0, #0
0x238C	0xD100    BNE	L___Lib_System_105_107_InitialSetUpRCCRCC246
;__Lib_System_105_107.c, 439 :: 		
0x238E	0xE7F8    B	L___Lib_System_105_107_InitialSetUpRCCRCC245
L___Lib_System_105_107_InitialSetUpRCCRCC246:
;__Lib_System_105_107.c, 440 :: 		
; ulRCC_CR end address is: 8 (R2)
0x2390	0xE7FF    B	L___Lib_System_105_107_InitialSetUpRCCRCC244
; ulRCC_CFGR end address is: 12 (R3)
L___Lib_System_105_107_InitialSetUpRCCRCC257:
;__Lib_System_105_107.c, 436 :: 		
;__Lib_System_105_107.c, 440 :: 		
L___Lib_System_105_107_InitialSetUpRCCRCC244:
;__Lib_System_105_107.c, 442 :: 		
; ulRCC_CFGR start address is: 12 (R3)
; ulRCC_CR start address is: 8 (R2)
0x2392	0xF0026080  AND	R0, R2, #67108864
0x2396	0xB178    CBZ	R0, L___Lib_System_105_107_InitialSetUpRCCRCC258
;__Lib_System_105_107.c, 443 :: 		
0x2398	0x4821    LDR	R0, [PC, #132]
0x239A	0x6800    LDR	R0, [R0, #0]
0x239C	0xF0406180  ORR	R1, R0, #67108864
0x23A0	0x481F    LDR	R0, [PC, #124]
0x23A2	0x6001    STR	R1, [R0, #0]
; ulRCC_CFGR end address is: 12 (R3)
; ulRCC_CR end address is: 8 (R2)
0x23A4	0x4611    MOV	R1, R2
0x23A6	0x461A    MOV	R2, R3
;__Lib_System_105_107.c, 444 :: 		
L___Lib_System_105_107_InitialSetUpRCCRCC248:
; ulRCC_CR start address is: 4 (R1)
; ulRCC_CFGR start address is: 8 (R2)
0x23A8	0x481D    LDR	R0, [PC, #116]
0x23AA	0x6800    LDR	R0, [R0, #0]
0x23AC	0xF0006000  AND	R0, R0, #134217728
0x23B0	0x2800    CMP	R0, #0
0x23B2	0xD100    BNE	L___Lib_System_105_107_InitialSetUpRCCRCC249
;__Lib_System_105_107.c, 445 :: 		
0x23B4	0xE7F8    B	L___Lib_System_105_107_InitialSetUpRCCRCC248
L___Lib_System_105_107_InitialSetUpRCCRCC249:
;__Lib_System_105_107.c, 446 :: 		
; ulRCC_CFGR end address is: 8 (R2)
0x23B6	0xE001    B	L___Lib_System_105_107_InitialSetUpRCCRCC247
; ulRCC_CR end address is: 4 (R1)
L___Lib_System_105_107_InitialSetUpRCCRCC258:
;__Lib_System_105_107.c, 442 :: 		
0x23B8	0x4611    MOV	R1, R2
0x23BA	0x461A    MOV	R2, R3
;__Lib_System_105_107.c, 446 :: 		
L___Lib_System_105_107_InitialSetUpRCCRCC247:
;__Lib_System_105_107.c, 448 :: 		
; ulRCC_CR start address is: 4 (R1)
; ulRCC_CFGR start address is: 8 (R2)
0x23BC	0xF0017080  AND	R0, R1, #16777216
; ulRCC_CR end address is: 4 (R1)
0x23C0	0xB170    CBZ	R0, L___Lib_System_105_107_InitialSetUpRCCRCC259
;__Lib_System_105_107.c, 449 :: 		
0x23C2	0x4817    LDR	R0, [PC, #92]
0x23C4	0x6800    LDR	R0, [R0, #0]
0x23C6	0xF0407180  ORR	R1, R0, #16777216
0x23CA	0x4815    LDR	R0, [PC, #84]
0x23CC	0x6001    STR	R1, [R0, #0]
; ulRCC_CFGR end address is: 8 (R2)
0x23CE	0x4611    MOV	R1, R2
;__Lib_System_105_107.c, 450 :: 		
L___Lib_System_105_107_InitialSetUpRCCRCC251:
; ulRCC_CFGR start address is: 4 (R1)
0x23D0	0x4813    LDR	R0, [PC, #76]
0x23D2	0x6800    LDR	R0, [R0, #0]
0x23D4	0xF0007000  AND	R0, R0, #33554432
0x23D8	0xB900    CBNZ	R0, L___Lib_System_105_107_InitialSetUpRCCRCC252
;__Lib_System_105_107.c, 451 :: 		
0x23DA	0xE7F9    B	L___Lib_System_105_107_InitialSetUpRCCRCC251
L___Lib_System_105_107_InitialSetUpRCCRCC252:
;__Lib_System_105_107.c, 452 :: 		
0x23DC	0x460A    MOV	R2, R1
0x23DE	0xE7FF    B	L___Lib_System_105_107_InitialSetUpRCCRCC250
; ulRCC_CFGR end address is: 4 (R1)
L___Lib_System_105_107_InitialSetUpRCCRCC259:
;__Lib_System_105_107.c, 448 :: 		
;__Lib_System_105_107.c, 452 :: 		
L___Lib_System_105_107_InitialSetUpRCCRCC250:
;__Lib_System_105_107.c, 456 :: 		
; ulRCC_CFGR start address is: 8 (R2)
; ulRCC_CFGR end address is: 8 (R2)
L___Lib_System_105_107_InitialSetUpRCCRCC253:
; ulRCC_CFGR start address is: 8 (R2)
0x23E0	0x480C    LDR	R0, [PC, #48]
0x23E2	0x6800    LDR	R0, [R0, #0]
0x23E4	0xF000010C  AND	R1, R0, #12
0x23E8	0x0090    LSLS	R0, R2, #2
0x23EA	0xF000000C  AND	R0, R0, #12
0x23EE	0x4281    CMP	R1, R0
0x23F0	0xD000    BEQ	L___Lib_System_105_107_InitialSetUpRCCRCC254
;__Lib_System_105_107.c, 457 :: 		
; ulRCC_CFGR end address is: 8 (R2)
0x23F2	0xE7F5    B	L___Lib_System_105_107_InitialSetUpRCCRCC253
L___Lib_System_105_107_InitialSetUpRCCRCC254:
;__Lib_System_105_107.c, 458 :: 		
L_end_InitialSetUpRCCRCC2:
0x23F4	0xF8DDE000  LDR	LR, [SP, #0]
0x23F8	0xB001    ADD	SP, SP, #4
0x23FA	0x4770    BX	LR
0x23FC	0x00810101  	#16842881
0x2400	0x0402001D  	#1901570
0x2404	0x00000000  	#0
0x2408	0x19400001  	#72000
0x240C	0x31E50000  	__Lib_System_105_107_APBAHBPrescTable+0
0x2410	0x20004002  	FLASH_ACR+0
0x2414	0x10044002  	RCC_CFGR+0
0x2418	0x102C4002  	RCC_CFGR2+0
0x241C	0xFFFF000F  	#1048575
0x2420	0x10004002  	RCC_CR+0
; end of __Lib_System_105_107_InitialSetUpRCCRCC2
__Lib_System_105_107_SystemClockSetDefault:
;__Lib_System_105_107.c, 360 :: 		
0x1244	0xB081    SUB	SP, SP, #4
;__Lib_System_105_107.c, 363 :: 		
0x1246	0x4815    LDR	R0, [PC, #84]
0x1248	0x6800    LDR	R0, [R0, #0]
0x124A	0xF0400101  ORR	R1, R0, #1
0x124E	0x4813    LDR	R0, [PC, #76]
0x1250	0x6001    STR	R1, [R0, #0]
;__Lib_System_105_107.c, 366 :: 		
0x1252	0x4913    LDR	R1, [PC, #76]
0x1254	0x4813    LDR	R0, [PC, #76]
0x1256	0x6001    STR	R1, [R0, #0]
;__Lib_System_105_107.c, 369 :: 		
0x1258	0x4810    LDR	R0, [PC, #64]
0x125A	0x6801    LDR	R1, [R0, #0]
0x125C	0x4812    LDR	R0, [PC, #72]
0x125E	0x4001    ANDS	R1, R0
0x1260	0x480E    LDR	R0, [PC, #56]
0x1262	0x6001    STR	R1, [R0, #0]
;__Lib_System_105_107.c, 372 :: 		
0x1264	0x480D    LDR	R0, [PC, #52]
0x1266	0x6801    LDR	R1, [R0, #0]
0x1268	0xF46F2080  MVN	R0, #262144
0x126C	0x4001    ANDS	R1, R0
0x126E	0x480B    LDR	R0, [PC, #44]
0x1270	0x6001    STR	R1, [R0, #0]
;__Lib_System_105_107.c, 375 :: 		
0x1272	0x480C    LDR	R0, [PC, #48]
0x1274	0x6801    LDR	R1, [R0, #0]
0x1276	0xF46F00FE  MVN	R0, #8323072
0x127A	0x4001    ANDS	R1, R0
0x127C	0x4809    LDR	R0, [PC, #36]
0x127E	0x6001    STR	R1, [R0, #0]
;__Lib_System_105_107.c, 378 :: 		
0x1280	0x4806    LDR	R0, [PC, #24]
0x1282	0x6801    LDR	R1, [R0, #0]
0x1284	0xF06F50A0  MVN	R0, #335544320
0x1288	0x4001    ANDS	R1, R0
0x128A	0x4804    LDR	R0, [PC, #16]
0x128C	0x6001    STR	R1, [R0, #0]
;__Lib_System_105_107.c, 381 :: 		
0x128E	0xF04F0100  MOV	R1, #0
0x1292	0x4806    LDR	R0, [PC, #24]
0x1294	0x6001    STR	R1, [R0, #0]
;__Lib_System_105_107.c, 385 :: 		
L_end_SystemClockSetDefault:
0x1296	0xB001    ADD	SP, SP, #4
0x1298	0x4770    BX	LR
0x129A	0xBF00    NOP
0x129C	0x10004002  	RCC_CR+0
0x12A0	0x0000F0FF  	#-251723776
0x12A4	0x10044002  	RCC_CFGR+0
0x12A8	0xFFFFFEF6  	#-17367041
0x12AC	0x102C4002  	RCC_CFGR2+0
; end of __Lib_System_105_107_SystemClockSetDefault
__Lib_System_105_107_InitialSetUpFosc:
;__Lib_System_105_107.c, 460 :: 		
0x276C	0xB081    SUB	SP, SP, #4
;__Lib_System_105_107.c, 461 :: 		
0x276E	0x4902    LDR	R1, [PC, #8]
0x2770	0x4802    LDR	R0, [PC, #8]
0x2772	0x6001    STR	R1, [R0, #0]
;__Lib_System_105_107.c, 462 :: 		
L_end_InitialSetUpFosc:
0x2774	0xB001    ADD	SP, SP, #4
0x2776	0x4770    BX	LR
0x2778	0x19400001  	#72000
0x277C	0x01AC2000  	___System_CLOCK_IN_KHZ+0
; end of __Lib_System_105_107_InitialSetUpFosc
___GenExcept:
;__Lib_System_105_107.c, 311 :: 		
0x2764	0xB081    SUB	SP, SP, #4
;__Lib_System_105_107.c, 312 :: 		
L___GenExcept30:
0x2766	0xE7FE    B	L___GenExcept30
;__Lib_System_105_107.c, 313 :: 		
L_end___GenExcept:
0x2768	0xB001    ADD	SP, SP, #4
0x276A	0x4770    BX	LR
; end of ___GenExcept
0x322C	0xB500    PUSH	(R14)
0x322E	0xF8DFB014  LDR	R11, [PC, #20]
0x3232	0xF8DFA014  LDR	R10, [PC, #20]
0x3236	0xF8DFC014  LDR	R12, [PC, #20]
0x323A	0xF7FDFFF9  BL	4656
0x323E	0xBD00    POP	(R15)
0x3240	0x4770    BX	LR
0x3242	0xBF00    NOP
0x3244	0x00002000  	#536870912
0x3248	0x01422000  	#536871234
0x324C	0x27800000  	#10112
0x32AC	0xB500    PUSH	(R14)
0x32AE	0xF8DFB010  LDR	R11, [PC, #16]
0x32B2	0xF8DFA010  LDR	R10, [PC, #16]
0x32B6	0xF7FDFF9D  BL	4596
0x32BA	0xBD00    POP	(R15)
0x32BC	0x4770    BX	LR
0x32BE	0xBF00    NOP
0x32C0	0x00002000  	#536870912
0x32C4	0x09D42000  	#536873428
_RFISR:
;DriverRF4463PROMain.c, 24 :: 		void RFISR() iv IVT_INT_EXTI15_10 ics ICS_AUTO{
0x2274	0xE92D0E70  PUSH	(R4, R5, R6, R9, R10, R11)
0x2278	0xB084    SUB	SP, SP, #16
0x227A	0xF8CDE000  STR	LR, [SP, #0]
;DriverRF4463PROMain.c, 25 :: 		if( EXTI_PR.B12 ){
0x227E	0x480F    LDR	R0, [PC, #60]
0x2280	0x6800    LDR	R0, [R0, #0]
0x2282	0xB1A0    CBZ	R0, L_RFISR290
;DriverRF4463PROMain.c, 26 :: 		EXTI_PR.B12 |= 1;
0x2284	0x2101    MOVS	R1, #1
0x2286	0x480D    LDR	R0, [PC, #52]
0x2288	0x6001    STR	R1, [R0, #0]
;DriverRF4463PROMain.c, 27 :: 		LED_RED = 1;
0x228A	0x2101    MOVS	R1, #1
0x228C	0xB249    SXTB	R1, R1
0x228E	0x480C    LDR	R0, [PC, #48]
0x2290	0x6001    STR	R1, [R0, #0]
;DriverRF4463PROMain.c, 28 :: 		ucRF4463IRQ = 1;
0x2292	0x2101    MOVS	R1, #1
0x2294	0x480B    LDR	R0, [PC, #44]
0x2296	0x7001    STRB	R1, [R0, #0]
;DriverRF4463PROMain.c, 29 :: 		UART1_Write_Text( "RF int\r\n" );
0x2298	0xF10D0B04  ADD	R11, SP, #4
0x229C	0xF10B0A09  ADD	R10, R11, #9
0x22A0	0xF8DFC024  LDR	R12, [PC, #36]
0x22A4	0xF7FEFFC4  BL	___CC2DW+0
0x22A8	0xA801    ADD	R0, SP, #4
0x22AA	0xF7FFFEDB  BL	_UART1_Write_Text+0
;DriverRF4463PROMain.c, 31 :: 		}
L_RFISR290:
;DriverRF4463PROMain.c, 32 :: 		}
L_end_RFISR:
0x22AE	0xF8DDE000  LDR	LR, [SP, #0]
0x22B2	0xB004    ADD	SP, SP, #16
0x22B4	0xE8BD0E70  POP	(R4, R5, R6, R9, R10, R11)
0x22B8	0x4770    BX	LR
0x22BA	0xBF00    NOP
0x22BC	0x82B04220  	EXTI_PR+0
0x22C0	0x01984222  	GPIOC_ODRbits+0
0x22C4	0x00A72000  	DriverRF4463PROMain_ucRF4463IRQ+0
0x22C8	0x320F0000  	?ICS?lstr29_DriverRF4463PROMain+0
; end of _RFISR
_Timer2_interrupt:
;DriverRF4463PROMain.c, 34 :: 		void Timer2_interrupt() iv IVT_INT_TIM2 {
;DriverRF4463PROMain.c, 35 :: 		TIM2_SR.UIF = 0;
0x21E4	0x2100    MOVS	R1, #0
0x21E6	0xB249    SXTB	R1, R1
0x21E8	0x4804    LDR	R0, [PC, #16]
0x21EA	0x6001    STR	R1, [R0, #0]
;DriverRF4463PROMain.c, 36 :: 		Flag.rf_reach_timeout = 1; //Enter your code here
0x21EC	0x2101    MOVS	R1, #1
0x21EE	0xB249    SXTB	R1, R1
0x21F0	0x4803    LDR	R0, [PC, #12]
0x21F2	0x6001    STR	R1, [R0, #0]
;DriverRF4463PROMain.c, 37 :: 		Flag.reach_1s = 1;
0x21F4	0x4803    LDR	R0, [PC, #12]
0x21F6	0x6001    STR	R1, [R0, #0]
;DriverRF4463PROMain.c, 38 :: 		}
L_end_Timer2_interrupt:
0x21F8	0x4770    BX	LR
0x21FA	0xBF00    NOP
0x21FC	0x02004200  	TIM2_SR+0
0x2200	0x2AC82200  	_Flag+0
0x2204	0x2AC02200  	_Flag+0
; end of _Timer2_interrupt
_vUARTISR:
;uarthandler.c, 78 :: 		void vUARTISR() iv IVT_INT_USART1 ics ICS_AUTO{
;uarthandler.c, 79 :: 		LED_BLUE =~ LED_BLUE;
0x2138	0x4821    LDR	R0, [PC, #132]
0x213A	0x6800    LDR	R0, [R0, #0]
0x213C	0xF0800101  EOR	R1, R0, #1
0x2140	0xB2C9    UXTB	R1, R1
0x2142	0x481F    LDR	R0, [PC, #124]
0x2144	0x6001    STR	R1, [R0, #0]
;uarthandler.c, 81 :: 		if( USART1_SRbits.RXNE == 1 ){
0x2146	0x481F    LDR	R0, [PC, #124]
0x2148	0x6800    LDR	R0, [R0, #0]
0x214A	0x2800    CMP	R0, #0
0x214C	0xD028    BEQ	L_vUARTISR180
;uarthandler.c, 82 :: 		ucTempByteUART = USART1_DR;
0x214E	0x481E    LDR	R0, [PC, #120]
0x2150	0x6801    LDR	R1, [R0, #0]
0x2152	0x481E    LDR	R0, [PC, #120]
0x2154	0x7001    STRB	R1, [R0, #0]
;uarthandler.c, 83 :: 		if( ucTempByteUART == '\n' ){
0x2156	0x7800    LDRB	R0, [R0, #0]
0x2158	0x280A    CMP	R0, #10
0x215A	0xD114    BNE	L_vUARTISR181
;uarthandler.c, 84 :: 		pcRxUARTBuffer[ usUARTMessageLength++ ] = ucTempByteUART;
0x215C	0x4B1C    LDR	R3, [PC, #112]
0x215E	0x8819    LDRH	R1, [R3, #0]
0x2160	0x481C    LDR	R0, [PC, #112]
0x2162	0x1841    ADDS	R1, R0, R1
0x2164	0x4A19    LDR	R2, [PC, #100]
0x2166	0x7810    LDRB	R0, [R2, #0]
0x2168	0x7008    STRB	R0, [R1, #0]
0x216A	0x4618    MOV	R0, R3
0x216C	0x8800    LDRH	R0, [R0, #0]
0x216E	0x1C40    ADDS	R0, R0, #1
0x2170	0x8018    STRH	R0, [R3, #0]
;uarthandler.c, 85 :: 		ucUARTDataReady = 1;
0x2172	0x2101    MOVS	R1, #1
0x2174	0x4818    LDR	R0, [PC, #96]
0x2176	0x7001    STRB	R1, [R0, #0]
;uarthandler.c, 86 :: 		ucTempByteUART = 0;
0x2178	0x2000    MOVS	R0, #0
0x217A	0x7010    STRB	R0, [R2, #0]
;uarthandler.c, 87 :: 		LED_BLUE = PIN_LEVEL_LOW;
0x217C	0x2100    MOVS	R1, #0
0x217E	0xB249    SXTB	R1, R1
0x2180	0x480F    LDR	R0, [PC, #60]
0x2182	0x6001    STR	R1, [R0, #0]
;uarthandler.c, 88 :: 		}
0x2184	0xE00C    B	L_vUARTISR182
L_vUARTISR181:
;uarthandler.c, 90 :: 		pcRxUARTBuffer[ usUARTMessageLength++ ] = ucTempByteUART;
0x2186	0x4B12    LDR	R3, [PC, #72]
0x2188	0x8819    LDRH	R1, [R3, #0]
0x218A	0x4812    LDR	R0, [PC, #72]
0x218C	0x1842    ADDS	R2, R0, R1
0x218E	0x490F    LDR	R1, [PC, #60]
0x2190	0x7808    LDRB	R0, [R1, #0]
0x2192	0x7010    STRB	R0, [R2, #0]
0x2194	0x4618    MOV	R0, R3
0x2196	0x8800    LDRH	R0, [R0, #0]
0x2198	0x1C40    ADDS	R0, R0, #1
0x219A	0x8018    STRH	R0, [R3, #0]
;uarthandler.c, 91 :: 		ucTempByteUART = 0;
0x219C	0x2000    MOVS	R0, #0
0x219E	0x7008    STRB	R0, [R1, #0]
;uarthandler.c, 92 :: 		}
L_vUARTISR182:
;uarthandler.c, 93 :: 		}
L_vUARTISR180:
;uarthandler.c, 94 :: 		if( USART1_SRbits.ORE == 1 ){
0x21A0	0x480E    LDR	R0, [PC, #56]
0x21A2	0x6800    LDR	R0, [R0, #0]
0x21A4	0xB150    CBZ	R0, L_vUARTISR183
;uarthandler.c, 96 :: 		ucTempByteUART = USART1_SR;
0x21A6	0x480E    LDR	R0, [PC, #56]
0x21A8	0x6800    LDR	R0, [R0, #0]
0x21AA	0x4908    LDR	R1, [PC, #32]
0x21AC	0x7008    STRB	R0, [R1, #0]
;uarthandler.c, 97 :: 		ucTempByteUART = USART1_DR;
0x21AE	0x4806    LDR	R0, [PC, #24]
0x21B0	0x6800    LDR	R0, [R0, #0]
0x21B2	0x7008    STRB	R0, [R1, #0]
;uarthandler.c, 98 :: 		LED_BLUE = PIN_LEVEL_LOW;
0x21B4	0x2100    MOVS	R1, #0
0x21B6	0xB249    SXTB	R1, R1
0x21B8	0x4801    LDR	R0, [PC, #4]
0x21BA	0x6001    STR	R1, [R0, #0]
;uarthandler.c, 99 :: 		}
L_vUARTISR183:
;uarthandler.c, 100 :: 		}
L_end_vUARTISR:
0x21BC	0x4770    BX	LR
0x21BE	0xBF00    NOP
0x21C0	0x01A04222  	GPIOC_ODRbits+0
0x21C4	0x00144227  	USART1_SRbits+0
0x21C8	0x38044001  	USART1_DR+0
0x21CC	0x013A2000  	_ucTempByteUART+0
0x21D0	0x01402000  	_usUARTMessageLength+0
0x21D4	0x01D42000  	_pcRxUARTBuffer+0
0x21D8	0x013B2000  	_ucUARTDataReady+0
0x21DC	0x000C4227  	USART1_SRbits+0
0x21E0	0x38004001  	USART1_SR+0
; end of _vUARTISR
_Int_SPI2:
;driverspi.c, 17 :: 		void Int_SPI2() iv IVT_INT_SPI2 ics ICS_AUTO {
;driverspi.c, 19 :: 		if ( SPI2_SRbits.RXNE ) {
0x2244	0x4807    LDR	R0, [PC, #28]
0x2246	0x6800    LDR	R0, [R0, #0]
0x2248	0xB150    CBZ	R0, L_Int_SPI20
;driverspi.c, 20 :: 		ucSPI2ByteReceived = ( unsigned char )SPI2_DR;      // lee el Byte recibido
0x224A	0x4807    LDR	R0, [PC, #28]
0x224C	0x6801    LDR	R1, [R0, #0]
0x224E	0x4807    LDR	R0, [PC, #28]
0x2250	0x7001    STRB	R1, [R0, #0]
;driverspi.c, 22 :: 		LED_GREEN = ~LED_GREEN;
0x2252	0x4807    LDR	R0, [PC, #28]
0x2254	0x6800    LDR	R0, [R0, #0]
0x2256	0xF0800101  EOR	R1, R0, #1
0x225A	0xB2C9    UXTB	R1, R1
0x225C	0x4804    LDR	R0, [PC, #16]
0x225E	0x6001    STR	R1, [R0, #0]
;driverspi.c, 24 :: 		}
L_Int_SPI20:
;driverspi.c, 25 :: 		}
L_end_Int_SPI2:
0x2260	0x4770    BX	LR
0x2262	0xBF00    NOP
0x2264	0x01004207  	SPI2_SRbits+0
0x2268	0x380C4000  	SPI2_DR+0
0x226C	0x01392000  	_ucSPI2ByteReceived+0
0x2270	0x019C4222  	GPIOC_ODRbits+0
; end of _Int_SPI2
_vRF4463ISR:
;driverrf4463pro.c, 28 :: 		void vRF4463ISR() iv IVT_INT_EXTI15_10 ics ICS_AUTO{
0x2208	0xB4F0    PUSH	(R4, R5, R6, R7)
0x220A	0xB081    SUB	SP, SP, #4
0x220C	0xF8CDE000  STR	LR, [SP, #0]
;driverrf4463pro.c, 29 :: 		if( EXTI_PR.B12 ){
0x2210	0x4809    LDR	R0, [PC, #36]
0x2212	0x6800    LDR	R0, [R0, #0]
0x2214	0xB158    CBZ	R0, L_vRF4463ISR1
;driverrf4463pro.c, 30 :: 		EXTI_PR.B12 |= 1;
0x2216	0x2101    MOVS	R1, #1
0x2218	0x4807    LDR	R0, [PC, #28]
0x221A	0x6001    STR	R1, [R0, #0]
;driverrf4463pro.c, 31 :: 		LED_RED = 1;
0x221C	0x2101    MOVS	R1, #1
0x221E	0xB249    SXTB	R1, R1
0x2220	0x4806    LDR	R0, [PC, #24]
0x2222	0x6001    STR	R1, [R0, #0]
;driverrf4463pro.c, 32 :: 		ucRF4463IRQ = 1;
0x2224	0x2101    MOVS	R1, #1
0x2226	0x4806    LDR	R0, [PC, #24]
0x2228	0x7001    STRB	R1, [R0, #0]
;driverrf4463pro.c, 33 :: 		vRF4463ClearInterrupts();
0x222A	0xF7FFF967  BL	_vRF4463ClearInterrupts+0
;driverrf4463pro.c, 34 :: 		}
L_vRF4463ISR1:
;driverrf4463pro.c, 35 :: 		}
L_end_vRF4463ISR:
0x222E	0xF8DDE000  LDR	LR, [SP, #0]
0x2232	0xB001    ADD	SP, SP, #4
0x2234	0xBCF0    POP	(R4, R5, R6, R7)
0x2236	0x4770    BX	LR
0x2238	0x82B04220  	EXTI_PR+0
0x223C	0x01984222  	GPIOC_ODRbits+0
0x2240	0x00A72000  	DriverRF4463PROMain_ucRF4463IRQ+0
; end of _vRF4463ISR
;__Lib_System_105_107.c,389 :: __Lib_System_105_107_ADCPrescTable [4]
0x108C	0x08060402 ;__Lib_System_105_107_ADCPrescTable+0
; end of __Lib_System_105_107_ADCPrescTable
;DriverRF4463PROMain.c,0 :: ?ICS?lstr6_DriverRF4463PROMain [6]
0x2780	0x43414649 ;?ICS?lstr6_DriverRF4463PROMain+0
0x2784	0x0045 ;?ICS?lstr6_DriverRF4463PROMain+4
; end of ?ICS?lstr6_DriverRF4463PROMain
;,0 :: _initBlock_2 [28]
; Containing: ?ICS?lstr7_DriverRF4463PROMain [5]
;             ?ICS?lstr8_DriverRF4463PROMain [6]
;             ?ICS?lstr9_DriverRF4463PROMain [10]
;             ?ICS?lstr10_DriverRF4463PROMain [7]
0x2786	0x444E4553 ;_initBlock_2+0 : ?ICS?lstr7_DriverRF4463PROMain at 0x2786
0x278A	0x4F4C4300 ;_initBlock_2+4 : ?ICS?lstr8_DriverRF4463PROMain at 0x278B
0x278E	0x47004553 ;_initBlock_2+8 : ?ICS?lstr9_DriverRF4463PROMain at 0x2791
0x2792	0x535F5445 ;_initBlock_2+12
0x2796	0x45474154 ;_initBlock_2+16
0x279A	0x49455200 ;_initBlock_2+20 : ?ICS?lstr10_DriverRF4463PROMain at 0x279B
0x279E	0x0054494E ;_initBlock_2+24
; end of _initBlock_2
;,0 :: _initBlock_3 [10]
; Containing: ?ICS?lstr11_DriverRF4463PROMain [5]
;             ?ICS?lstr12_DriverRF4463PROMain [5]
0x27A2	0x474E4950 ;_initBlock_3+0 : ?ICS?lstr11_DriverRF4463PROMain at 0x27A2
0x27A6	0x53455400 ;_initBlock_3+4 : ?ICS?lstr12_DriverRF4463PROMain at 0x27A7
0x27AA	0x0054 ;_initBlock_3+8
; end of _initBlock_3
;,0 :: _initBlock_4 [34]
; Containing: ?ICS?lstr13_DriverRF4463PROMain [7]
;             ?ICS?lstr14_DriverRF4463PROMain [8]
;             ?ICS?lstr15_DriverRF4463PROMain [12]
;             ?ICS?lstr16_DriverRF4463PROMain [7]
0x27AC	0x4F4D4552 ;_initBlock_4+0 : ?ICS?lstr13_DriverRF4463PROMain at 0x27AC
0x27B0	0x43004556 ;_initBlock_4+4 : ?ICS?lstr14_DriverRF4463PROMain at 0x27B3
0x27B4	0x4E4E4148 ;_initBlock_4+8
0x27B8	0x47004C45 ;_initBlock_4+12 : ?ICS?lstr15_DriverRF4463PROMain at 0x27BB
0x27BC	0x435F5445 ;_initBlock_4+16
0x27C0	0x4E4E4148 ;_initBlock_4+20
0x27C4	0x53004C45 ;_initBlock_4+24 : ?ICS?lstr16_DriverRF4463PROMain at 0x27C7
0x27C8	0x55544154 ;_initBlock_4+28
0x27CC	0x0053 ;_initBlock_4+32
; end of _initBlock_4
;,0 :: _initBlock_5 [16]
; Containing: ?ICS?lstr17_DriverRF4463PROMain [5]
;             ?ICS?lstr18_DriverRF4463PROMain [11]
0x27CE	0x4F464E49 ;_initBlock_5+0 : ?ICS?lstr17_DriverRF4463PROMain at 0x27CE
0x27D2	0x56454400 ;_initBlock_5+4 : ?ICS?lstr18_DriverRF4463PROMain at 0x27D3
0x27D6	0x49454349 ;_initBlock_5+8
0x27DA	0x004F464E ;_initBlock_5+12
; end of _initBlock_5
;,0 :: _initBlock_6 [16]
; Containing: ?ICS?lstr19_DriverRF4463PROMain [7]
;             ?ICS?lstr20_DriverRF4463PROMain [9]
0x27DE	0x52414553 ;_initBlock_6+0 : ?ICS?lstr19_DriverRF4463PROMain at 0x27DE
0x27E2	0x4F004843 ;_initBlock_6+4 : ?ICS?lstr20_DriverRF4463PROMain at 0x27E5
0x27E6	0x52524556 ;_initBlock_6+8
0x27EA	0x00454449 ;_initBlock_6+12
; end of _initBlock_6
;DriverRF4463PROMain.c,0 :: ?ICS?lstr21_DriverRF4463PROMain [10]
0x27EE	0x45534552 ;?ICS?lstr21_DriverRF4463PROMain+0
0x27F2	0x54465F54 ;?ICS?lstr21_DriverRF4463PROMain+4
0x27F6	0x0059 ;?ICS?lstr21_DriverRF4463PROMain+8
; end of ?ICS?lstr21_DriverRF4463PROMain
;DriverRF4463PROMain.c,0 :: ?ICS?lstr22_DriverRF4463PROMain [8]
0x27F8	0x5F544553 ;?ICS?lstr22_DriverRF4463PROMain+0
0x27FC	0x00595446 ;?ICS?lstr22_DriverRF4463PROMain+4
; end of ?ICS?lstr22_DriverRF4463PROMain
;,0 :: _initBlock_9 [14]
; Containing: ?ICS?lstr23_DriverRF4463PROMain [9]
;             ?ICS?lstr24_DriverRF4463PROMain [5]
0x2800	0x43534944 ;_initBlock_9+0 : ?ICS?lstr23_DriverRF4463PROMain at 0x2800
0x2804	0x5245564F ;_initBlock_9+4
0x2808	0x4E494600 ;_initBlock_9+8 : ?ICS?lstr24_DriverRF4463PROMain at 0x2809
0x280C	0x0044 ;_initBlock_9+12
; end of _initBlock_9
;,0 :: _initBlock_10 [22]
; Containing: ?ICS?lstr25_DriverRF4463PROMain [13]
;             ?ICS?lstr26_DriverRF4463PROMain [9]
0x280E	0x444E4553 ;_initBlock_10+0 : ?ICS?lstr25_DriverRF4463PROMain at 0x280E
0x2812	0x424E555F ;_initBlock_10+4
0x2816	0x4B434F4C ;_initBlock_10+8
0x281A	0x54455300 ;_initBlock_10+12 : ?ICS?lstr26_DriverRF4463PROMain at 0x281B
0x281E	0x45574F50 ;_initBlock_10+16
0x2822	0x0052 ;_initBlock_10+20
; end of _initBlock_10
;,0 :: _initBlock_11 [4]
; Containing: ?ICS?lstr27_DriverRF4463PROMain [3]
;             ?ICSDriverRF4463PROMain_ucRF4463IRQ [1]
0x2824	0x00004652 ;_initBlock_11+0 : ?ICS?lstr27_DriverRF4463PROMain at 0x2824 : ?ICSDriverRF4463PROMain_ucRF4463IRQ at 0x2827
; end of _initBlock_11
;DriverRF4463PROMain.c,0 :: ?ICS_tx_cnt [4]
0x2828	0x00000000 ;?ICS_tx_cnt+0
; end of ?ICS_tx_cnt
;DriverRF4463PROMain.c,0 :: ?ICS_RF_MODEM_MOD_TYPE_12_data [16]
0x282C	0x000C2011 ;?ICS_RF_MODEM_MOD_TYPE_12_data+0
0x2830	0x00000000 ;?ICS_RF_MODEM_MOD_TYPE_12_data+4
0x2834	0x00000000 ;?ICS_RF_MODEM_MOD_TYPE_12_data+8
0x2838	0x00000000 ;?ICS_RF_MODEM_MOD_TYPE_12_data+12
; end of ?ICS_RF_MODEM_MOD_TYPE_12_data
;DriverRF4463PROMain.c,0 :: ?ICS_RF_MODEM_TX_RAMP_DELAY_8_data [12]
0x283C	0x18082011 ;?ICS_RF_MODEM_TX_RAMP_DELAY_8_data+0
0x2840	0x00000000 ;?ICS_RF_MODEM_TX_RAMP_DELAY_8_data+4
0x2844	0x00000000 ;?ICS_RF_MODEM_TX_RAMP_DELAY_8_data+8
; end of ?ICS_RF_MODEM_TX_RAMP_DELAY_8_data
;,0 :: _initBlock_15 [28]
; Containing: ?ICS_RF_MODEM_AFC_GEAR_7_data [13]
;             ?ICS_RF_MODEM_OOK_CNT1_11_data [15]
0x2848	0x2C072011 ;_initBlock_15+0 : ?ICS_RF_MODEM_AFC_GEAR_7_data at 0x2848
0x284C	0x00000000 ;_initBlock_15+4
0x2850	0x00000000 ;_initBlock_15+8
0x2854	0x0B201100 ;_initBlock_15+12 : ?ICS_RF_MODEM_OOK_CNT1_11_data at 0x2855
0x2858	0x00000042 ;_initBlock_15+16
0x285C	0x00000000 ;_initBlock_15+20
0x2860	0x00000000 ;_initBlock_15+24
; end of _initBlock_15
;DriverRF4463PROMain.c,0 :: ?ICS_RF_MODEM_CHFLT_RX1_CHFLT_COE13_7_0_12_data [16]
0x2864	0x000C2111 ;?ICS_RF_MODEM_CHFLT_RX1_CHFLT_COE13_7_0_12_data+0
0x2868	0x00000000 ;?ICS_RF_MODEM_CHFLT_RX1_CHFLT_COE13_7_0_12_data+4
0x286C	0x00000000 ;?ICS_RF_MODEM_CHFLT_RX1_CHFLT_COE13_7_0_12_data+8
0x2870	0x00000000 ;?ICS_RF_MODEM_CHFLT_RX1_CHFLT_COE13_7_0_12_data+12
; end of ?ICS_RF_MODEM_CHFLT_RX1_CHFLT_COE13_7_0_12_data
;DriverRF4463PROMain.c,0 :: ?ICS_RF_MODEM_CHFLT_RX1_CHFLT_COE1_7_0_12_data [16]
0x2874	0x0C0C2111 ;?ICS_RF_MODEM_CHFLT_RX1_CHFLT_COE1_7_0_12_data+0
0x2878	0x00000000 ;?ICS_RF_MODEM_CHFLT_RX1_CHFLT_COE1_7_0_12_data+4
0x287C	0x00000000 ;?ICS_RF_MODEM_CHFLT_RX1_CHFLT_COE1_7_0_12_data+8
0x2880	0x00000000 ;?ICS_RF_MODEM_CHFLT_RX1_CHFLT_COE1_7_0_12_data+12
; end of ?ICS_RF_MODEM_CHFLT_RX1_CHFLT_COE1_7_0_12_data
;DriverRF4463PROMain.c,0 :: ?ICS_RF_MODEM_CHFLT_RX2_CHFLT_COE7_7_0_12_data [16]
0x2884	0x180C2111 ;?ICS_RF_MODEM_CHFLT_RX2_CHFLT_COE7_7_0_12_data+0
0x2888	0x00000000 ;?ICS_RF_MODEM_CHFLT_RX2_CHFLT_COE7_7_0_12_data+4
0x288C	0x00000000 ;?ICS_RF_MODEM_CHFLT_RX2_CHFLT_COE7_7_0_12_data+8
0x2890	0x00000000 ;?ICS_RF_MODEM_CHFLT_RX2_CHFLT_COE7_7_0_12_data+12
; end of ?ICS_RF_MODEM_CHFLT_RX2_CHFLT_COE7_7_0_12_data
;,0 :: _initBlock_19 [26]
; Containing: ?ICS_RF_MODEM_AGC_WINDOW_SIZE_9_data [13]
;             ?ICS_RF_MODEM_BCR_OSR_1_9_data [13]
0x2894	0x38092011 ;_initBlock_19+0 : ?ICS_RF_MODEM_AGC_WINDOW_SIZE_9_data at 0x2894
0x2898	0x00000000 ;_initBlock_19+4
0x289C	0x00000000 ;_initBlock_19+8
0x28A0	0x09201100 ;_initBlock_19+12 : ?ICS_RF_MODEM_BCR_OSR_1_9_data at 0x28A1
0x28A4	0x00000022 ;_initBlock_19+16
0x28A8	0x00000000 ;_initBlock_19+20
0x28AC	0x0000 ;_initBlock_19+24
; end of _initBlock_19
;,0 :: _initBlock_20 [12]
; Containing: ?ICS_RF_SYNTH_PFDCP_CPFF_7_data [11]
;             ?ICS_ucSPI2ByteReceived [1]
0x28AE	0x00072311 ;_initBlock_20+0 : ?ICS_RF_SYNTH_PFDCP_CPFF_7_data at 0x28AE
0x28B2	0x00000000 ;_initBlock_20+4
0x28B6	0x00000000 ;_initBlock_20+8 : ?ICS_ucSPI2ByteReceived at 0x28B9
; end of _initBlock_20
;,0 :: _initBlock_21 [2]
; Containing: ?ICS_ucTempByteUART [1]
;             ?ICS_ucUARTDataReady [1]
0x28BA	0x0000 ;_initBlock_21+0 : ?ICS_ucTempByteUART at 0x28BA : ?ICS_ucUARTDataReady at 0x28BB
; end of _initBlock_21
;DriverRF4463PROMain.c,0 :: ?ICS_rx_cnt [4]
0x28BC	0x00000000 ;?ICS_rx_cnt+0
; end of ?ICS_rx_cnt
;DriverRF4463PROMain.c,0 :: ?ICS_usUARTMessageLength [2]
0x28C0	0x0000 ;?ICS_usUARTMessageLength+0
; end of ?ICS_usUARTMessageLength
;DriverRF4463PROMain.c,277 :: _RF_MODEM_CHFLT_RX2_CHFLT_COE7_7_0_12_433 [132]
0x28C2	0x1705DEB8 ;_RF_MODEM_CHFLT_RX2_CHFLT_COE7_7_0_12_433+0
0x28C6	0x00030C16 ;_RF_MODEM_CHFLT_RX2_CHFLT_COE7_7_0_12_433+4
0x28CA	0x0000FF15 ;_RF_MODEM_CHFLT_RX2_CHFLT_COE7_7_0_12_433+8
0x28CE	0x1705DEB8 ;_RF_MODEM_CHFLT_RX2_CHFLT_COE7_7_0_12_433+12
0x28D2	0x00030C16 ;_RF_MODEM_CHFLT_RX2_CHFLT_COE7_7_0_12_433+16
0x28D6	0x0000FF15 ;_RF_MODEM_CHFLT_RX2_CHFLT_COE7_7_0_12_433+20
0x28DA	0x05EAC9B9 ;_RF_MODEM_CHFLT_RX2_CHFLT_COE7_7_0_12_433+24
0x28DE	0x040A1112 ;_RF_MODEM_CHFLT_RX2_CHFLT_COE7_7_0_12_433+28
0x28E2	0x0003FC15 ;_RF_MODEM_CHFLT_RX2_CHFLT_COE7_7_0_12_433+32
0x28E6	0x1705DEB8 ;_RF_MODEM_CHFLT_RX2_CHFLT_COE7_7_0_12_433+36
0x28EA	0x00030C16 ;_RF_MODEM_CHFLT_RX2_CHFLT_COE7_7_0_12_433+40
0x28EE	0x0000FF15 ;_RF_MODEM_CHFLT_RX2_CHFLT_COE7_7_0_12_433+44
0x28F2	0x05EAC9B9 ;_RF_MODEM_CHFLT_RX2_CHFLT_COE7_7_0_12_433+48
0x28F6	0x040A1112 ;_RF_MODEM_CHFLT_RX2_CHFLT_COE7_7_0_12_433+52
0x28FA	0x0003FC15 ;_RF_MODEM_CHFLT_RX2_CHFLT_COE7_7_0_12_433+56
0x28FE	0xE6D6CEDD ;_RF_MODEM_CHFLT_RX2_CHFLT_COE7_7_0_12_433+60
0x2902	0x030300F6 ;_RF_MODEM_CHFLT_RX2_CHFLT_COE7_7_0_12_433+64
0x2906	0x003FF015 ;_RF_MODEM_CHFLT_RX2_CHFLT_COE7_7_0_12_433+68
0x290A	0xDFD6DBF4 ;_RF_MODEM_CHFLT_RX2_CHFLT_COE7_7_0_12_433+72
0x290E	0x01FEF7EC ;_RF_MODEM_CHFLT_RX2_CHFLT_COE7_7_0_12_433+76
0x2912	0x03FFF015 ;_RF_MODEM_CHFLT_RX2_CHFLT_COE7_7_0_12_433+80
0x2916	0xDFD6DBF4 ;_RF_MODEM_CHFLT_RX2_CHFLT_COE7_7_0_12_433+84
0x291A	0x01FEF7EC ;_RF_MODEM_CHFLT_RX2_CHFLT_COE7_7_0_12_433+88
0x291E	0x03FFF015 ;_RF_MODEM_CHFLT_RX2_CHFLT_COE7_7_0_12_433+92
0x2922	0xDCDCEC0C ;_RF_MODEM_CHFLT_RX2_CHFLT_COE7_7_0_12_433+96
0x2926	0xFDF6EDE3 ;_RF_MODEM_CHFLT_RX2_CHFLT_COE7_7_0_12_433+100
0x292A	0x0FFFC015 ;_RF_MODEM_CHFLT_RX2_CHFLT_COE7_7_0_12_433+104
0x292E	0xF2DBC7C8 ;_RF_MODEM_CHFLT_RX2_CHFLT_COE7_7_0_12_433+108
0x2932	0x03070802 ;_RF_MODEM_CHFLT_RX2_CHFLT_COE7_7_0_12_433+112
0x2936	0x000FFC15 ;_RF_MODEM_CHFLT_RX2_CHFLT_COE7_7_0_12_433+116
0x293A	0x05EAC9B9 ;_RF_MODEM_CHFLT_RX2_CHFLT_COE7_7_0_12_433+120
0x293E	0x040A1112 ;_RF_MODEM_CHFLT_RX2_CHFLT_COE7_7_0_12_433+124
0x2942	0x0003FC15 ;_RF_MODEM_CHFLT_RX2_CHFLT_COE7_7_0_12_433+128
; end of _RF_MODEM_CHFLT_RX2_CHFLT_COE7_7_0_12_433
;DriverRF4463PROMain.c,248 :: _RF_MODEM_CHFLT_RX1_CHFLT_COE1_7_0_12_433 [132]
0x2946	0xFF150003 ;_RF_MODEM_CHFLT_RX1_CHFLT_COE1_7_0_12_433+0
0x294A	0xC4FF0000 ;_RF_MODEM_CHFLT_RX1_CHFLT_COE1_7_0_12_433+4
0x294E	0xB5F57F30 ;_RF_MODEM_CHFLT_RX1_CHFLT_COE1_7_0_12_433+8
0x2952	0xFF150003 ;_RF_MODEM_CHFLT_RX1_CHFLT_COE1_7_0_12_433+12
0x2956	0xC4FF0000 ;_RF_MODEM_CHFLT_RX1_CHFLT_COE1_7_0_12_433+16
0x295A	0xB5F57F30 ;_RF_MODEM_CHFLT_RX1_CHFLT_COE1_7_0_12_433+20
0x295E	0xFC15040A ;_RF_MODEM_CHFLT_RX1_CHFLT_COE1_7_0_12_433+24
0x2962	0xA1CC0003 ;_RF_MODEM_CHFLT_RX1_CHFLT_COE1_7_0_12_433+28
0x2966	0xD121A030 ;_RF_MODEM_CHFLT_RX1_CHFLT_COE1_7_0_12_433+32
0x296A	0xFF150003 ;_RF_MODEM_CHFLT_RX1_CHFLT_COE1_7_0_12_433+36
0x296E	0xC4FF0000 ;_RF_MODEM_CHFLT_RX1_CHFLT_COE1_7_0_12_433+40
0x2972	0xB5F57F30 ;_RF_MODEM_CHFLT_RX1_CHFLT_COE1_7_0_12_433+44
0x2976	0xFC15040A ;_RF_MODEM_CHFLT_RX1_CHFLT_COE1_7_0_12_433+48
0x297A	0xA1CC0003 ;_RF_MODEM_CHFLT_RX1_CHFLT_COE1_7_0_12_433+52
0x297E	0xD121A030 ;_RF_MODEM_CHFLT_RX1_CHFLT_COE1_7_0_12_433+56
0x2982	0xF0150303 ;_RF_MODEM_CHFLT_RX1_CHFLT_COE1_7_0_12_433+60
0x2986	0x647E003F ;_RF_MODEM_CHFLT_RX1_CHFLT_COE1_7_0_12_433+64
0x298A	0x0B58BA1B ;_RF_MODEM_CHFLT_RX1_CHFLT_COE1_7_0_12_433+68
0x298E	0xF01501FE ;_RF_MODEM_CHFLT_RX1_CHFLT_COE1_7_0_12_433+72
0x2992	0x475B03FF ;_RF_MODEM_CHFLT_RX1_CHFLT_COE1_7_0_12_433+76
0x2996	0x256DC00F ;_RF_MODEM_CHFLT_RX1_CHFLT_COE1_7_0_12_433+80
0x299A	0xF01501FE ;_RF_MODEM_CHFLT_RX1_CHFLT_COE1_7_0_12_433+84
0x299E	0x475B03FF ;_RF_MODEM_CHFLT_RX1_CHFLT_COE1_7_0_12_433+88
0x29A2	0x256DC00F ;_RF_MODEM_CHFLT_RX1_CHFLT_COE1_7_0_12_433+92
0x29A6	0xC015FDF6 ;_RF_MODEM_CHFLT_RX1_CHFLT_COE1_7_0_12_433+96
0x29AA	0x2B390FFF ;_RF_MODEM_CHFLT_RX1_CHFLT_COE1_7_0_12_433+100
0x29AE	0x3F7FC300 ;_RF_MODEM_CHFLT_RX1_CHFLT_COE1_7_0_12_433+104
0x29B2	0xFC150307 ;_RF_MODEM_CHFLT_RX1_CHFLT_COE1_7_0_12_433+108
0x29B6	0x81A2000F ;_RF_MODEM_CHFLT_RX1_CHFLT_COE1_7_0_12_433+112
0x29BA	0xEE3FAF26 ;_RF_MODEM_CHFLT_RX1_CHFLT_COE1_7_0_12_433+116
0x29BE	0xFC15040A ;_RF_MODEM_CHFLT_RX1_CHFLT_COE1_7_0_12_433+120
0x29C2	0xA1CC0003 ;_RF_MODEM_CHFLT_RX1_CHFLT_COE1_7_0_12_433+124
0x29C6	0xD121A030 ;_RF_MODEM_CHFLT_RX1_CHFLT_COE1_7_0_12_433+128
; end of _RF_MODEM_CHFLT_RX1_CHFLT_COE1_7_0_12_433
;DriverRF4463PROMain.c,291 :: _RF_MODEM_CHFLT_RX2_CHFLT_COE7_7_0_12_850 [132]
0x29CA	0x1705DEB8 ;_RF_MODEM_CHFLT_RX2_CHFLT_COE7_7_0_12_850+0
0x29CE	0x00030C16 ;_RF_MODEM_CHFLT_RX2_CHFLT_COE7_7_0_12_850+4
0x29D2	0x0000FF15 ;_RF_MODEM_CHFLT_RX2_CHFLT_COE7_7_0_12_850+8
0x29D6	0x1705DEB8 ;_RF_MODEM_CHFLT_RX2_CHFLT_COE7_7_0_12_850+12
0x29DA	0x00030C16 ;_RF_MODEM_CHFLT_RX2_CHFLT_COE7_7_0_12_850+16
0x29DE	0x0000FF15 ;_RF_MODEM_CHFLT_RX2_CHFLT_COE7_7_0_12_850+20
0x29E2	0x1E1BFCC9 ;_RF_MODEM_CHFLT_RX2_CHFLT_COE7_7_0_12_850+24
0x29E6	0xFDFC010F ;_RF_MODEM_CHFLT_RX2_CHFLT_COE7_7_0_12_850+28
0x29EA	0x0F00FF15 ;_RF_MODEM_CHFLT_RX2_CHFLT_COE7_7_0_12_850+32
0x29EE	0x1705DEB8 ;_RF_MODEM_CHFLT_RX2_CHFLT_COE7_7_0_12_850+36
0x29F2	0x00030C16 ;_RF_MODEM_CHFLT_RX2_CHFLT_COE7_7_0_12_850+40
0x29F6	0x0000FF15 ;_RF_MODEM_CHFLT_RX2_CHFLT_COE7_7_0_12_850+44
0x29FA	0x1E1BFCC9 ;_RF_MODEM_CHFLT_RX2_CHFLT_COE7_7_0_12_850+48
0x29FE	0xFDFC010F ;_RF_MODEM_CHFLT_RX2_CHFLT_COE7_7_0_12_850+52
0x2A02	0x0F00FF15 ;_RF_MODEM_CHFLT_RX2_CHFLT_COE7_7_0_12_850+56
0x2A06	0x1705DEB8 ;_RF_MODEM_CHFLT_RX2_CHFLT_COE7_7_0_12_850+60
0x2A0A	0x00030C16 ;_RF_MODEM_CHFLT_RX2_CHFLT_COE7_7_0_12_850+64
0x2A0E	0x0000FF15 ;_RF_MODEM_CHFLT_RX2_CHFLT_COE7_7_0_12_850+68
0x2A12	0xE6D6CEDD ;_RF_MODEM_CHFLT_RX2_CHFLT_COE7_7_0_12_850+72
0x2A16	0x030300F6 ;_RF_MODEM_CHFLT_RX2_CHFLT_COE7_7_0_12_850+76
0x2A1A	0x003FF015 ;_RF_MODEM_CHFLT_RX2_CHFLT_COE7_7_0_12_850+80
0x2A1E	0xF0150303 ;_RF_MODEM_CHFLT_RX2_CHFLT_COE7_7_0_12_850+84
0x2A22	0x647E003F ;_RF_MODEM_CHFLT_RX2_CHFLT_COE7_7_0_12_850+88
0x2A26	0x0B58BA1B ;_RF_MODEM_CHFLT_RX2_CHFLT_COE7_7_0_12_850+92
0x2A2A	0xDCDCEC0C ;_RF_MODEM_CHFLT_RX2_CHFLT_COE7_7_0_12_850+96
0x2A2E	0xFDF6EDE3 ;_RF_MODEM_CHFLT_RX2_CHFLT_COE7_7_0_12_850+100
0x2A32	0x0FFFC015 ;_RF_MODEM_CHFLT_RX2_CHFLT_COE7_7_0_12_850+104
0x2A36	0xF2DBC7C8 ;_RF_MODEM_CHFLT_RX2_CHFLT_COE7_7_0_12_850+108
0x2A3A	0x03070802 ;_RF_MODEM_CHFLT_RX2_CHFLT_COE7_7_0_12_850+112
0x2A3E	0x000FFC15 ;_RF_MODEM_CHFLT_RX2_CHFLT_COE7_7_0_12_850+116
0x2A42	0x05EAC9B9 ;_RF_MODEM_CHFLT_RX2_CHFLT_COE7_7_0_12_850+120
0x2A46	0x040A1112 ;_RF_MODEM_CHFLT_RX2_CHFLT_COE7_7_0_12_850+124
0x2A4A	0x0003FC15 ;_RF_MODEM_CHFLT_RX2_CHFLT_COE7_7_0_12_850+128
; end of _RF_MODEM_CHFLT_RX2_CHFLT_COE7_7_0_12_850
;DriverRF4463PROMain.c,262 :: _RF_MODEM_CHFLT_RX1_CHFLT_COE1_7_0_12_850 [132]
0x2A4E	0xFF150003 ;_RF_MODEM_CHFLT_RX1_CHFLT_COE1_7_0_12_850+0
0x2A52	0xC4FF0000 ;_RF_MODEM_CHFLT_RX1_CHFLT_COE1_7_0_12_850+4
0x2A56	0xB5F57F30 ;_RF_MODEM_CHFLT_RX1_CHFLT_COE1_7_0_12_850+8
0x2A5A	0xFF150003 ;_RF_MODEM_CHFLT_RX1_CHFLT_COE1_7_0_12_850+12
0x2A5E	0xC4FF0000 ;_RF_MODEM_CHFLT_RX1_CHFLT_COE1_7_0_12_850+16
0x2A62	0xB5F57F30 ;_RF_MODEM_CHFLT_RX1_CHFLT_COE1_7_0_12_850+20
0x2A66	0xFF15FDFC ;_RF_MODEM_CHFLT_RX1_CHFLT_COE1_7_0_12_850+24
0x2A6A	0xBAFF0F00 ;_RF_MODEM_CHFLT_RX1_CHFLT_COE1_7_0_12_850+28
0x2A6E	0xA9CF510F ;_RF_MODEM_CHFLT_RX1_CHFLT_COE1_7_0_12_850+32
0x2A72	0xFF150003 ;_RF_MODEM_CHFLT_RX1_CHFLT_COE1_7_0_12_850+36
0x2A76	0xC4FF0000 ;_RF_MODEM_CHFLT_RX1_CHFLT_COE1_7_0_12_850+40
0x2A7A	0xB5F57F30 ;_RF_MODEM_CHFLT_RX1_CHFLT_COE1_7_0_12_850+44
0x2A7E	0xFF15FDFC ;_RF_MODEM_CHFLT_RX1_CHFLT_COE1_7_0_12_850+48
0x2A82	0xBAFF0F00 ;_RF_MODEM_CHFLT_RX1_CHFLT_COE1_7_0_12_850+52
0x2A86	0xA9CF510F ;_RF_MODEM_CHFLT_RX1_CHFLT_COE1_7_0_12_850+56
0x2A8A	0xFF150003 ;_RF_MODEM_CHFLT_RX1_CHFLT_COE1_7_0_12_850+60
0x2A8E	0xC4FF0000 ;_RF_MODEM_CHFLT_RX1_CHFLT_COE1_7_0_12_850+64
0x2A92	0xB5F57F30 ;_RF_MODEM_CHFLT_RX1_CHFLT_COE1_7_0_12_850+68
0x2A96	0xF0150303 ;_RF_MODEM_CHFLT_RX1_CHFLT_COE1_7_0_12_850+72
0x2A9A	0x647E003F ;_RF_MODEM_CHFLT_RX1_CHFLT_COE1_7_0_12_850+76
0x2A9E	0x0B58BA1B ;_RF_MODEM_CHFLT_RX1_CHFLT_COE1_7_0_12_850+80
0x2AA2	0xC015FDF6 ;_RF_MODEM_CHFLT_RX1_CHFLT_COE1_7_0_12_850+84
0x2AA6	0x2B390FFF ;_RF_MODEM_CHFLT_RX1_CHFLT_COE1_7_0_12_850+88
0x2AAA	0x3F7FC300 ;_RF_MODEM_CHFLT_RX1_CHFLT_COE1_7_0_12_850+92
0x2AAE	0xFC150307 ;_RF_MODEM_CHFLT_RX1_CHFLT_COE1_7_0_12_850+96
0x2AB2	0x81A2000F ;_RF_MODEM_CHFLT_RX1_CHFLT_COE1_7_0_12_850+100
0x2AB6	0xEE3FAF26 ;_RF_MODEM_CHFLT_RX1_CHFLT_COE1_7_0_12_850+104
0x2ABA	0xFC15040A ;_RF_MODEM_CHFLT_RX1_CHFLT_COE1_7_0_12_850+108
0x2ABE	0xA1CC0003 ;_RF_MODEM_CHFLT_RX1_CHFLT_COE1_7_0_12_850+112
0x2AC2	0xD121A030 ;_RF_MODEM_CHFLT_RX1_CHFLT_COE1_7_0_12_850+116
0x2AC6	0x00000000 ;_RF_MODEM_CHFLT_RX1_CHFLT_COE1_7_0_12_850+120
0x2ACA	0x00000000 ;_RF_MODEM_CHFLT_RX1_CHFLT_COE1_7_0_12_850+124
0x2ACE	0x00000000 ;_RF_MODEM_CHFLT_RX1_CHFLT_COE1_7_0_12_850+128
; end of _RF_MODEM_CHFLT_RX1_CHFLT_COE1_7_0_12_850
;DriverRF4463PROMain.c,233 :: _RF_MODEM_CHFLT_RX1_CHFLT_COE13_7_0_12_850 [132]
0x2AD2	0x7F30C4FF ;_RF_MODEM_CHFLT_RX1_CHFLT_COE13_7_0_12_850+0
0x2AD6	0xDEB8B5F5 ;_RF_MODEM_CHFLT_RX1_CHFLT_COE13_7_0_12_850+4
0x2ADA	0x0C161705 ;_RF_MODEM_CHFLT_RX1_CHFLT_COE13_7_0_12_850+8
0x2ADE	0x7F30C4FF ;_RF_MODEM_CHFLT_RX1_CHFLT_COE13_7_0_12_850+12
0x2AE2	0xDEB8B5F5 ;_RF_MODEM_CHFLT_RX1_CHFLT_COE13_7_0_12_850+16
0x2AE6	0x0C161705 ;_RF_MODEM_CHFLT_RX1_CHFLT_COE13_7_0_12_850+20
0x2AEA	0x510FBAFF ;_RF_MODEM_CHFLT_RX1_CHFLT_COE13_7_0_12_850+24
0x2AEE	0xFCC9A9CF ;_RF_MODEM_CHFLT_RX1_CHFLT_COE13_7_0_12_850+28
0x2AF2	0x010F1E1B ;_RF_MODEM_CHFLT_RX1_CHFLT_COE13_7_0_12_850+32
0x2AF6	0x7F30C4FF ;_RF_MODEM_CHFLT_RX1_CHFLT_COE13_7_0_12_850+36
0x2AFA	0xDEB8B5F5 ;_RF_MODEM_CHFLT_RX1_CHFLT_COE13_7_0_12_850+40
0x2AFE	0x0C161705 ;_RF_MODEM_CHFLT_RX1_CHFLT_COE13_7_0_12_850+44
0x2B02	0x510FBAFF ;_RF_MODEM_CHFLT_RX1_CHFLT_COE13_7_0_12_850+48
0x2B06	0xFCC9A9CF ;_RF_MODEM_CHFLT_RX1_CHFLT_COE13_7_0_12_850+52
0x2B0A	0x010F1E1B ;_RF_MODEM_CHFLT_RX1_CHFLT_COE13_7_0_12_850+56
0x2B0E	0x7F30C4FF ;_RF_MODEM_CHFLT_RX1_CHFLT_COE13_7_0_12_850+60
0x2B12	0xDEB8B5F5 ;_RF_MODEM_CHFLT_RX1_CHFLT_COE13_7_0_12_850+64
0x2B16	0x0C161705 ;_RF_MODEM_CHFLT_RX1_CHFLT_COE13_7_0_12_850+68
0x2B1A	0xBA1B647E ;_RF_MODEM_CHFLT_RX1_CHFLT_COE13_7_0_12_850+72
0x2B1E	0xCEDD0B58 ;_RF_MODEM_CHFLT_RX1_CHFLT_COE13_7_0_12_850+76
0x2B22	0x00F6E6D6 ;_RF_MODEM_CHFLT_RX1_CHFLT_COE13_7_0_12_850+80
0x2B26	0xBA1B647E ;_RF_MODEM_CHFLT_RX1_CHFLT_COE13_7_0_12_850+84
0x2B2A	0xCEDD0B58 ;_RF_MODEM_CHFLT_RX1_CHFLT_COE13_7_0_12_850+88
0x2B2E	0x00F6E6D6 ;_RF_MODEM_CHFLT_RX1_CHFLT_COE13_7_0_12_850+92
0x2B32	0xC3002B39 ;_RF_MODEM_CHFLT_RX1_CHFLT_COE13_7_0_12_850+96
0x2B36	0xEC0C3F7F ;_RF_MODEM_CHFLT_RX1_CHFLT_COE13_7_0_12_850+100
0x2B3A	0xEDE3DCDC ;_RF_MODEM_CHFLT_RX1_CHFLT_COE13_7_0_12_850+104
0x2B3E	0xAF2681A2 ;_RF_MODEM_CHFLT_RX1_CHFLT_COE13_7_0_12_850+108
0x2B42	0xC7C8EE3F ;_RF_MODEM_CHFLT_RX1_CHFLT_COE13_7_0_12_850+112
0x2B46	0x0802F2DB ;_RF_MODEM_CHFLT_RX1_CHFLT_COE13_7_0_12_850+116
0x2B4A	0xA030A1CC ;_RF_MODEM_CHFLT_RX1_CHFLT_COE13_7_0_12_850+120
0x2B4E	0xC9B9D121 ;_RF_MODEM_CHFLT_RX1_CHFLT_COE13_7_0_12_850+124
0x2B52	0x111205EA ;_RF_MODEM_CHFLT_RX1_CHFLT_COE13_7_0_12_850+128
; end of _RF_MODEM_CHFLT_RX1_CHFLT_COE13_7_0_12_850
;DriverRF4463PROMain.c,56 :: _RF_MODEM_MOD_TYPE_12 [132]
0x2B56	0x00070003 ;_RF_MODEM_MOD_TYPE_12+0
0x2B5A	0x2D04C012 ;_RF_MODEM_MOD_TYPE_12+4
0x2B5E	0x0000C0C6 ;_RF_MODEM_MOD_TYPE_12+8
0x2B62	0x00070003 ;_RF_MODEM_MOD_TYPE_12+12
0x2B66	0x2D048025 ;_RF_MODEM_MOD_TYPE_12+16
0x2B6A	0x0000C0C6 ;_RF_MODEM_MOD_TYPE_12+20
0x2B6E	0x00070003 ;_RF_MODEM_MOD_TYPE_12+24
0x2B72	0x2D04004B ;_RF_MODEM_MOD_TYPE_12+28
0x2B76	0x0000C0C6 ;_RF_MODEM_MOD_TYPE_12+32
0x2B7A	0x00070003 ;_RF_MODEM_MOD_TYPE_12+36
0x2B7E	0x2D040096 ;_RF_MODEM_MOD_TYPE_12+40
0x2B82	0x0000C0C6 ;_RF_MODEM_MOD_TYPE_12+44
0x2B86	0x01070003 ;_RF_MODEM_MOD_TYPE_12+48
0x2B8A	0x2D04002C ;_RF_MODEM_MOD_TYPE_12+52
0x2B8E	0x0100C0C6 ;_RF_MODEM_MOD_TYPE_12+56
0x2B92	0x01070003 ;_RF_MODEM_MOD_TYPE_12+60
0x2B96	0x2D08002C ;_RF_MODEM_MOD_TYPE_12+64
0x2B9A	0x0100C0C6 ;_RF_MODEM_MOD_TYPE_12+68
0x2B9E	0x02070003 ;_RF_MODEM_MOD_TYPE_12+72
0x2BA2	0x2D080058 ;_RF_MODEM_MOD_TYPE_12+76
0x2BA6	0x0100C0C6 ;_RF_MODEM_MOD_TYPE_12+80
0x2BAA	0x03070003 ;_RF_MODEM_MOD_TYPE_12+84
0x2BAE	0x2D080084 ;_RF_MODEM_MOD_TYPE_12+88
0x2BB2	0x0100C0C6 ;_RF_MODEM_MOD_TYPE_12+92
0x2BB6	0x27070003 ;_RF_MODEM_MOD_TYPE_12+96
0x2BBA	0xC9010010 ;_RF_MODEM_MOD_TYPE_12+100
0x2BBE	0x010080C3 ;_RF_MODEM_MOD_TYPE_12+104
0x2BC2	0x4C070003 ;_RF_MODEM_MOD_TYPE_12+108
0x2BC6	0xC901404B ;_RF_MODEM_MOD_TYPE_12+112
0x2BCA	0x1B0080C3 ;_RF_MODEM_MOD_TYPE_12+116
0x2BCE	0x00070003 ;_RF_MODEM_MOD_TYPE_12+120
0x2BD2	0x2D04D007 ;_RF_MODEM_MOD_TYPE_12+124
0x2BD6	0x0000C0C6 ;_RF_MODEM_MOD_TYPE_12+128
; end of _RF_MODEM_MOD_TYPE_12
;DriverRF4463PROMain.c,219 :: _RF_MODEM_CHFLT_RX1_CHFLT_COE13_7_0_12_433 [132]
0x2BDA	0x7F30C4FF ;_RF_MODEM_CHFLT_RX1_CHFLT_COE13_7_0_12_433+0
0x2BDE	0xDEB8B5F5 ;_RF_MODEM_CHFLT_RX1_CHFLT_COE13_7_0_12_433+4
0x2BE2	0x0C161705 ;_RF_MODEM_CHFLT_RX1_CHFLT_COE13_7_0_12_433+8
0x2BE6	0x7F30C4FF ;_RF_MODEM_CHFLT_RX1_CHFLT_COE13_7_0_12_433+12
0x2BEA	0xDEB8B5F5 ;_RF_MODEM_CHFLT_RX1_CHFLT_COE13_7_0_12_433+16
0x2BEE	0x0C161705 ;_RF_MODEM_CHFLT_RX1_CHFLT_COE13_7_0_12_433+20
0x2BF2	0xA030A1CC ;_RF_MODEM_CHFLT_RX1_CHFLT_COE13_7_0_12_433+24
0x2BF6	0xC9B9D121 ;_RF_MODEM_CHFLT_RX1_CHFLT_COE13_7_0_12_433+28
0x2BFA	0x111205EA ;_RF_MODEM_CHFLT_RX1_CHFLT_COE13_7_0_12_433+32
0x2BFE	0x7F30C4FF ;_RF_MODEM_CHFLT_RX1_CHFLT_COE13_7_0_12_433+36
0x2C02	0xDEB8B5F5 ;_RF_MODEM_CHFLT_RX1_CHFLT_COE13_7_0_12_433+40
0x2C06	0x0C161705 ;_RF_MODEM_CHFLT_RX1_CHFLT_COE13_7_0_12_433+44
0x2C0A	0xA030A1CC ;_RF_MODEM_CHFLT_RX1_CHFLT_COE13_7_0_12_433+48
0x2C0E	0xC9B9D121 ;_RF_MODEM_CHFLT_RX1_CHFLT_COE13_7_0_12_433+52
0x2C12	0x111205EA ;_RF_MODEM_CHFLT_RX1_CHFLT_COE13_7_0_12_433+56
0x2C16	0xBA1B647E ;_RF_MODEM_CHFLT_RX1_CHFLT_COE13_7_0_12_433+60
0x2C1A	0xCEDD0B58 ;_RF_MODEM_CHFLT_RX1_CHFLT_COE13_7_0_12_433+64
0x2C1E	0x00F6E6D6 ;_RF_MODEM_CHFLT_RX1_CHFLT_COE13_7_0_12_433+68
0x2C22	0xC00F475B ;_RF_MODEM_CHFLT_RX1_CHFLT_COE13_7_0_12_433+72
0x2C26	0xDBF4256D ;_RF_MODEM_CHFLT_RX1_CHFLT_COE13_7_0_12_433+76
0x2C2A	0xF7ECDFD6 ;_RF_MODEM_CHFLT_RX1_CHFLT_COE13_7_0_12_433+80
0x2C2E	0xC00F475B ;_RF_MODEM_CHFLT_RX1_CHFLT_COE13_7_0_12_433+84
0x2C32	0xDBF4256D ;_RF_MODEM_CHFLT_RX1_CHFLT_COE13_7_0_12_433+88
0x2C36	0xF7ECDFD6 ;_RF_MODEM_CHFLT_RX1_CHFLT_COE13_7_0_12_433+92
0x2C3A	0xC3002B39 ;_RF_MODEM_CHFLT_RX1_CHFLT_COE13_7_0_12_433+96
0x2C3E	0xEC0C3F7F ;_RF_MODEM_CHFLT_RX1_CHFLT_COE13_7_0_12_433+100
0x2C42	0xEDE3DCDC ;_RF_MODEM_CHFLT_RX1_CHFLT_COE13_7_0_12_433+104
0x2C46	0xAF2681A2 ;_RF_MODEM_CHFLT_RX1_CHFLT_COE13_7_0_12_433+108
0x2C4A	0xC7C8EE3F ;_RF_MODEM_CHFLT_RX1_CHFLT_COE13_7_0_12_433+112
0x2C4E	0x0802F2DB ;_RF_MODEM_CHFLT_RX1_CHFLT_COE13_7_0_12_433+116
0x2C52	0xA030A1CC ;_RF_MODEM_CHFLT_RX1_CHFLT_COE13_7_0_12_433+120
0x2C56	0xC9B9D121 ;_RF_MODEM_CHFLT_RX1_CHFLT_COE13_7_0_12_433+124
0x2C5A	0x111205EA ;_RF_MODEM_CHFLT_RX1_CHFLT_COE13_7_0_12_433+128
; end of _RF_MODEM_CHFLT_RX1_CHFLT_COE13_7_0_12_433
;,0 :: _initBlock_31 [242]
; Containing: RF_MODEM_OOK_CNT1_11_850 [121]
;             RF_MODEM_OOK_CNT1_11_433 [121]
0x2C5E	0x81D602A4 ;_initBlock_31+0 : RF_MODEM_OOK_CNT1_11_850 at 0x2C5E
0x2C62	0x80019B03 ;_initBlock_31+4
0x2C66	0xA4020CFF ;_initBlock_31+8
0x2C6A	0x0083D602 ;_initBlock_31+12
0x2C6E	0xFF8001E7 ;_initBlock_31+16
0x2C72	0x02A4020C ;_initBlock_31+20
0x2C76	0xE70083D6 ;_initBlock_31+24
0x2C7A	0x0CFF8001 ;_initBlock_31+28
0x2C7E	0xD603A402 ;_initBlock_31+32
0x2C82	0x01110103 ;_initBlock_31+36
0x2C86	0x020CFF80 ;_initBlock_31+40
0x2C8A	0x03D603A4 ;_initBlock_31+44
0x2C8E	0x80015501 ;_initBlock_31+48
0x2C92	0xA4020CFF ;_initBlock_31+52
0x2C96	0x0103D603 ;_initBlock_31+56
0x2C9A	0xFF800100 ;_initBlock_31+60
0x2C9E	0x03A4020C ;_initBlock_31+64
0x2CA2	0x800003D6 ;_initBlock_31+68
0x2CA6	0x0CFF8001 ;_initBlock_31+72
0x2CAA	0xD603A402 ;_initBlock_31+76
0x2CAE	0x01800003 ;_initBlock_31+80
0x2CB2	0x020CFF80 ;_initBlock_31+84
0x2CB6	0x03D603A4 ;_initBlock_31+88
0x2CBA	0x8001D500 ;_initBlock_31+92
0x2CBE	0xA4020CFF ;_initBlock_31+96
0x2CC2	0x0003D603 ;_initBlock_31+100
0x2CC6	0xFF8001D5 ;_initBlock_31+104
0x2CCA	0x02A4020C ;_initBlock_31+108
0x2CCE	0xB40281D6 ;_initBlock_31+112
0x2CD2	0x0CFF8001 ;_initBlock_31+116
0x2CD6	0xD602A402 ;_initBlock_31+120 : RF_MODEM_OOK_CNT1_11_433 at 0x2CD7
0x2CDA	0x01AD0083 ;_initBlock_31+124
0x2CDE	0x000CFF80 ;_initBlock_31+128
0x2CE2	0x83D602A4 ;_initBlock_31+132
0x2CE6	0x8001AD00 ;_initBlock_31+136
0x2CEA	0xA4000CFF ;_initBlock_31+140
0x2CEE	0x0003D603 ;_initBlock_31+144
0x2CF2	0xFF8001CC ;_initBlock_31+148
0x2CF6	0x03A4000C ;_initBlock_31+152
0x2CFA	0xCC0003D6 ;_initBlock_31+156
0x2CFE	0x0CFF8001 ;_initBlock_31+160
0x2D02	0xD603A400 ;_initBlock_31+164
0x2D06	0x01000103 ;_initBlock_31+168
0x2D0A	0x000CFF80 ;_initBlock_31+172
0x2D0E	0x03D603A4 ;_initBlock_31+176
0x2D12	0x80018000 ;_initBlock_31+180
0x2D16	0xA4000CFF ;_initBlock_31+184
0x2D1A	0x0003D603 ;_initBlock_31+188
0x2D1E	0xFF800140 ;_initBlock_31+192
0x2D22	0x03A4000C ;_initBlock_31+196
0x2D26	0x2B0003D6 ;_initBlock_31+200
0x2D2A	0x0CFF8001 ;_initBlock_31+204
0x2D2E	0xD603A400 ;_initBlock_31+208
0x2D32	0x01D50003 ;_initBlock_31+212
0x2D36	0x000CFF80 ;_initBlock_31+216
0x2D3A	0x03D603A4 ;_initBlock_31+220
0x2D3E	0x8001D500 ;_initBlock_31+224
0x2D42	0xA4000CFF ;_initBlock_31+228
0x2D46	0x0281D602 ;_initBlock_31+232
0x2D4A	0xFF8001B4 ;_initBlock_31+236
0x2D4E	0x000C ;_initBlock_31+240
; end of _initBlock_31
;__Lib_GPIO_32F10x_Defs.c,711 :: __GPIO_MODULE_USART1_PA9_10 [108]
0x2D50	0x00000009 ;__GPIO_MODULE_USART1_PA9_10+0
0x2D54	0x0000000A ;__GPIO_MODULE_USART1_PA9_10+4
0x2D58	0xFFFFFFFF ;__GPIO_MODULE_USART1_PA9_10+8
0x2D5C	0x00000000 ;__GPIO_MODULE_USART1_PA9_10+12
0x2D60	0x00000000 ;__GPIO_MODULE_USART1_PA9_10+16
0x2D64	0x00000000 ;__GPIO_MODULE_USART1_PA9_10+20
0x2D68	0x00000000 ;__GPIO_MODULE_USART1_PA9_10+24
0x2D6C	0x00000000 ;__GPIO_MODULE_USART1_PA9_10+28
0x2D70	0x00000000 ;__GPIO_MODULE_USART1_PA9_10+32
0x2D74	0x00000000 ;__GPIO_MODULE_USART1_PA9_10+36
0x2D78	0x00000000 ;__GPIO_MODULE_USART1_PA9_10+40
0x2D7C	0x00000000 ;__GPIO_MODULE_USART1_PA9_10+44
0x2D80	0x00000000 ;__GPIO_MODULE_USART1_PA9_10+48
0x2D84	0x00000818 ;__GPIO_MODULE_USART1_PA9_10+52
0x2D88	0x00000018 ;__GPIO_MODULE_USART1_PA9_10+56
0x2D8C	0x00000000 ;__GPIO_MODULE_USART1_PA9_10+60
0x2D90	0x00000000 ;__GPIO_MODULE_USART1_PA9_10+64
0x2D94	0x00000000 ;__GPIO_MODULE_USART1_PA9_10+68
0x2D98	0x00000000 ;__GPIO_MODULE_USART1_PA9_10+72
0x2D9C	0x00000000 ;__GPIO_MODULE_USART1_PA9_10+76
0x2DA0	0x00000000 ;__GPIO_MODULE_USART1_PA9_10+80
0x2DA4	0x00000000 ;__GPIO_MODULE_USART1_PA9_10+84
0x2DA8	0x00000000 ;__GPIO_MODULE_USART1_PA9_10+88
0x2DAC	0x00000000 ;__GPIO_MODULE_USART1_PA9_10+92
0x2DB0	0x00000000 ;__GPIO_MODULE_USART1_PA9_10+96
0x2DB4	0x00000000 ;__GPIO_MODULE_USART1_PA9_10+100
0x2DB8	0x00000004 ;__GPIO_MODULE_USART1_PA9_10+104
; end of __GPIO_MODULE_USART1_PA9_10
;__Lib_GPIO_32F10x_Defs.c,680 :: __GPIO_MODULE_SPI2_PB13_14_15 [108]
0x2DBC	0x0000001D ;__GPIO_MODULE_SPI2_PB13_14_15+0
0x2DC0	0x0000001E ;__GPIO_MODULE_SPI2_PB13_14_15+4
0x2DC4	0x0000001F ;__GPIO_MODULE_SPI2_PB13_14_15+8
0x2DC8	0xFFFFFFFF ;__GPIO_MODULE_SPI2_PB13_14_15+12
0x2DCC	0x00000000 ;__GPIO_MODULE_SPI2_PB13_14_15+16
0x2DD0	0x00000000 ;__GPIO_MODULE_SPI2_PB13_14_15+20
0x2DD4	0x00000000 ;__GPIO_MODULE_SPI2_PB13_14_15+24
0x2DD8	0x00000000 ;__GPIO_MODULE_SPI2_PB13_14_15+28
0x2DDC	0x00000000 ;__GPIO_MODULE_SPI2_PB13_14_15+32
0x2DE0	0x00000000 ;__GPIO_MODULE_SPI2_PB13_14_15+36
0x2DE4	0x00000000 ;__GPIO_MODULE_SPI2_PB13_14_15+40
0x2DE8	0x00000000 ;__GPIO_MODULE_SPI2_PB13_14_15+44
0x2DEC	0x00000000 ;__GPIO_MODULE_SPI2_PB13_14_15+48
0x2DF0	0x00000818 ;__GPIO_MODULE_SPI2_PB13_14_15+52
0x2DF4	0x00000818 ;__GPIO_MODULE_SPI2_PB13_14_15+56
0x2DF8	0x00000818 ;__GPIO_MODULE_SPI2_PB13_14_15+60
0x2DFC	0x00000000 ;__GPIO_MODULE_SPI2_PB13_14_15+64
0x2E00	0x00000000 ;__GPIO_MODULE_SPI2_PB13_14_15+68
0x2E04	0x00000000 ;__GPIO_MODULE_SPI2_PB13_14_15+72
0x2E08	0x00000000 ;__GPIO_MODULE_SPI2_PB13_14_15+76
0x2E0C	0x00000000 ;__GPIO_MODULE_SPI2_PB13_14_15+80
0x2E10	0x00000000 ;__GPIO_MODULE_SPI2_PB13_14_15+84
0x2E14	0x00000000 ;__GPIO_MODULE_SPI2_PB13_14_15+88
0x2E18	0x00000000 ;__GPIO_MODULE_SPI2_PB13_14_15+92
0x2E1C	0x00000000 ;__GPIO_MODULE_SPI2_PB13_14_15+96
0x2E20	0x00000000 ;__GPIO_MODULE_SPI2_PB13_14_15+100
0x2E24	0x00000000 ;__GPIO_MODULE_SPI2_PB13_14_15+104
; end of __GPIO_MODULE_SPI2_PB13_14_15
;,0 :: _initBlock_34 [198]
; Containing: RF_MODEM_BCR_OSR_1_9_850 [99]
;             RF_MODEM_AGC_WINDOW_SIZE_9_850 [99]
0x2E28	0xA7000D03 ;_initBlock_34+0 : RF_MODEM_BCR_OSR_1_9_850 at 0x2E28
0x2E2C	0x025400C6 ;_initBlock_34+4
0x2E30	0x000D03C2 ;_initBlock_34+8
0x2E34	0x5400C6A7 ;_initBlock_34+12
0x2E38	0x8701C202 ;_initBlock_34+16
0x2E3C	0x008B4F01 ;_initBlock_34+20
0x2E40	0x00C202A8 ;_initBlock_34+24
0x2E44	0x179F02C3 ;_initBlock_34+28
0x2E48	0x00029301 ;_initBlock_34+32
0x2E4C	0x3E056200 ;_initBlock_34+36
0x2E50	0x0204052D ;_initBlock_34+40
0x2E54	0x07410000 ;_initBlock_34+44
0x2E58	0xFF0744DD ;_initBlock_34+48
0x2E5C	0x41000002 ;_initBlock_34+52
0x2E60	0x0744DD07 ;_initBlock_34+56
0x2E64	0x000002FF ;_initBlock_34+60
0x2E68	0x44DD0741 ;_initBlock_34+64
0x2E6C	0x0002FF07 ;_initBlock_34+68
0x2E70	0x5E047500 ;_initBlock_34+72
0x2E74	0x029A057B ;_initBlock_34+76
0x2E78	0x083C0000 ;_initBlock_34+80
0x2E7C	0xFF078988 ;_initBlock_34+84
0x2E80	0xAA030002 ;_initBlock_34+88
0x2E84	0x00CF8B00 ;_initBlock_34+92
0x2E88	0x11C20246 ;_initBlock_34+96 : RF_MODEM_AGC_WINDOW_SIZE_9_850 at 0x2E8B
0x2E8C	0x0200ABAB ;_initBlock_34+100
0x2E90	0x2B00FFFF ;_initBlock_34+104
0x2E94	0x00ABAB11 ;_initBlock_34+108
0x2E98	0x00FFFF02 ;_initBlock_34+112
0x2E9C	0x5656112B ;_initBlock_34+116
0x2EA0	0x55D50200 ;_initBlock_34+120
0x2EA4	0x2B112A00 ;_initBlock_34+124
0x2EA8	0x6A02002B ;_initBlock_34+128
0x2EAC	0x112900AB ;_initBlock_34+132
0x2EB0	0x02001515 ;_initBlock_34+136
0x2EB4	0x2800AB42 ;_initBlock_34+140
0x2EB8	0x000E0E11 ;_initBlock_34+144
0x2EBC	0x00552102 ;_initBlock_34+148
0x2EC0	0x0E0E1128 ;_initBlock_34+152
0x2EC4	0xAB100200 ;_initBlock_34+156
0x2EC8	0x0E112800 ;_initBlock_34+160
0x2ECC	0x1002000E ;_initBlock_34+164
0x2ED0	0x222800AB ;_initBlock_34+168
0x2ED4	0x1A000D0D ;_initBlock_34+172
0x2ED8	0x28000032 ;_initBlock_34+176
0x2EDC	0x00070722 ;_initBlock_34+180
0x2EE0	0x009A191A ;_initBlock_34+184
0x2EE4	0xCDCD1127 ;_initBlock_34+188
0x2EE8	0x00301A00 ;_initBlock_34+192
0x2EEC	0x2B00 ;_initBlock_34+196
; end of _initBlock_34
;,0 :: _initBlock_35 [198]
; Containing: RF_MODEM_BCR_OSR_1_9_433 [99]
;             RF_MODEM_AGC_WINDOW_SIZE_9_433 [99]
0x2EEE	0xA7000D03 ;_initBlock_35+0 : RF_MODEM_BCR_OSR_1_9_433 at 0x2EEE
0x2EF2	0x025400C6 ;_initBlock_35+4
0x2EF6	0x018701C2 ;_initBlock_35+8
0x2EFA	0xA8008B4F ;_initBlock_35+12
0x2EFE	0xC300C202 ;_initBlock_35+16
0x2F02	0x02179F02 ;_initBlock_35+20
0x2F06	0x0000021A ;_initBlock_35+24
0x2F0A	0x2D3E0562 ;_initBlock_35+28
0x2F0E	0x0002FF07 ;_initBlock_35+32
0x2F12	0xDD074100 ;_initBlock_35+36
0x2F16	0x02FF0744 ;_initBlock_35+40
0x2F1A	0x07410000 ;_initBlock_35+44
0x2F1E	0xFF0744DD ;_initBlock_35+48
0x2F22	0x41000002 ;_initBlock_35+52
0x2F26	0x0744DD07 ;_initBlock_35+56
0x2F2A	0x000002FF ;_initBlock_35+60
0x2F2E	0x44DD0741 ;_initBlock_35+64
0x2F32	0x0002FF07 ;_initBlock_35+68
0x2F36	0x5E047500 ;_initBlock_35+72
0x2F3A	0x029A057B ;_initBlock_35+76
0x2F3E	0x083C0000 ;_initBlock_35+80
0x2F42	0xFF078988 ;_initBlock_35+84
0x2F46	0xAA030002 ;_initBlock_35+88
0x2F4A	0x00CF8B00 ;_initBlock_35+92
0x2F4E	0x11C20246 ;_initBlock_35+96 : RF_MODEM_AGC_WINDOW_SIZE_9_433 at 0x2F51
0x2F52	0x1A00ABAB ;_initBlock_35+100
0x2F56	0x2B000014 ;_initBlock_35+104
0x2F5A	0x00565611 ;_initBlock_35+108
0x2F5E	0x0000A01A ;_initBlock_35+112
0x2F62	0x2B2B112A ;_initBlock_35+116
0x2F66	0x00501A00 ;_initBlock_35+120
0x2F6A	0x15112900 ;_initBlock_35+124
0x2F6E	0x281A0015 ;_initBlock_35+128
0x2F72	0x11280000 ;_initBlock_35+132
0x2F76	0x1A000E0E ;_initBlock_35+136
0x2F7A	0x28005521 ;_initBlock_35+140
0x2F7E	0x000E0E11 ;_initBlock_35+144
0x2F82	0x00AB101A ;_initBlock_35+148
0x2F86	0x0E0E1128 ;_initBlock_35+152
0x2F8A	0x55081A00 ;_initBlock_35+156
0x2F8E	0x0E112800 ;_initBlock_35+160
0x2F92	0x051A000E ;_initBlock_35+164
0x2F96	0x2228008E ;_initBlock_35+168
0x2F9A	0x1A000D0D ;_initBlock_35+172
0x2F9E	0x28000032 ;_initBlock_35+176
0x2FA2	0x00070722 ;_initBlock_35+180
0x2FA6	0x009A191A ;_initBlock_35+184
0x2FAA	0xCDCD1127 ;_initBlock_35+188
0x2FAE	0x00301A00 ;_initBlock_35+192
0x2FB2	0x2B00 ;_initBlock_35+196
; end of _initBlock_35
;DriverRF4463PROMain.c,70 :: _RF_MODEM_TX_RAMP_DELAY_8_433 [88]
0x2FB4	0x03088001 ;_RF_MODEM_TX_RAMP_DELAY_8_433+0
0x2FB8	0x20700080 ;_RF_MODEM_TX_RAMP_DELAY_8_433+4
0x2FBC	0x03088001 ;_RF_MODEM_TX_RAMP_DELAY_8_433+8
0x2FC0	0x20700080 ;_RF_MODEM_TX_RAMP_DELAY_8_433+12
0x2FC4	0x03080001 ;_RF_MODEM_TX_RAMP_DELAY_8_433+16
0x2FC8	0x20700080 ;_RF_MODEM_TX_RAMP_DELAY_8_433+20
0x2FCC	0x03080001 ;_RF_MODEM_TX_RAMP_DELAY_8_433+24
0x2FD0	0x20700080 ;_RF_MODEM_TX_RAMP_DELAY_8_433+28
0x2FD4	0x03080001 ;_RF_MODEM_TX_RAMP_DELAY_8_433+32
0x2FD8	0x10300080 ;_RF_MODEM_TX_RAMP_DELAY_8_433+36
0x2FDC	0x03080001 ;_RF_MODEM_TX_RAMP_DELAY_8_433+40
0x2FE0	0x10200080 ;_RF_MODEM_TX_RAMP_DELAY_8_433+44
0x2FE4	0x03080001 ;_RF_MODEM_TX_RAMP_DELAY_8_433+48
0x2FE8	0x10100080 ;_RF_MODEM_TX_RAMP_DELAY_8_433+52
0x2FEC	0x03080001 ;_RF_MODEM_TX_RAMP_DELAY_8_433+56
0x2FF0	0x20100080 ;_RF_MODEM_TX_RAMP_DELAY_8_433+60
0x2FF4	0x03080001 ;_RF_MODEM_TX_RAMP_DELAY_8_433+64
0x2FF8	0x30000080 ;_RF_MODEM_TX_RAMP_DELAY_8_433+68
0x2FFC	0x03080001 ;_RF_MODEM_TX_RAMP_DELAY_8_433+72
0x3000	0x30000080 ;_RF_MODEM_TX_RAMP_DELAY_8_433+76
0x3004	0x03088001 ;_RF_MODEM_TX_RAMP_DELAY_8_433+80
0x3008	0x21720080 ;_RF_MODEM_TX_RAMP_DELAY_8_433+84
; end of _RF_MODEM_TX_RAMP_DELAY_8_433
;DriverRF4463PROMain.c,84 :: _RF_MODEM_TX_RAMP_DELAY_8_850 [88]
0x300C	0x03088001 ;_RF_MODEM_TX_RAMP_DELAY_8_850+0
0x3010	0x203200C0 ;_RF_MODEM_TX_RAMP_DELAY_8_850+4
0x3014	0x03088001 ;_RF_MODEM_TX_RAMP_DELAY_8_850+8
0x3018	0x203000C0 ;_RF_MODEM_TX_RAMP_DELAY_8_850+12
0x301C	0x03088001 ;_RF_MODEM_TX_RAMP_DELAY_8_850+16
0x3020	0x203000C0 ;_RF_MODEM_TX_RAMP_DELAY_8_850+20
0x3024	0x03080001 ;_RF_MODEM_TX_RAMP_DELAY_8_850+24
0x3028	0x203000C0 ;_RF_MODEM_TX_RAMP_DELAY_8_850+28
0x302C	0x03080001 ;_RF_MODEM_TX_RAMP_DELAY_8_850+32
0x3030	0x203000C0 ;_RF_MODEM_TX_RAMP_DELAY_8_850+36
0x3034	0x03080001 ;_RF_MODEM_TX_RAMP_DELAY_8_850+40
0x3038	0x102000C0 ;_RF_MODEM_TX_RAMP_DELAY_8_850+44
0x303C	0x03080001 ;_RF_MODEM_TX_RAMP_DELAY_8_850+48
0x3040	0x101000C0 ;_RF_MODEM_TX_RAMP_DELAY_8_850+52
0x3044	0x03080001 ;_RF_MODEM_TX_RAMP_DELAY_8_850+56
0x3048	0x201000C0 ;_RF_MODEM_TX_RAMP_DELAY_8_850+60
0x304C	0x03080001 ;_RF_MODEM_TX_RAMP_DELAY_8_850+64
0x3050	0x30000080 ;_RF_MODEM_TX_RAMP_DELAY_8_850+68
0x3054	0x03080001 ;_RF_MODEM_TX_RAMP_DELAY_8_850+72
0x3058	0x30000080 ;_RF_MODEM_TX_RAMP_DELAY_8_850+76
0x305C	0x03088001 ;_RF_MODEM_TX_RAMP_DELAY_8_850+80
0x3060	0x21720080 ;_RF_MODEM_TX_RAMP_DELAY_8_850+84
; end of _RF_MODEM_TX_RAMP_DELAY_8_850
;,0 :: _initBlock_38 [154]
; Containing: RF_MODEM_AFC_GEAR_7_433 [77]
;             RF_MODEM_AFC_GEAR_7_850 [77]
0x3064	0x03803604 ;_initBlock_38+0 : RF_MODEM_AFC_GEAR_7_433 at 0x3064
0x3068	0x0480AF30 ;_initBlock_38+4
0x306C	0x14078036 ;_initBlock_38+8
0x3070	0x120080DD ;_initBlock_38+12
0x3074	0x3A042A80 ;_initBlock_38+16
0x3078	0x801200A0 ;_initBlock_38+20
0x307C	0xA05A0254 ;_initBlock_38+24
0x3080	0xA8801200 ;_initBlock_38+28
0x3084	0x00E06801 ;_initBlock_38+32
0x3088	0x01508112 ;_initBlock_38+36
0x308C	0x1200E020 ;_initBlock_38+40
0x3090	0x03019F82 ;_initBlock_38+44
0x3094	0x872300E0 ;_initBlock_38+48
0x3098	0xE07700DD ;_initBlock_38+52
0x309C	0xFF8F2300 ;_initBlock_38+56
0x30A0	0x00E0C900 ;_initBlock_38+60
0x30A4	0x01FF8F23 ;_initBlock_38+64
0x30A8	0x3604E023 ;_initBlock_38+68
0x30AC	0x69500180 ;_initBlock_38+72
0x30B0	0x80360480 ;_initBlock_38+76 : RF_MODEM_AFC_GEAR_7_850 at 0x30B1
0x30B4	0x80305201 ;_initBlock_38+80
0x30B8	0x03803604 ;_initBlock_38+84
0x30BC	0x04807F30 ;_initBlock_38+88
0x30C0	0x17078036 ;_initBlock_38+92
0x30C4	0x12008010 ;_initBlock_38+96
0x30C8	0xB1042A80 ;_initBlock_38+100
0x30CC	0x801200A0 ;_initBlock_38+104
0x30D0	0xA09A0254 ;_initBlock_38+108
0x30D4	0xA8801200 ;_initBlock_38+112
0x30D8	0x00A08F01 ;_initBlock_38+116
0x30DC	0x01508112 ;_initBlock_38+120
0x30E0	0x2300A01F ;_initBlock_38+124
0x30E4	0x8400EF83 ;_initBlock_38+128
0x30E8	0x8F2300A0 ;_initBlock_38+132
0x30EC	0xE0C900FF ;_initBlock_38+136
0x30F0	0xFF8F2300 ;_initBlock_38+140
0x30F4	0x04E02301 ;_initBlock_38+144
0x30F8	0x50018036 ;_initBlock_38+148
0x30FC	0x8069 ;_initBlock_38+152
; end of _initBlock_38
;,0 :: _initBlock_39 [158]
; Containing: RF_SYNTH_PFDCP_CPFF_7 [77]
;             tx_ph_data [66]
;             ?ICS?lstr30_DriverRF4463PROMain [15]
0x30FE	0x040B0E2C ;_initBlock_39+0 : RF_SYNTH_PFDCP_CPFF_7 at 0x30FE
0x3102	0x2C03730C ;_initBlock_39+4
0x3106	0x0C040B0E ;_initBlock_39+8
0x310A	0x0E2C0373 ;_initBlock_39+12
0x310E	0x730C040B ;_initBlock_39+16
0x3112	0x0B0E2C03 ;_initBlock_39+20
0x3116	0x03730C04 ;_initBlock_39+24
0x311A	0x040B0E2C ;_initBlock_39+28
0x311E	0x2C03730C ;_initBlock_39+32
0x3122	0x0C040B0E ;_initBlock_39+36
0x3126	0x04340373 ;_initBlock_39+40
0x312A	0x7007040B ;_initBlock_39+44
0x312E	0x0B043403 ;_initBlock_39+48
0x3132	0x03700704 ;_initBlock_39+52
0x3136	0x050B0501 ;_initBlock_39+56
0x313A	0x01030002 ;_initBlock_39+60
0x313E	0x02050B05 ;_initBlock_39+64
0x3142	0x0E2C0300 ;_initBlock_39+68
0x3146	0x730C040B ;_initBlock_39+72
0x314A	0x01010103 ;_initBlock_39+76 : tx_ph_data at 0x314B
0x314E	0x43424101 ;_initBlock_39+80
0x3152	0x47464544 ;_initBlock_39+84
0x3156	0x4B4A4948 ;_initBlock_39+88
0x315A	0x4F4E4D4C ;_initBlock_39+92
0x315E	0x53525150 ;_initBlock_39+96
0x3162	0x57565554 ;_initBlock_39+100
0x3166	0x415A5958 ;_initBlock_39+104
0x316A	0x45444342 ;_initBlock_39+108
0x316E	0x49484746 ;_initBlock_39+112
0x3172	0x4D4C4B4A ;_initBlock_39+116
0x3176	0x51504F4E ;_initBlock_39+120
0x317A	0x55545352 ;_initBlock_39+124
0x317E	0x59585756 ;_initBlock_39+128
0x3182	0x4342415A ;_initBlock_39+132
0x3186	0x47464544 ;_initBlock_39+136
0x318A	0x52E21148 ;_initBlock_39+140 : ?ICS?lstr30_DriverRF4463PROMain at 0x318D
0x318E	0x61522046 ;_initBlock_39+144
0x3192	0x206F6964 ;_initBlock_39+148
0x3196	0x64616572 ;_initBlock_39+152
0x319A	0x0079 ;_initBlock_39+156
; end of _initBlock_39
;DriverRF4463PROMain.c,0 :: ?ICS?lstr31_DriverRF4463PROMain [16]
0x319C	0x454D205B ;?ICS?lstr31_DriverRF4463PROMain+0
0x31A0	0x4741534E ;?ICS?lstr31_DriverRF4463PROMain+4
0x31A4	0x5D204547 ;?ICS?lstr31_DriverRF4463PROMain+8
0x31A8	0x00203D20 ;?ICS?lstr31_DriverRF4463PROMain+12
; end of ?ICS?lstr31_DriverRF4463PROMain
;,0 :: _initBlock_41 [18]
; Containing: ?ICS?lstr32_DriverRF4463PROMain [3]
;             ?ICS?lstr33_DriverRF4463PROMain [15]
0x31AC	0x5B000A0D ;_initBlock_41+0 : ?ICS?lstr32_DriverRF4463PROMain at 0x31AC : ?ICS?lstr33_DriverRF4463PROMain at 0x31AF
0x31B0	0x43524320 ;_initBlock_41+4
0x31B4	0x46205D20 ;_initBlock_41+8
0x31B8	0x0D6C6961 ;_initBlock_41+12
0x31BC	0x000A ;_initBlock_41+16
; end of _initBlock_41
;DriverRF4463PROMain.c,0 :: ?ICSvRF4463Init_cleanBuffer_L0 [20]
0x31BE	0x00000000 ;?ICSvRF4463Init_cleanBuffer_L0+0
0x31C2	0x00000000 ;?ICSvRF4463Init_cleanBuffer_L0+4
0x31C6	0x00000000 ;?ICSvRF4463Init_cleanBuffer_L0+8
0x31CA	0x00000000 ;?ICSvRF4463Init_cleanBuffer_L0+12
0x31CE	0x00000000 ;?ICSvRF4463Init_cleanBuffer_L0+16
; end of ?ICSvRF4463Init_cleanBuffer_L0
;,0 :: _initBlock_43 [70]
; Containing: ?ICS?lstr1_DriverRF4463PROMain [19]
;             APBAHBPrescTable [16]
;             tx_test_aa_data [14]
;             ?ICS?lstr34_DriverRF4463PROMain [12]
;             ?ICS?lstr29_DriverRF4463PROMain [9]
0x31D2	0x4155205B ;_initBlock_43+0 : ?ICS?lstr1_DriverRF4463PROMain at 0x31D2
0x31D6	0x20315452 ;_initBlock_43+4
0x31DA	0x5854205D ;_initBlock_43+8
0x31DE	0x544E4920 ;_initBlock_43+12
0x31E2	0x00000A0D ;_initBlock_43+16 : APBAHBPrescTable at 0x31E5
0x31E6	0x01000000 ;_initBlock_43+20
0x31EA	0x01040302 ;_initBlock_43+24
0x31EE	0x06040302 ;_initBlock_43+28
0x31F2	0xAA090807 ;_initBlock_43+32 : tx_test_aa_data at 0x31F5
0x31F6	0xAAAAAAAA ;_initBlock_43+36
0x31FA	0xAAAAAAAA ;_initBlock_43+40
0x31FE	0xAAAAAAAA ;_initBlock_43+44
0x3202	0x52205BAA ;_initBlock_43+48 : ?ICS?lstr34_DriverRF4463PROMain at 0x3203
0x3206	0x20495353 ;_initBlock_43+52
0x320A	0x203D205D ;_initBlock_43+56
0x320E	0x20465200 ;_initBlock_43+60 : ?ICS?lstr29_DriverRF4463PROMain at 0x320F
0x3212	0x0D746E69 ;_initBlock_43+64
0x3216	0x000A ;_initBlock_43+68
; end of _initBlock_43
;DriverRF4463PROMain.c,323 :: _RF_FRR_CTL_A_MODE_4_data [8]
0x3218	0x00040211 ;_RF_FRR_CTL_A_MODE_4_data+0
0x321C	0x00000000 ;_RF_FRR_CTL_A_MODE_4_data+4
; end of _RF_FRR_CTL_A_MODE_4_data
;,0 :: _initBlock_45 [12]
; Containing: RF_POWER_UP_data [7]
;             RF_MODEM_AGC_CONTROL_1_data [5]
0x3220	0x01000102 ;_initBlock_45+0 : RF_POWER_UP_data at 0x3220
0x3224	0x1180C3C9 ;_initBlock_45+4 : RF_MODEM_AGC_CONTROL_1_data at 0x3227
0x3228	0xE2350120 ;_initBlock_45+8
; end of _initBlock_45
Symbol List:
//** Routines locations **
//ADDRESS    SIZE    PROCEDURE
//----------------------------------------------
0x0150     [148]    __Lib_GPIO_32F10x_GPIO_Configure_Pin
0x01E4     [272]    _GPIO_Alternate_Function_Enable
0x02F4     [168]    _RCC_GetClocksFrequency
0x039C      [52]    _ucRf4463SPIByte
0x03D0      [30]    __Lib_UART_123_45_UARTx_Write
0x03F0      [66]    __Lib_SPI_123_SPIx_Init_Advanced
0x0434      [56]    _check_cts
0x046C      [70]    _vRF4463RxStart
0x04B4     [580]    __Lib_UART_123_45_UARTx_Init_Advanced
0x06F8      [78]    _ByteToStr
0x0748      [64]    _vRF4463EnableRxInterrupt
0x0788     [140]    _GPIO_Clk_Enable
0x0814      [84]    _vRF4463RxStartTest
0x0868     [140]    _vRF4463GPIO_SET
0x08F4      [80]    _spi_write
0x0944      [62]    _strncpy
0x0984      [60]    _vRF4463RxInit
0x09C0      [52]    _vRF4463TxStart
0x09F4     [116]    _ShortToStr
0x0A68      [66]    __FloatToSignedIntegral
0x0AAC      [58]    _vRF4463EnableTxInterrupt
0x0AE8     [156]    _spi_read
0x0B84     [448]    _rf_init_freq
0x0D44     [128]    _spi_write_fifo
0x0DC4      [50]    __Lib_UART_123_45_UARTx_Write_Text
0x0DF8      [40]    _UART1_Init_Advanced
0x0E20     [500]    _GPIO_Config
0x1014     [120]    _NVIC_IntEnable
0x1090      [26]    _Delay_Cyc
0x10AC      [16]    _Get_Fosc_kHz
0x10BC      [84]    _SPI2_Init_Advanced
0x1110      [92]    _vRF4463TxCont
0x116C      [84]    _Sound_Init
0x11C0      [24]    _GPIO_Digital_Input
0x11D8      [28]    _GPIO_Digital_Output
0x11F4      [58]    ___FillZeros
0x1230      [20]    ___CC2DW
0x1244     [108]    __Lib_System_105_107_SystemClockSetDefault
0x12B0     [120]    _getRSSI
0x1328      [44]    __UnsignedIntegralToFloat
0x1354     [164]    __Div_FP
0x13F8     [258]    __Sub_FP
0x14FC      [54]    _vRF4463ClearInterrupts
0x1534      [44]    _vUARTTxInit
0x1560      [34]    _vRF4463PartInfo
0x1584    [2264]    _vRF4463Init
0x1E60     [132]    _VRF4463SDNReset
0x1EE4      [52]    _vSPI2Init
0x1F18      [34]    _vRF4463FifoReset
0x1F3C     [156]    _vRF4463TxData
0x1FD8     [140]    _Sound_Play
0x2064      [28]    _UART1_Write_Text
0x2080      [88]    _InitTimer2
0x20D8      [96]    _spi_read_fifo
0x2138     [172]    _vUARTISR
0x21E4      [36]    _Timer2_interrupt
0x2208      [60]    _vRF4463ISR
0x2244      [48]    _Int_SPI2
0x2274      [88]    _RFISR
0x22CC     [344]    __Lib_System_105_107_InitialSetUpRCCRCC2
0x2428     [828]    _main
0x2764       [8]    ___GenExcept
0x276C      [20]    __Lib_System_105_107_InitialSetUpFosc
//** Variables locations ** 
//ADDRESS    SIZE    VARIABLE
//----------------------------------------------
0x20000000       [6]    ?lstr6_DriverRF4463PROMain
0x20000006       [5]    ?lstr7_DriverRF4463PROMain
0x2000000B       [6]    ?lstr8_DriverRF4463PROMain
0x20000011      [10]    ?lstr9_DriverRF4463PROMain
0x2000001B       [7]    ?lstr10_DriverRF4463PROMain
0x20000022       [5]    ?lstr11_DriverRF4463PROMain
0x20000027       [5]    ?lstr12_DriverRF4463PROMain
0x2000002C       [7]    ?lstr13_DriverRF4463PROMain
0x20000033       [8]    ?lstr14_DriverRF4463PROMain
0x2000003B      [12]    ?lstr15_DriverRF4463PROMain
0x20000047       [7]    ?lstr16_DriverRF4463PROMain
0x2000004E       [5]    ?lstr17_DriverRF4463PROMain
0x20000053      [11]    ?lstr18_DriverRF4463PROMain
0x2000005E       [7]    ?lstr19_DriverRF4463PROMain
0x20000065       [9]    ?lstr20_DriverRF4463PROMain
0x2000006E      [10]    ?lstr21_DriverRF4463PROMain
0x20000078       [8]    ?lstr22_DriverRF4463PROMain
0x20000080       [9]    ?lstr23_DriverRF4463PROMain
0x20000089       [5]    ?lstr24_DriverRF4463PROMain
0x2000008E      [13]    ?lstr25_DriverRF4463PROMain
0x2000009B       [9]    ?lstr26_DriverRF4463PROMain
0x200000A4       [3]    ?lstr27_DriverRF4463PROMain
0x200000A7       [1]    DriverRF4463PROMain_ucRF4463IRQ
0x200000A8       [4]    _tx_cnt
0x200000AC      [16]    _RF_MODEM_MOD_TYPE_12_data
0x200000BC      [12]    _RF_MODEM_TX_RAMP_DELAY_8_data
0x200000C8      [13]    _RF_MODEM_AFC_GEAR_7_data
0x200000D5      [15]    _RF_MODEM_OOK_CNT1_11_data
0x200000E4      [16]    _RF_MODEM_CHFLT_RX1_CHFLT_COE13_7_0_12_data
0x200000F4      [16]    _RF_MODEM_CHFLT_RX1_CHFLT_COE1_7_0_12_data
0x20000104      [16]    _RF_MODEM_CHFLT_RX2_CHFLT_COE7_7_0_12_data
0x20000114      [13]    _RF_MODEM_AGC_WINDOW_SIZE_9_data
0x20000121      [13]    _RF_MODEM_BCR_OSR_1_9_data
0x2000012E      [11]    _RF_SYNTH_PFDCP_CPFF_7_data
0x20000139       [1]    _ucSPI2ByteReceived
0x2000013A       [1]    _ucTempByteUART
0x2000013B       [1]    _ucUARTDataReady
0x2000013C       [4]    _rx_cnt
0x20000140       [2]    _usUARTMessageLength
0x20000142      [20]    _spi_read_buf
0x20000156       [1]    _Flag
0x20000157       [1]    _rate
0x20000158       [2]    _rf_timeout
0x2000015A      [66]    _rx_buf
0x2000019C       [1]    _freq3
0x2000019D       [1]    _mode
0x2000019E       [1]    _power
0x2000019F       [1]    _freq2
0x200001A0       [1]    _freq1
0x200001A1       [1]    _reset_mode
0x200001A4       [4]    _rssi
0x200001A8       [4]    _Value
0x200001AC       [4]    ___System_CLOCK_IN_KHZ
0x200001B0       [4]    __Lib_Sound_soundPortAddr
0x200001B4       [4]    __Lib_Sound_pinMask1
0x200001B8       [4]    __Lib_Sound_pinMask0
0x200001BC       [4]    _SPI_Rd_Ptr
0x200001C0       [4]    _SPI_Wr_Ptr
0x200001C4       [4]    _UART_Wr_Ptr
0x200001C8       [4]    _UART_Rd_Ptr
0x200001CC       [4]    _UART_Rdy_Ptr
0x200001D0       [4]    _UART_Tx_Idle_Ptr
0x200001D4    [2048]    _pcRxUARTBuffer
//** Constants locations ** 
//ADDRESS    SIZE    CONSTANT
//----------------------------------------------
0x108C       [4]    __Lib_System_105_107_ADCPrescTable
0x2780       [6]    ?ICS?lstr6_DriverRF4463PROMain
0x2786       [5]    ?ICS?lstr7_DriverRF4463PROMain
0x278B       [6]    ?ICS?lstr8_DriverRF4463PROMain
0x2791      [10]    ?ICS?lstr9_DriverRF4463PROMain
0x279B       [7]    ?ICS?lstr10_DriverRF4463PROMain
0x27A2       [5]    ?ICS?lstr11_DriverRF4463PROMain
0x27A7       [5]    ?ICS?lstr12_DriverRF4463PROMain
0x27AC       [7]    ?ICS?lstr13_DriverRF4463PROMain
0x27B3       [8]    ?ICS?lstr14_DriverRF4463PROMain
0x27BB      [12]    ?ICS?lstr15_DriverRF4463PROMain
0x27C7       [7]    ?ICS?lstr16_DriverRF4463PROMain
0x27CE       [5]    ?ICS?lstr17_DriverRF4463PROMain
0x27D3      [11]    ?ICS?lstr18_DriverRF4463PROMain
0x27DE       [7]    ?ICS?lstr19_DriverRF4463PROMain
0x27E5       [9]    ?ICS?lstr20_DriverRF4463PROMain
0x27EE      [10]    ?ICS?lstr21_DriverRF4463PROMain
0x27F8       [8]    ?ICS?lstr22_DriverRF4463PROMain
0x2800       [9]    ?ICS?lstr23_DriverRF4463PROMain
0x2809       [5]    ?ICS?lstr24_DriverRF4463PROMain
0x280E      [13]    ?ICS?lstr25_DriverRF4463PROMain
0x281B       [9]    ?ICS?lstr26_DriverRF4463PROMain
0x2824       [3]    ?ICS?lstr27_DriverRF4463PROMain
0x2827       [1]    ?ICSDriverRF4463PROMain_ucRF4463IRQ
0x2828       [4]    ?ICS_tx_cnt
0x282C      [16]    ?ICS_RF_MODEM_MOD_TYPE_12_data
0x283C      [12]    ?ICS_RF_MODEM_TX_RAMP_DELAY_8_data
0x2848      [13]    ?ICS_RF_MODEM_AFC_GEAR_7_data
0x2855      [15]    ?ICS_RF_MODEM_OOK_CNT1_11_data
0x2864      [16]    ?ICS_RF_MODEM_CHFLT_RX1_CHFLT_COE13_7_0_12_data
0x2874      [16]    ?ICS_RF_MODEM_CHFLT_RX1_CHFLT_COE1_7_0_12_data
0x2884      [16]    ?ICS_RF_MODEM_CHFLT_RX2_CHFLT_COE7_7_0_12_data
0x2894      [13]    ?ICS_RF_MODEM_AGC_WINDOW_SIZE_9_data
0x28A1      [13]    ?ICS_RF_MODEM_BCR_OSR_1_9_data
0x28AE      [11]    ?ICS_RF_SYNTH_PFDCP_CPFF_7_data
0x28B9       [1]    ?ICS_ucSPI2ByteReceived
0x28BA       [1]    ?ICS_ucTempByteUART
0x28BB       [1]    ?ICS_ucUARTDataReady
0x28BC       [4]    ?ICS_rx_cnt
0x28C0       [2]    ?ICS_usUARTMessageLength
0x28C2     [132]    _RF_MODEM_CHFLT_RX2_CHFLT_COE7_7_0_12_433
0x2946     [132]    _RF_MODEM_CHFLT_RX1_CHFLT_COE1_7_0_12_433
0x29CA     [132]    _RF_MODEM_CHFLT_RX2_CHFLT_COE7_7_0_12_850
0x2A4E     [132]    _RF_MODEM_CHFLT_RX1_CHFLT_COE1_7_0_12_850
0x2AD2     [132]    _RF_MODEM_CHFLT_RX1_CHFLT_COE13_7_0_12_850
0x2B56     [132]    _RF_MODEM_MOD_TYPE_12
0x2BDA     [132]    _RF_MODEM_CHFLT_RX1_CHFLT_COE13_7_0_12_433
0x2C5E     [121]    _RF_MODEM_OOK_CNT1_11_850
0x2CD7     [121]    _RF_MODEM_OOK_CNT1_11_433
0x2D50     [108]    __GPIO_MODULE_USART1_PA9_10
0x2DBC     [108]    __GPIO_MODULE_SPI2_PB13_14_15
0x2E28      [99]    _RF_MODEM_BCR_OSR_1_9_850
0x2E8B      [99]    _RF_MODEM_AGC_WINDOW_SIZE_9_850
0x2EEE      [99]    _RF_MODEM_BCR_OSR_1_9_433
0x2F51      [99]    _RF_MODEM_AGC_WINDOW_SIZE_9_433
0x2FB4      [88]    _RF_MODEM_TX_RAMP_DELAY_8_433
0x300C      [88]    _RF_MODEM_TX_RAMP_DELAY_8_850
0x3064      [77]    _RF_MODEM_AFC_GEAR_7_433
0x30B1      [77]    _RF_MODEM_AFC_GEAR_7_850
0x30FE      [77]    _RF_SYNTH_PFDCP_CPFF_7
0x314B      [66]    _tx_ph_data
0x318D      [15]    ?ICS?lstr30_DriverRF4463PROMain
0x319C      [16]    ?ICS?lstr31_DriverRF4463PROMain
0x31AC       [3]    ?ICS?lstr32_DriverRF4463PROMain
0x31AF      [15]    ?ICS?lstr33_DriverRF4463PROMain
0x31BE      [20]    ?ICSvRF4463Init_cleanBuffer_L0
0x31D2      [19]    ?ICS?lstr1_DriverRF4463PROMain
0x31E5      [16]    __Lib_System_105_107_APBAHBPrescTable
0x31F5      [14]    _tx_test_aa_data
0x3203      [12]    ?ICS?lstr34_DriverRF4463PROMain
0x320F       [9]    ?ICS?lstr29_DriverRF4463PROMain
0x3218       [8]    _RF_FRR_CTL_A_MODE_4_data
0x3220       [7]    _RF_POWER_UP_data
0x3227       [5]    _RF_MODEM_AGC_CONTROL_1_data
