* R8C/Tiny,M16C/60 SERIES ASSEMBLER *   SOURCE LIST       Wed Jan 04 09:45:02 2017  PAGE 001

  SEQ.  LOC.   OBJ.              0XMSDA ....*....SOURCE STATEMENT....7....*....8....*....9....*....0....*....1....*....2....*....3....*....4....*....5....*....6....*....7....*....8....*....9....*....0

     1                                  ;***************************************************************************
     2                                  ; C COMPILER for R8C/Tiny, M16C/60,30,20,10
     3                                  ; Copyright(C) 1999(2000-2004). Renesas Technology Corp.
     4                                  ; and Renesas Solutions Corp., All rights reserved.
     5                                  ;
     6                                  ; ncrt0.a30 : NC30 startup program
     7                                  ;
     8                                  ; This program is applicable when using the basic I/O library
     9                                  ;       
    10                                  ; $Id: ncrt0.a30,v 1.27.4.4 2004/10/29 14:06:38 simomura Exp $
    11                                  ;***************************************************************************
    12                                  
    13                                  ;***************************************************************************
    14                                  ;Revision History
    15                                  ;DD.MM.YYYY OSO-UID Description
    16                                  ;07.04.2006 RTE-VNA First Release
    17                                  ;***************************************************************************
    18                                  
    19                                  ;--------------------------------------------------------------------
    20                                  ; set size of monitor area for FoUSB
    21                                  ;--------------------------------------------------------------------
    22                                  .if	_KD_
    23                            X     .if	_Firmware_space == 0
    24                            X     .else
    25                            X     .endif
    26                                  .endif
    27                                  ;---------------------------------------------------------------------
    28                                  ; HEEP SIZE definition
    29                                  ;---------------------------------------------------------------------
    30                                  .if	__HEAP__ == 1 
    31                                  .else
    32                                  
    33                                  .if	__HEAPSIZE__ == 0
    34  00000300h                       HEAPSIZE	.equ	300H
    35                                  .else
    36                                  .endif
    37                                  
    38                                  .endif
    39                                  
    40                                  ;---------------------------------------------------------------------
    41                                  ; STACK SIZE definition
    42                                  ;---------------------------------------------------------------------
    43                                  .if	__USTACKSIZE__ == 0
    44                                  .if	__R8C__ != 1
    45                                  .else
    46  00000080h                       STACKSIZE	.equ	80h
    47                                  .endif
    48                                  .else
    49                                  .endif
    50                                  
    51                                  ;---------------------------------------------------------------------
    52                                  ; INTERRUPT STACK SIZE definition
    53                                  ;---------------------------------------------------------------------
    54                                  .if	__ISTACKSIZE__ == 0
    55                                  .if	__R8C__ != 1
    56                                  .else
    57  00000080h                       ISTACKSIZE	.equ	80h
    58                                  .endif
    59                                  .else
    60                                  .endif
    61                                  
    62                                  ;---------------------------------------------------------------------
* R8C/Tiny,M16C/60 SERIES ASSEMBLER *   SOURCE LIST       Wed Jan 04 09:45:02 2017  PAGE 002

  SEQ.  LOC.   OBJ.              0XMSDA ....*....SOURCE STATEMENT....7....*....8....*....9....*....0....*....1....*....2....*....3....*....4....*....5....*....6....*....7....*....8....*....9....*....0

    63                                  ; INTERRUPT VECTOR ADDRESS  definition
    64                                  ;---------------------------------------------------------------------
    65                                  .if	__R8C__ != 1
    66                            X     .if	_KD_ == 1
    67                            X     .else
    68                            X     .endif // _KD_
    69                                  .else
    70  0000FEDCh                       VECTOR_ADR 	.equ	0fedch
    71                                  .endif
    72                                  
    73                                  ;---------------------------------------------------------------------
    74                                  ; Section allocation
    75                                  ;---------------------------------------------------------------------
    76                                  	.list OFF
    77                                  	.list ON
    78                                  
    79                                  ;---------------------------------------------------------------------
    80                                  ; SBDATA area definition
    81                                  ;---------------------------------------------------------------------
    82                                  	.glb	__SB__
    83  00000400h                       __SB__	.equ	data_SE_top
    84                                  
    85                                  ;====================================================================
    86                                  ; Initialize Macro declaration
    87                                  ;---------------------------------------------------------------------
    88                             D    N_BZERO	.macro	TOP_ ,SECT_
    89                             D    	mov.b	#00H, R0L
    90                             D    	mov.w	#(TOP_ & 0FFFFH), A1
    91                             D    	mov.w	#sizeof SECT_ , R3
    92                             D    	sstr.b	
    93                                  	.endm
    94                                  
    95                             D    N_BCOPY .macro	FROM_,TO_,SECT_
    96                             D    	mov.w	#(FROM_ & 0FFFFH),A0
    97                             D    	mov.b	#(FROM_ >>16),R1H
    98                             D    	mov.w	#TO_ ,A1
    99                             D    	mov.w	#sizeof SECT_ , R3
   100                             D    	smovf.b
   101                                  	.endm
   102                                  
   103                             D    BZERO	.macro	TOP_,SECT_
   104                             D    	push.w	#sizeof SECT_ >> 16
   105                             D    	push.w	#sizeof SECT_  & 0ffffh
   106                             D    	pusha	TOP_ >>16
   107                             D    	pusha	TOP_ & 0ffffh
   108                             D    	.stk	8
   109                             D    	.glb	_bzero	
   110                             D    	.call	_bzero,G
   111                             D    	jsr.a	_bzero
   112                                  	.endm
   113                                  
   114                             D    BCOPY	.macro	FROM_ ,TO_ ,SECT_
   115                             D    	push.w	#sizeof SECT_  >> 16
   116                             D    	push.w	#sizeof SECT_  & 0ffffh
   117                             D    	pusha	TO_ >>16
   118                             D    	pusha	TO_  & 0ffffh
   119                             D    	pusha	FROM_ >>16
   120                             D    	pusha	FROM_  & 0ffffh
   121                             D    	.stk	12
   122                             D    	.glb	_bcopy
   123                             D    	.call   _bcopy,G
   124                             D    	jsr.a	_bcopy
* R8C/Tiny,M16C/60 SERIES ASSEMBLER *   SOURCE LIST       Wed Jan 04 09:45:02 2017  PAGE 003

  SEQ.  LOC.   OBJ.              0XMSDA ....*....SOURCE STATEMENT....7....*....8....*....9....*....0....*....1....*....2....*....3....*....4....*....5....*....6....*....7....*....8....*....9....*....0

   125                                  	.endm
   126                                  
   127                                  .if	__R8C__ != 1
   128                            X     .if __HEAP__ != 1
   129                            X     .endif
   130                            X     .if __STANDARD_IO__ == 1
   131                            X     .endif
   132                                  .else	; __R8C__
   133                                  
   134                                  ;---------------------------------------------------------------------
   135                                  ; for R8C/Tiny
   136                                  ;---------------------------------------------------------------------
   137                                  
   138                                  ;====================================================================
   139                                  ; Interrupt section start
   140                                  ;---------------------------------------------------------------------
   141                                  	.insf	start,S,0
   142                                  	.glb	start
   143                                  	.section	interrupt
   144  00000                           start:
   145                                  ;---------------------------------------------------------------------
   146                                  ; after reset,this program will start
   147                                  ;---------------------------------------------------------------------
   148  00000  EB400000r                	ldc	#istack_top,	isp	;set istack pointer
   149  00004  C7020A00              S  	mov.b	#02h,0ah
   150  00008  B70400                Z  	mov.b	#00h,04h		;set processer mode 
   151  0000B  B70A00                Z  	mov.b	#00h,0ah
   152  0000E  EB308000                 	ldc	#0080h,	flg
   153  00012  EB500000r                	ldc	#stack_top,	sp	;set stack pointer 
   154  00016  EB600004                 	ldc	#data_SE_top,	sb	;set sb register 
   155  0001A  EB200000                 	ldintb	#VECTOR_ADR
               EB10DCFE 
   156                                  
   157                                  ;====================================================================
   158                                  ; NEAR area initialize.
   159                                  ;--------------------------------------------------------------------
   160                                  ; bss zero clear
   161                                  ;--------------------------------------------------------------------
   162                                  	N_BZERO	bss_SE_top,bss_SE
   163  00022  B4                  M Z  	mov.b	#00H, R0L
   164  00023  AA0000r             M S  	mov.w	#(bss_SE_top & 0FFFFH), A1
   165  00026  75C30000r           M    	mov.w	#sizeof bss_SE , R3
   166  0002A  7CEA                M    	sstr.b	
   167                             M    	.endm
   168                                  	N_BZERO	bss_SO_top,bss_SO
   169  0002C  B4                  M Z  	mov.b	#00H, R0L
   170  0002D  AA0000r             M S  	mov.w	#(bss_SO_top & 0FFFFH), A1
   171  00030  75C30000r           M    	mov.w	#sizeof bss_SO , R3
   172  00034  7CEA                M    	sstr.b	
   173                             M    	.endm
   174                                  	N_BZERO	bss_NE_top,bss_NE
   175  00036  B4                  M Z  	mov.b	#00H, R0L
   176  00037  AA0000r             M S  	mov.w	#(bss_NE_top & 0FFFFH), A1
   177  0003A  75C30000r           M    	mov.w	#sizeof bss_NE , R3
   178  0003E  7CEA                M    	sstr.b	
   179                             M    	.endm
   180                                  	N_BZERO	bss_NO_top,bss_NO
   181  00040  B4                  M Z  	mov.b	#00H, R0L
   182  00041  AA0000r             M S  	mov.w	#(bss_NO_top & 0FFFFH), A1
   183  00044  75C30000r           M    	mov.w	#sizeof bss_NO , R3
   184  00048  7CEA                M    	sstr.b	
   185                             M    	.endm
* R8C/Tiny,M16C/60 SERIES ASSEMBLER *   SOURCE LIST       Wed Jan 04 09:45:02 2017  PAGE 004

  SEQ.  LOC.   OBJ.              0XMSDA ....*....SOURCE STATEMENT....7....*....8....*....9....*....0....*....1....*....2....*....3....*....4....*....5....*....6....*....7....*....8....*....9....*....0

   186                                  
   187                                  ;---------------------------------------------------------------------
   188                                  ; initialize data section
   189                                  ;---------------------------------------------------------------------
   190                                  	N_BCOPY data_SEI_top,data_SE_top,data_SE
   191  0004A  A20000r             M S  	mov.w	#(data_SEI_top & 0FFFFH),A0
   192  0004D  74C300r             M    	mov.b	#(data_SEI_top >>16),R1H
   193  00050  AA0004              M S  	mov.w	#data_SE_top ,A1
   194  00053  75C30000r           M    	mov.w	#sizeof data_SE , R3
   195  00057  7CE8                M    	smovf.b
   196                             M    	.endm
   197                                  	N_BCOPY	data_SOI_top,data_SO_top,data_SO
   198  00059  A20000r             M S  	mov.w	#(data_SOI_top & 0FFFFH),A0
   199  0005C  74C300r             M    	mov.b	#(data_SOI_top >>16),R1H
   200  0005F  AA0000r             M S  	mov.w	#data_SO_top ,A1
   201  00062  75C30000r           M    	mov.w	#sizeof data_SO , R3
   202  00066  7CE8                M    	smovf.b
   203                             M    	.endm
   204                                  	N_BCOPY	data_NEI_top,data_NE_top,data_NE
   205  00068  A20000r             M S  	mov.w	#(data_NEI_top & 0FFFFH),A0
   206  0006B  74C300r             M    	mov.b	#(data_NEI_top >>16),R1H
   207  0006E  AA0000r             M S  	mov.w	#data_NE_top ,A1
   208  00071  75C30000r           M    	mov.w	#sizeof data_NE , R3
   209  00075  7CE8                M    	smovf.b
   210                             M    	.endm
   211                                  	N_BCOPY	data_NOI_top,data_NO_top,data_NO
   212  00077  A20000r             M S  	mov.w	#(data_NOI_top & 0FFFFH),A0
   213  0007A  74C300r             M    	mov.b	#(data_NOI_top >>16),R1H
   214  0007D  AA0000r             M S  	mov.w	#data_NO_top ,A1
   215  00080  75C30000r           M    	mov.w	#sizeof data_NO , R3
   216  00084  7CE8                M    	smovf.b
   217                             M    	.endm
   218                                  
   219                                  ;====================================================================
   220                                  ; FAR area initialize.
   221                                  ;---------------------------------------------------------------------
   222                                  ; bss zero clear
   223                                  ;---------------------------------------------------------------------
   224                                  ;	BZERO	bss_FE_top,bss_FE
   225                                  ;	BZERO	bss_FO_top,bss_FO
   226                                  
   227                                  ;---------------------------------------------------------------------
   228                                  ; Copy edata_E(O) section from edata_EI(OI) section
   229                                  ;---------------------------------------------------------------------
   230                                  ;	BCOPY	data_FEI_top,data_FE_top,data_FE
   231                                  ;	BCOPY	data_FOI_top,data_FO_top,data_FO
   232                                  
   233  00086  EB500000r                	ldc	#stack_top,sp
   234                                  ;	.stk	-40
   235                                  
   236                                  ;====================================================================
   237                                  ; heap area initialize
   238                                  ;---------------------------------------------------------------------
   239                                  .if __HEAP__ != 1
   240                                  	.glb	__mbase
   241                                  	.glb	__mnext
   242                                  	.glb	__msize
   243  0008A  75CF0000r0000r           	mov.w	#(heap_top&0FFFFH), __mbase
   244  00090  75CF0000r0000r           	mov.w	#(heap_top&0FFFFH), __mnext
   245  00096  75CF0000r0003            	mov.w	#(HEAPSIZE&0FFFFH), __msize
   246                                  .endif
   247                                  
* R8C/Tiny,M16C/60 SERIES ASSEMBLER *   SOURCE LIST       Wed Jan 04 09:45:02 2017  PAGE 005

  SEQ.  LOC.   OBJ.              0XMSDA ....*....SOURCE STATEMENT....7....*....8....*....9....*....0....*....1....*....2....*....3....*....4....*....5....*....6....*....7....*....8....*....9....*....0

   248                                  ;====================================================================
   249                                  ; Initialize standard I/O
   250                                  ;---------------------------------------------------------------------
   251                                  ;;.if __STANDARD_IO__ == 1
   252                                  	.glb	_Initialise
   253                                  	.call	_Initialise,G
   254  0009C  FD000000r             A  	jsr.a	_Initialise
   255                                  ;;.endif
   256                                  
   257                                  ;====================================================================
   258                                  ; Call main() function
   259                                  ; Main called from initialise() in resetprg.c 08/07/05 DDE
   260                                  ;---------------------------------------------------------------------
   261                                  ;	ldc	#0h,fb	; for debuger
   262                                  
   263                                  ;	.glb	_main
   264                                  ;	jsr.a	_main
   265                                  
   266                                  .endif	; __R8C__
   267                                  
   268                                  ;====================================================================
   269                                  ; exit() function
   270                                  ;---------------------------------------------------------------------
   271                                  	.glb	_exit
   272                                  	.glb	$exit
   273  000A0                           _exit:			   ; End program
   274  000A0                           $exit:
   275  000A0  FEFF                  B  	jmp	_exit
   276                                  	.einsf
   277                                  ;====================================================================
   278                                  ; dummy interrupt function
   279                                  ;---------------------------------------------------------------------
   280                                  	.glb	dummy_int
   281  000A2                           dummy_int:
   282  000A2  FB                       	reit
   283                                  
   284                                  	.end

Information List

TOTAL ERROR(S)    00000
TOTAL WARNING(S)  00000
TOTAL LINE(S)     00284   LINES

Section List

Attr        Size          Name
DATA     0000000(00000H)  data_SE
DATA     0000000(00000H)  bss_SE
DATA     0000000(00000H)  data_SO
DATA     0000000(00000H)  bss_SO
DATA     0000000(00000H)  data_NE
DATA     0000000(00000H)  bss_NE
DATA     0000000(00000H)  data_NO
DATA     0000000(00000H)  bss_NO
DATA     0000256(00100H)  stack
DATA     0000768(00300H)  heap
ROMDATA  0000000(00000H)  rom_NE
ROMDATA  0000000(00000H)  rom_NO
ROMDATA  0000000(00000H)  data_SEI
ROMDATA  0000000(00000H)  data_SOI
ROMDATA  0000000(00000H)  data_NEI
ROMDATA  0000000(00000H)  data_NOI
ROMDATA  0000000(00000H)  switch_table
CODE     0000000(00000H)  program
CODE     0000000(00000H)  interrupt
ROMDATA  0000256(00100H)  vector
ROMDATA  0000004(00004H)  fvector
CODE     0000163(000A3H)  interrupt
